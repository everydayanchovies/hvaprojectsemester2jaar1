
20180702 - 2 Slave 1 Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00802000  000019d6  00001a6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b3  0080207e  0080207e  00001ae8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007c9e  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f7b  00000000  00000000  00009b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f45  00000000  00000000  0000db0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  0000fa54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a33  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003085  00000000  00000000  00013fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  0001702c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_119>
     1e0:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 a6 04 	jmp	0x94c	; 0x94c <uart_fputc>
     200:	0c 94 be 04 	jmp	0x97c	; 0x97c <uart_fgetc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e6 ed       	ldi	r30, 0xD6	; 214
     21c:	f9 e1       	ldi	r31, 0x19	; 25
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 37       	cpi	r26, 0x7E	; 126
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	23 e2       	ldi	r18, 0x23	; 35
     230:	ae e7       	ldi	r26, 0x7E	; 126
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a1 33       	cpi	r26, 0x31	; 49
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <main>
     242:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |
     24a:	e0 e5       	ldi	r30, 0x50	; 80
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	82 83       	std	Z+2, r24	; 0x02
  OSC_XOSCSEL_XTAL_16KCLK_gc;
  OSC.CTRL |= OSC_XOSCEN_bm;
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	83 ff       	sbrs	r24, 3
     25c:	fd cf       	rjmp	.-6      	; 0x258 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc |
     25e:	e0 e5       	ldi	r30, 0x50	; 80
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	82 ec       	ldi	r24, 0xC2	; 194
     264:	85 83       	std	Z+5, r24	; 0x05
  (OSC_PLLFAC_gm & 2);
  OSC.CTRL |= OSC_PLLEN_bm;
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	84 ff       	sbrs	r24, 4
     270:	fd cf       	rjmp	.-6      	; 0x26c <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;
     272:	88 ed       	ldi	r24, 0xD8	; 216
     274:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret

0000028e <__vector_104>:
		_delay_ms(5);
	}
}

void init_pwm(void)
{ }
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	0b b6       	in	r0, 0x3b	; 59
     29a:	0f 92       	push	r0
     29c:	1f 93       	push	r17
     29e:	2f 93       	push	r18
     2a0:	3f 93       	push	r19
     2a2:	4f 93       	push	r20
     2a4:	5f 93       	push	r21
     2a6:	6f 93       	push	r22
     2a8:	7f 93       	push	r23
     2aa:	8f 93       	push	r24
     2ac:	9f 93       	push	r25
     2ae:	af 93       	push	r26
     2b0:	bf 93       	push	r27
     2b2:	ef 93       	push	r30
     2b4:	ff 93       	push	r31
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <__vector_104+0x2e>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	ae 01       	movw	r20, r28
     2c2:	4d 5f       	subi	r20, 0xFD	; 253
     2c4:	5f 4f       	sbci	r21, 0xFF	; 255
     2c6:	be 01       	movw	r22, r28
     2c8:	6e 5f       	subi	r22, 0xFE	; 254
     2ca:	7f 4f       	sbci	r23, 0xFF	; 255
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 19 03 	call	0x632	; 0x632 <nrfWhatHappened>
     2d4:	8b 81       	ldd	r24, Y+3	; 0x03
     2d6:	88 23       	and	r24, r24
     2d8:	61 f1       	breq	.+88     	; 0x332 <__vector_104+0xa4>
     2da:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <nrfGetDynamicPayloadSize>
     2de:	18 2f       	mov	r17, r24
     2e0:	68 2f       	mov	r22, r24
     2e2:	84 e8       	ldi	r24, 0x84	; 132
     2e4:	90 e2       	ldi	r25, 0x20	; 32
     2e6:	0e 94 bf 02 	call	0x57e	; 0x57e <nrfRead>
     2ea:	e1 2f       	mov	r30, r17
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	ec 57       	subi	r30, 0x7C	; 124
     2f0:	ff 4d       	sbci	r31, 0xDF	; 223
     2f2:	10 82       	st	Z, r1
     2f4:	6d e1       	ldi	r22, 0x1D	; 29
     2f6:	70 e2       	ldi	r23, 0x20	; 32
     2f8:	84 e8       	ldi	r24, 0x84	; 132
     2fa:	90 e2       	ldi	r25, 0x20	; 32
     2fc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <strcmp>
     300:	89 2b       	or	r24, r25
     302:	29 f4       	brne	.+10     	; 0x30e <__vector_104+0x80>
     304:	81 e2       	ldi	r24, 0x21	; 33
     306:	90 e2       	ldi	r25, 0x20	; 32
     308:	0e 94 05 0a 	call	0x140a	; 0x140a <puts>
     30c:	0c c0       	rjmp	.+24     	; 0x326 <__vector_104+0x98>
     30e:	66 e3       	ldi	r22, 0x36	; 54
     310:	70 e2       	ldi	r23, 0x20	; 32
     312:	84 e8       	ldi	r24, 0x84	; 132
     314:	90 e2       	ldi	r25, 0x20	; 32
     316:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	21 f4       	brne	.+8      	; 0x326 <__vector_104+0x98>
     31e:	8a e3       	ldi	r24, 0x3A	; 58
     320:	90 e2       	ldi	r25, 0x20	; 32
     322:	0e 94 05 0a 	call	0x140a	; 0x140a <puts>
     326:	8f e3       	ldi	r24, 0x3F	; 63
     328:	9c e9       	ldi	r25, 0x9C	; 156
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <__vector_104+0x9c>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <__vector_104+0xa2>
     330:	00 00       	nop
     332:	23 96       	adiw	r28, 0x03	; 3
     334:	cd bf       	out	0x3d, r28	; 61
     336:	de bf       	out	0x3e, r29	; 62
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	ff 91       	pop	r31
     33e:	ef 91       	pop	r30
     340:	bf 91       	pop	r27
     342:	af 91       	pop	r26
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	7f 91       	pop	r23
     34a:	6f 91       	pop	r22
     34c:	5f 91       	pop	r21
     34e:	4f 91       	pop	r20
     350:	3f 91       	pop	r19
     352:	2f 91       	pop	r18
     354:	1f 91       	pop	r17
     356:	0f 90       	pop	r0
     358:	0b be       	out	0x3b, r0	; 59
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti

00000364 <init_nrf>:

void init_nrf(void)
{
	nrfspiInit();
     364:	0e 94 7e 04 	call	0x8fc	; 0x8fc <nrfspiInit>
	// Check SPI Connection
	if (nrfVerifySPIConnection())   PORTF.OUTSET = PIN0_bm;
     368:	0e 94 5f 04 	call	0x8be	; 0x8be <nrfVerifySPIConnection>
     36c:	88 23       	and	r24, r24
     36e:	21 f0       	breq	.+8      	; 0x378 <init_nrf+0x14>
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     376:	03 c0       	rjmp	.+6      	; 0x37e <init_nrf+0x1a>
	else                             PORTF.OUTSET = PIN1_bm;
     378:	82 e0       	ldi	r24, 0x02	; 2
     37a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

	nrfBegin();
     37e:	0e 94 36 04 	call	0x86c	; 0x86c <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc, NRF_SETUP_ARC_8RETRANSMIT_gc);
     382:	68 e0       	ldi	r22, 0x08	; 8
     384:	80 e3       	ldi	r24, 0x30	; 48
     386:	0e 94 2c 04 	call	0x858	; 0x858 <nrfSetRetries>
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);
     390:	80 e2       	ldi	r24, 0x20	; 32
     392:	0e 94 08 04 	call	0x810	; 0x810 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);
     396:	8c e0       	ldi	r24, 0x0C	; 12
     398:	0e 94 1e 04 	call	0x83c	; 0x83c <nrfSetCRCLength>
	nrfSetChannel(48);
     39c:	80 e3       	ldi	r24, 0x30	; 48
     39e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <nrfSetChannel>
	nrfSetAutoAck(1);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrfSetAutoAck>
	nrfEnableDynamicPayloads();
     3a8:	0e 94 ad 03 	call	0x75a	; 0x75a <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();
     3ac:	0e 94 31 04 	call	0x862	; 0x862 <nrfClearInterruptBits>
	nrfFlushRx();
     3b0:	0e 94 c6 02 	call	0x58c	; 0x58c <nrfFlushRx>
	nrfFlushTx();
     3b4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <nrfFlushTx>

	// Interrupt Pin
	PORTF.INT0MASK |= PIN6_bm;
     3b8:	e0 ea       	ldi	r30, 0xA0	; 160
     3ba:	f6 e0       	ldi	r31, 0x06	; 6
     3bc:	82 85       	ldd	r24, Z+10	; 0x0a
     3be:	80 64       	ori	r24, 0x40	; 64
     3c0:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.INTCTRL   = (PORTF.INTCTRL & ~PORT_INT0LVL_gm) |
     3c6:	81 85       	ldd	r24, Z+9	; 0x09
     3c8:	8c 7f       	andi	r24, 0xFC	; 252
     3ca:	81 60       	ori	r24, 0x01	; 1
     3cc:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT0LVL_LO_gc;

	nrfOpenWritingPipe(pipes[0]);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e2       	ldi	r25, 0x20	; 32
     3d2:	0e 94 37 03 	call	0x66e	; 0x66e <nrfOpenWritingPipe>
	nrfOpenReadingPipe(1,pipes[1]);
     3d6:	66 e0       	ldi	r22, 0x06	; 6
     3d8:	70 e2       	ldi	r23, 0x20	; 32
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 55 03 	call	0x6aa	; 0x6aa <nrfOpenReadingPipe>
     3e0:	08 95       	ret

000003e2 <main>:

int main(void)
{
	uint16_t length;

	Config32MHzClock_Ext16M();
     3e2:	0e 94 25 01 	call	0x24a	; 0x24a <Config32MHzClock_Ext16M>

	init_pwm();
	init_nrf();
     3e6:	0e 94 b2 01 	call	0x364	; 0x364 <init_nrf>

	init_stream(F_CPU);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	78 e4       	ldi	r23, 0x48	; 72
     3ee:	88 ee       	ldi	r24, 0xE8	; 232
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 1b 05 	call	0xa36	; 0xa36 <init_stream>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     3f6:	e0 ea       	ldi	r30, 0xA0	; 160
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	82 83       	std	Z+2, r24	; 0x02
	sei();
     400:	78 94       	sei

	clear_screen();
     402:	8f e4       	ldi	r24, 0x4F	; 79
     404:	90 e2       	ldi	r25, 0x20	; 32
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <printf>
	printf("Master\n");
     40e:	8b e5       	ldi	r24, 0x5B	; 91
     410:	90 e2       	ldi	r25, 0x20	; 32
     412:	0e 94 05 0a 	call	0x140a	; 0x140a <puts>

	nrfStartListening();
     416:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <nrfStartListening>
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	ff cf       	rjmp	.-2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

00000420 <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	c0 ea       	ldi	r28, 0xA0	; 160
     428:	d6 e0       	ldi	r29, 0x06	; 6
     42a:	10 e2       	ldi	r17, 0x20	; 32
     42c:	1e 83       	std	Y+6, r17	; 0x06
     42e:	8f 71       	andi	r24, 0x1F	; 31
     430:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     43a:	1d 83       	std	Y+5, r17	; 0x05
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <nrfWriteRegisterMulti>:
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	7b 01       	movw	r14, r22
     454:	c4 2f       	mov	r28, r20
     456:	90 e2       	ldi	r25, 0x20	; 32
     458:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     45c:	8f 71       	andi	r24, 0x1F	; 31
     45e:	80 62       	ori	r24, 0x20	; 32
     460:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     464:	d8 2e       	mov	r13, r24
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	8c 0f       	add	r24, r28
     46a:	cc 23       	and	r28, r28
     46c:	69 f0       	breq	.+26     	; 0x488 <nrfWriteRegisterMulti+0x44>
     46e:	e7 01       	movw	r28, r14
     470:	08 2f       	mov	r16, r24
     472:	10 e0       	ldi	r17, 0x00	; 0
     474:	0f 5f       	subi	r16, 0xFF	; 255
     476:	1f 4f       	sbci	r17, 0xFF	; 255
     478:	0e 0d       	add	r16, r14
     47a:	1f 1d       	adc	r17, r15
     47c:	89 91       	ld	r24, Y+
     47e:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     482:	c0 17       	cp	r28, r16
     484:	d1 07       	cpc	r29, r17
     486:	d1 f7       	brne	.-12     	; 0x47c <nrfWriteRegisterMulti+0x38>
     488:	80 e2       	ldi	r24, 0x20	; 32
     48a:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     48e:	8d 2d       	mov	r24, r13
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	df 90       	pop	r13
     49e:	08 95       	ret

000004a0 <nrfWriteRegister>:
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	f6 2e       	mov	r15, r22
     4ac:	c0 ea       	ldi	r28, 0xA0	; 160
     4ae:	d6 e0       	ldi	r29, 0x06	; 6
     4b0:	10 e2       	ldi	r17, 0x20	; 32
     4b2:	1e 83       	std	Y+6, r17	; 0x06
     4b4:	8f 71       	andi	r24, 0x1F	; 31
     4b6:	80 62       	ori	r24, 0x20	; 32
     4b8:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     4bc:	08 2f       	mov	r16, r24
     4be:	8f 2d       	mov	r24, r15
     4c0:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     4c4:	1d 83       	std	Y+5, r17	; 0x05
     4c6:	80 2f       	mov	r24, r16
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	08 95       	ret

000004d4 <nrfReadPayload>:
     4d4:	bf 92       	push	r11
     4d6:	cf 92       	push	r12
     4d8:	df 92       	push	r13
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	6c 01       	movw	r12, r24
     4e8:	c0 91 0d 20 	lds	r28, 0x200D	; 0x80200d <fixed_payload_size>
     4ec:	1c 2f       	mov	r17, r28
     4ee:	6c 17       	cp	r22, r28
     4f0:	08 f4       	brcc	.+2      	; 0x4f4 <nrfReadPayload+0x20>
     4f2:	16 2f       	mov	r17, r22
     4f4:	80 91 83 20 	lds	r24, 0x2083	; 0x802083 <dynamic_payloads_enabled>
     4f8:	81 11       	cpse	r24, r1
     4fa:	27 c0       	rjmp	.+78     	; 0x54a <nrfReadPayload+0x76>
     4fc:	0c 2f       	mov	r16, r28
     4fe:	01 1b       	sub	r16, r17
     500:	80 e2       	ldi	r24, 0x20	; 32
     502:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     506:	81 e6       	ldi	r24, 0x61	; 97
     508:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     50c:	b8 2e       	mov	r11, r24
     50e:	ee 24       	eor	r14, r14
     510:	ea 94       	dec	r14
     512:	e1 0e       	add	r14, r17
     514:	11 11       	cpse	r17, r1
     516:	02 c0       	rjmp	.+4      	; 0x51c <nrfReadPayload+0x48>
     518:	0f c0       	rjmp	.+30     	; 0x538 <nrfReadPayload+0x64>
     51a:	00 e0       	ldi	r16, 0x00	; 0
     51c:	e6 01       	movw	r28, r12
     51e:	f1 2c       	mov	r15, r1
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	e8 1a       	sub	r14, r24
     524:	f8 0a       	sbc	r15, r24
     526:	ec 0c       	add	r14, r12
     528:	fd 1c       	adc	r15, r13
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     530:	89 93       	st	Y+, r24
     532:	ec 16       	cp	r14, r28
     534:	fd 06       	cpc	r15, r29
     536:	c9 f7       	brne	.-14     	; 0x52a <nrfReadPayload+0x56>
     538:	00 23       	and	r16, r16
     53a:	99 f0       	breq	.+38     	; 0x562 <nrfReadPayload+0x8e>
     53c:	c0 2f       	mov	r28, r16
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     544:	c1 50       	subi	r28, 0x01	; 1
     546:	d9 f7       	brne	.-10     	; 0x53e <nrfReadPayload+0x6a>
     548:	0c c0       	rjmp	.+24     	; 0x562 <nrfReadPayload+0x8e>
     54a:	80 e2       	ldi	r24, 0x20	; 32
     54c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     550:	81 e6       	ldi	r24, 0x61	; 97
     552:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     556:	b8 2e       	mov	r11, r24
     558:	ee 24       	eor	r14, r14
     55a:	ea 94       	dec	r14
     55c:	e1 0e       	add	r14, r17
     55e:	11 11       	cpse	r17, r1
     560:	dc cf       	rjmp	.-72     	; 0x51a <nrfReadPayload+0x46>
     562:	80 e2       	ldi	r24, 0x20	; 32
     564:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     568:	8b 2d       	mov	r24, r11
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	cf 90       	pop	r12
     57a:	bf 90       	pop	r11
     57c:	08 95       	ret

0000057e <nrfRead>:
     57e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <nrfReadPayload>
     582:	87 e1       	ldi	r24, 0x17	; 23
     584:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     588:	81 70       	andi	r24, 0x01	; 1
     58a:	08 95       	ret

0000058c <nrfFlushRx>:
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	c0 ea       	ldi	r28, 0xA0	; 160
     594:	d6 e0       	ldi	r29, 0x06	; 6
     596:	10 e2       	ldi	r17, 0x20	; 32
     598:	1e 83       	std	Y+6, r17	; 0x06
     59a:	82 ee       	ldi	r24, 0xE2	; 226
     59c:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     5a0:	1d 83       	std	Y+5, r17	; 0x05
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	08 95       	ret

000005aa <nrfFlushTx>:
     5aa:	1f 93       	push	r17
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	c0 ea       	ldi	r28, 0xA0	; 160
     5b2:	d6 e0       	ldi	r29, 0x06	; 6
     5b4:	10 e2       	ldi	r17, 0x20	; 32
     5b6:	1e 83       	std	Y+6, r17	; 0x06
     5b8:	81 ee       	ldi	r24, 0xE1	; 225
     5ba:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     5be:	1d 83       	std	Y+5, r17	; 0x05
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	08 95       	ret

000005c8 <nrfStartListening>:
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     5ce:	81 fd       	sbrc	r24, 1
     5d0:	0c c0       	rjmp	.+24     	; 0x5ea <nrfStartListening+0x22>
     5d2:	68 2f       	mov	r22, r24
     5d4:	63 60       	ori	r22, 0x03	; 3
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     5dc:	8f e7       	ldi	r24, 0x7F	; 127
     5de:	9e e3       	ldi	r25, 0x3E	; 62
     5e0:	01 97       	sbiw	r24, 0x01	; 1
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <nrfStartListening+0x18>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <nrfStartListening+0x1e>
     5e6:	00 00       	nop
     5e8:	05 c0       	rjmp	.+10     	; 0x5f4 <nrfStartListening+0x2c>
     5ea:	68 2f       	mov	r22, r24
     5ec:	61 60       	ori	r22, 0x01	; 1
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     5f4:	8f e0       	ldi	r24, 0x0F	; 15
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <nrfStartListening+0x30>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <nrfStartListening+0x36>
     5fe:	00 00       	nop
     600:	60 e7       	ldi	r22, 0x70	; 112
     602:	87 e0       	ldi	r24, 0x07	; 7
     604:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     608:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     60c:	6e e7       	ldi	r22, 0x7E	; 126
     60e:	70 e2       	ldi	r23, 0x20	; 32
     610:	8a e0       	ldi	r24, 0x0A	; 10
     612:	0e 94 22 02 	call	0x444	; 0x444 <nrfWriteRegisterMulti>
     616:	0e 94 c6 02 	call	0x58c	; 0x58c <nrfFlushRx>
     61a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <nrfFlushTx>
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     624:	8f e0       	ldi	r24, 0x0F	; 15
     626:	94 e0       	ldi	r25, 0x04	; 4
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <nrfStartListening+0x60>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <nrfStartListening+0x66>
     62e:	00 00       	nop
     630:	08 95       	ret

00000632 <nrfWhatHappened>:
     632:	ef 92       	push	r14
     634:	ff 92       	push	r15
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	7c 01       	movw	r14, r24
     640:	8b 01       	movw	r16, r22
     642:	ea 01       	movw	r28, r20
     644:	60 e7       	ldi	r22, 0x70	; 112
     646:	87 e0       	ldi	r24, 0x07	; 7
     648:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     64c:	98 2f       	mov	r25, r24
     64e:	90 72       	andi	r25, 0x20	; 32
     650:	f7 01       	movw	r30, r14
     652:	90 83       	st	Z, r25
     654:	98 2f       	mov	r25, r24
     656:	90 71       	andi	r25, 0x10	; 16
     658:	f8 01       	movw	r30, r16
     65a:	90 83       	st	Z, r25
     65c:	80 74       	andi	r24, 0x40	; 64
     65e:	88 83       	st	Y, r24
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <nrfOpenWritingPipe>:
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
     674:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     678:	bc 01       	movw	r22, r24
     67a:	8a e0       	ldi	r24, 0x0A	; 10
     67c:	0e 94 22 02 	call	0x444	; 0x444 <nrfWriteRegisterMulti>
     680:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     684:	be 01       	movw	r22, r28
     686:	80 e1       	ldi	r24, 0x10	; 16
     688:	0e 94 22 02 	call	0x444	; 0x444 <nrfWriteRegisterMulti>
     68c:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
     690:	60 32       	cpi	r22, 0x20	; 32
     692:	20 f4       	brcc	.+8      	; 0x69c <nrfOpenWritingPipe+0x2e>
     694:	81 e1       	ldi	r24, 0x11	; 17
     696:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     69a:	04 c0       	rjmp	.+8      	; 0x6a4 <nrfOpenWritingPipe+0x36>
     69c:	60 e2       	ldi	r22, 0x20	; 32
     69e:	81 e1       	ldi	r24, 0x11	; 17
     6a0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	08 95       	ret

000006aa <nrfOpenReadingPipe>:
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	c8 2f       	mov	r28, r24
     6b4:	8b 01       	movw	r16, r22
     6b6:	81 11       	cpse	r24, r1
     6b8:	08 c0       	rjmp	.+16     	; 0x6ca <nrfOpenReadingPipe+0x20>
     6ba:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	8e e7       	ldi	r24, 0x7E	; 126
     6c2:	90 e2       	ldi	r25, 0x20	; 32
     6c4:	0e 94 df 09 	call	0x13be	; 0x13be <memcpy>
     6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <nrfOpenReadingPipe+0x28>
     6ca:	87 30       	cpi	r24, 0x07	; 7
     6cc:	78 f5       	brcc	.+94     	; 0x72c <nrfOpenReadingPipe+0x82>
     6ce:	82 30       	cpi	r24, 0x02	; 2
     6d0:	58 f4       	brcc	.+22     	; 0x6e8 <nrfOpenReadingPipe+0x3e>
     6d2:	ec 2f       	mov	r30, r28
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	e8 58       	subi	r30, 0x88	; 136
     6d8:	ff 4d       	sbci	r31, 0xDF	; 223
     6da:	40 91 0c 20 	lds	r20, 0x200C	; 0x80200c <addr_width>
     6de:	b8 01       	movw	r22, r16
     6e0:	80 81       	ld	r24, Z
     6e2:	0e 94 22 02 	call	0x444	; 0x444 <nrfWriteRegisterMulti>
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <nrfOpenReadingPipe+0x4e>
     6e8:	e8 2f       	mov	r30, r24
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	e8 58       	subi	r30, 0x88	; 136
     6ee:	ff 4d       	sbci	r31, 0xDF	; 223
     6f0:	41 e0       	ldi	r20, 0x01	; 1
     6f2:	80 81       	ld	r24, Z
     6f4:	0e 94 22 02 	call	0x444	; 0x444 <nrfWriteRegisterMulti>
     6f8:	d0 e0       	ldi	r29, 0x00	; 0
     6fa:	fe 01       	movw	r30, r28
     6fc:	ee 58       	subi	r30, 0x8E	; 142
     6fe:	ff 4d       	sbci	r31, 0xDF	; 223
     700:	60 91 0d 20 	lds	r22, 0x200D	; 0x80200d <fixed_payload_size>
     704:	80 81       	ld	r24, Z
     706:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     710:	c4 59       	subi	r28, 0x94	; 148
     712:	df 4d       	sbci	r29, 0xDF	; 223
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	08 80       	ld	r0, Y
     71a:	02 c0       	rjmp	.+4      	; 0x720 <nrfOpenReadingPipe+0x76>
     71c:	66 0f       	add	r22, r22
     71e:	77 1f       	adc	r23, r23
     720:	0a 94       	dec	r0
     722:	e2 f7       	brpl	.-8      	; 0x71c <nrfOpenReadingPipe+0x72>
     724:	68 2b       	or	r22, r24
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	0f 91       	pop	r16
     734:	08 95       	ret

00000736 <nrfToggleFeatures>:
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	c0 ea       	ldi	r28, 0xA0	; 160
     73e:	d6 e0       	ldi	r29, 0x06	; 6
     740:	10 e2       	ldi	r17, 0x20	; 32
     742:	1e 83       	std	Y+6, r17	; 0x06
     744:	80 e5       	ldi	r24, 0x50	; 80
     746:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     74a:	83 e7       	ldi	r24, 0x73	; 115
     74c:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     750:	1d 83       	std	Y+5, r17	; 0x05
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	08 95       	ret

0000075a <nrfEnableDynamicPayloads>:
     75a:	8d e1       	ldi	r24, 0x1D	; 29
     75c:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     760:	68 2f       	mov	r22, r24
     762:	64 60       	ori	r22, 0x04	; 4
     764:	8d e1       	ldi	r24, 0x1D	; 29
     766:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     76a:	8d e1       	ldi	r24, 0x1D	; 29
     76c:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     770:	81 11       	cpse	r24, r1
     772:	0a c0       	rjmp	.+20     	; 0x788 <nrfEnableDynamicPayloads+0x2e>
     774:	0e 94 9b 03 	call	0x736	; 0x736 <nrfToggleFeatures>
     778:	8d e1       	ldi	r24, 0x1D	; 29
     77a:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     77e:	68 2f       	mov	r22, r24
     780:	64 60       	ori	r22, 0x04	; 4
     782:	8d e1       	ldi	r24, 0x1D	; 29
     784:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     788:	8c e1       	ldi	r24, 0x1C	; 28
     78a:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     78e:	68 2f       	mov	r22, r24
     790:	6f 63       	ori	r22, 0x3F	; 63
     792:	8c e1       	ldi	r24, 0x1C	; 28
     794:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 83 20 	sts	0x2083, r24	; 0x802083 <dynamic_payloads_enabled>
     79e:	08 95       	ret

000007a0 <nrfGetDynamicPayloadSize>:
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	c0 ea       	ldi	r28, 0xA0	; 160
     7a8:	d6 e0       	ldi	r29, 0x06	; 6
     7aa:	10 e2       	ldi	r17, 0x20	; 32
     7ac:	1e 83       	std	Y+6, r17	; 0x06
     7ae:	80 e6       	ldi	r24, 0x60	; 96
     7b0:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	0e 94 98 04 	call	0x930	; 0x930 <nrfspiTransfer>
     7ba:	1d 83       	std	Y+5, r17	; 0x05
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	08 95       	ret

000007c4 <nrfSetChannel>:
     7c4:	88 23       	and	r24, r24
     7c6:	2c f0       	brlt	.+10     	; 0x7d2 <nrfSetChannel+0xe>
     7c8:	68 2f       	mov	r22, r24
     7ca:	85 e0       	ldi	r24, 0x05	; 5
     7cc:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     7d0:	08 95       	ret
     7d2:	6f e7       	ldi	r22, 0x7F	; 127
     7d4:	85 e0       	ldi	r24, 0x05	; 5
     7d6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     7da:	08 95       	ret

000007dc <nrfSetAutoAck>:
     7dc:	88 23       	and	r24, r24
     7de:	29 f0       	breq	.+10     	; 0x7ea <nrfSetAutoAck+0xe>
     7e0:	6f e3       	ldi	r22, 0x3F	; 63
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     7e8:	08 95       	ret
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     7f2:	08 95       	ret

000007f4 <nrfSetPALevel>:
     7f4:	cf 93       	push	r28
     7f6:	c8 2f       	mov	r28, r24
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     7fe:	89 7f       	andi	r24, 0xF9	; 249
     800:	c6 70       	andi	r28, 0x06	; 6
     802:	68 2f       	mov	r22, r24
     804:	6c 2b       	or	r22, r28
     806:	86 e0       	ldi	r24, 0x06	; 6
     808:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <nrfSetDataRate>:
     810:	cf 93       	push	r28
     812:	c8 2f       	mov	r28, r24
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     81a:	87 7d       	andi	r24, 0xD7	; 215
     81c:	9c 2f       	mov	r25, r28
     81e:	98 72       	andi	r25, 0x28	; 40
     820:	68 2f       	mov	r22, r24
     822:	69 2b       	or	r22, r25
     824:	86 e0       	ldi	r24, 0x06	; 6
     826:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	c8 13       	cpse	r28, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	89 2f       	mov	r24, r25
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <nrfSetCRCLength>:
     83c:	cf 93       	push	r28
     83e:	c8 2f       	mov	r28, r24
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     846:	83 7f       	andi	r24, 0xF3	; 243
     848:	cc 70       	andi	r28, 0x0C	; 12
     84a:	68 2f       	mov	r22, r24
     84c:	6c 2b       	or	r22, r28
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     854:	cf 91       	pop	r28
     856:	08 95       	ret

00000858 <nrfSetRetries>:
     858:	68 2b       	or	r22, r24
     85a:	84 e0       	ldi	r24, 0x04	; 4
     85c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     860:	08 95       	ret

00000862 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     862:	60 e7       	ldi	r22, 0x70	; 112
     864:	87 e0       	ldi	r24, 0x07	; 7
     866:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     86a:	08 95       	ret

0000086c <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86c:	8f e3       	ldi	r24, 0x3F	; 63
     86e:	9c e9       	ldi	r25, 0x9C	; 156
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <nrfBegin+0x4>
     874:	00 c0       	rjmp	.+0      	; 0x876 <nrfBegin+0xa>
     876:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     878:	6f e5       	ldi	r22, 0x5F	; 95
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     886:	80 e2       	ldi	r24, 0x20	; 32
     888:	0e 94 08 04 	call	0x810	; 0x810 <nrfSetDataRate>
     88c:	88 23       	and	r24, r24
     88e:	19 f0       	breq	.+6      	; 0x896 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 08 04 	call	0x810	; 0x810 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     89c:	8c e0       	ldi	r24, 0x0C	; 12
     89e:	0e 94 1e 04 	call	0x83c	; 0x83c <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	8c e1       	ldi	r24, 0x1C	; 28
     8a6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     8aa:	8c e4       	ldi	r24, 0x4C	; 76
     8ac:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     8b0:	0e 94 31 04 	call	0x862	; 0x862 <nrfClearInterruptBits>
  nrfFlushRx();
     8b4:	0e 94 c6 02 	call	0x58c	; 0x58c <nrfFlushRx>
  nrfFlushTx();
     8b8:	0e 94 d5 02 	call	0x5aa	; 0x5aa <nrfFlushTx>
     8bc:	08 95       	ret

000008be <nrfVerifySPIConnection>:
 *          0 (false) if not
 */

// from Wouter
uint8_t nrfVerifySPIConnection(void)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
  uint8_t iBuffer = 0;
  uint8_t iDataBuffer = 0;

  iDataBuffer = nrfReadRegister(REG_SETUP_RETR);  // Buffer old value
     8c2:	84 e0       	ldi	r24, 0x04	; 4
     8c4:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     8c8:	d8 2f       	mov	r29, r24
  nrfWriteRegister(REG_SETUP_RETR, 0x48);         // Write random value
     8ca:	68 e4       	ldi	r22, 0x48	; 72
     8cc:	84 e0       	ldi	r24, 0x04	; 4
     8ce:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     8d2:	8f e3       	ldi	r24, 0x3F	; 63
     8d4:	9f e1       	ldi	r25, 0x1F	; 31
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <nrfVerifySPIConnection+0x18>
     8da:	00 c0       	rjmp	.+0      	; 0x8dc <nrfVerifySPIConnection+0x1e>
     8dc:	00 00       	nop
  _delay_ms(1);
  iBuffer = nrfReadRegister(REG_SETUP_RETR);      // Read value from SPI
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	0e 94 10 02 	call	0x420	; 0x420 <nrfReadRegister>
     8e4:	c8 2f       	mov	r28, r24
  nrfWriteRegister(REG_SETUP_RETR, iDataBuffer);  // Restore old value
     8e6:	6d 2f       	mov	r22, r29
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	0e 94 50 02 	call	0x4a0	; 0x4a0 <nrfWriteRegister>
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	c8 34       	cpi	r28, 0x48	; 72
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <nrfVerifySPIConnection+0x38>
     8f4:	80 e0       	ldi	r24, 0x00	; 0

  if (iBuffer == 0x48) return(1);                  // 1 - Value is as expected
  else                 return(0);                  // 0 - Value is different
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     8fc:	e0 e4       	ldi	r30, 0x40	; 64
     8fe:	f6 e0       	ldi	r31, 0x06	; 6
     900:	88 e0       	ldi	r24, 0x08	; 8
     902:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     904:	84 e0       	ldi	r24, 0x04	; 4
     906:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     908:	82 e0       	ldi	r24, 0x02	; 2
     90a:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     90c:	e0 ea       	ldi	r30, 0xA0	; 160
     90e:	f6 e0       	ldi	r31, 0x06	; 6
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     914:	80 e4       	ldi	r24, 0x40	; 64
     916:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     918:	80 e8       	ldi	r24, 0x80	; 128
     91a:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     91c:	e0 ea       	ldi	r30, 0xA0	; 160
     91e:	f8 e0       	ldi	r31, 0x08	; 8
     920:	88 e1       	ldi	r24, 0x18	; 24
     922:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     924:	80 ec       	ldi	r24, 0xC0	; 192
     926:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     928:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	86 83       	std	Z+6, r24	; 0x06
     92e:	08 95       	ret

00000930 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     930:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     934:	e0 ea       	ldi	r30, 0xA0	; 160
     936:	f8 e0       	ldi	r31, 0x08	; 8
     938:	81 81       	ldd	r24, Z+1	; 0x01
     93a:	86 ff       	sbrs	r24, 6
     93c:	fd cf       	rjmp	.-6      	; 0x938 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     93e:	e0 ea       	ldi	r30, 0xA0	; 160
     940:	f8 e0       	ldi	r31, 0x08	; 8
     942:	81 81       	ldd	r24, Z+1	; 0x01
     944:	80 64       	ori	r24, 0x40	; 64
     946:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     948:	80 81       	ld	r24, Z
}
     94a:	08 95       	ret

0000094c <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     94c:	cf 93       	push	r28
     94e:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     950:	84 e2       	ldi	r24, 0x24	; 36
     952:	91 e2       	ldi	r25, 0x21	; 33
     954:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <USART_TXBuffer_FreeSpace>
     958:	88 23       	and	r24, r24
     95a:	d1 f3       	breq	.-12     	; 0x950 <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     95c:	ca 30       	cpi	r28, 0x0A	; 10
     95e:	29 f4       	brne	.+10     	; 0x96a <uart_fputc+0x1e>
     960:	6d e0       	ldi	r22, 0x0D	; 13
     962:	84 e2       	ldi	r24, 0x24	; 36
     964:	91 e2       	ldi	r25, 0x21	; 33
     966:	0e 94 52 05 	call	0xaa4	; 0xaa4 <uart_putc>
  uart_putc(&uartF0, c);
     96a:	6c 2f       	mov	r22, r28
     96c:	84 e2       	ldi	r24, 0x24	; 36
     96e:	91 e2       	ldi	r25, 0x21	; 33
     970:	0e 94 52 05 	call	0xaa4	; 0xaa4 <uart_putc>

  return 0;
}
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     97c:	84 e2       	ldi	r24, 0x24	; 36
     97e:	91 e2       	ldi	r25, 0x21	; 33
     980:	0e 94 41 05 	call	0xa82	; 0xa82 <uart_getc>
     984:	81 15       	cp	r24, r1
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	92 07       	cpc	r25, r18
     98a:	c1 f3       	breq	.-16     	; 0x97c <uart_fgetc>

  return c;
}
     98c:	08 95       	ret

0000098e <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	0b b6       	in	r0, 0x3b	; 59
     99a:	0f 92       	push	r0
     99c:	2f 93       	push	r18
     99e:	3f 93       	push	r19
     9a0:	4f 93       	push	r20
     9a2:	5f 93       	push	r21
     9a4:	6f 93       	push	r22
     9a6:	7f 93       	push	r23
     9a8:	8f 93       	push	r24
     9aa:	9f 93       	push	r25
     9ac:	af 93       	push	r26
     9ae:	bf 93       	push	r27
     9b0:	ef 93       	push	r30
     9b2:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     9b4:	84 e2       	ldi	r24, 0x24	; 36
     9b6:	91 e2       	ldi	r25, 0x21	; 33
     9b8:	0e 94 49 07 	call	0xe92	; 0xe92 <USART_RXComplete>
}
     9bc:	ff 91       	pop	r31
     9be:	ef 91       	pop	r30
     9c0:	bf 91       	pop	r27
     9c2:	af 91       	pop	r26
     9c4:	9f 91       	pop	r25
     9c6:	8f 91       	pop	r24
     9c8:	7f 91       	pop	r23
     9ca:	6f 91       	pop	r22
     9cc:	5f 91       	pop	r21
     9ce:	4f 91       	pop	r20
     9d0:	3f 91       	pop	r19
     9d2:	2f 91       	pop	r18
     9d4:	0f 90       	pop	r0
     9d6:	0b be       	out	0x3b, r0	; 59
     9d8:	0f 90       	pop	r0
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	0f 90       	pop	r0
     9de:	1f 90       	pop	r1
     9e0:	18 95       	reti

000009e2 <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     a08:	84 e2       	ldi	r24, 0x24	; 36
     a0a:	91 e2       	ldi	r25, 0x21	; 33
     a0c:	0e 94 64 07 	call	0xec8	; 0xec8 <USART_DataRegEmpty>
}
     a10:	ff 91       	pop	r31
     a12:	ef 91       	pop	r30
     a14:	bf 91       	pop	r27
     a16:	af 91       	pop	r26
     a18:	9f 91       	pop	r25
     a1a:	8f 91       	pop	r24
     a1c:	7f 91       	pop	r23
     a1e:	6f 91       	pop	r22
     a20:	5f 91       	pop	r21
     a22:	4f 91       	pop	r20
     a24:	3f 91       	pop	r19
     a26:	2f 91       	pop	r18
     a28:	0f 90       	pop	r0
     a2a:	0b be       	out	0x3b, r0	; 59
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     a36:	cf 92       	push	r12
     a38:	ef 92       	push	r14
     a3a:	ff 92       	push	r15
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     a44:	c1 2c       	mov	r12, r1
     a46:	e1 2c       	mov	r14, r1
     a48:	12 ec       	ldi	r17, 0xC2	; 194
     a4a:	f1 2e       	mov	r15, r17
     a4c:	01 e0       	ldi	r16, 0x01	; 1
     a4e:	10 e0       	ldi	r17, 0x00	; 0
     a50:	60 ea       	ldi	r22, 0xA0	; 160
     a52:	7b e0       	ldi	r23, 0x0B	; 11
     a54:	84 e2       	ldi	r24, 0x24	; 36
     a56:	91 e2       	ldi	r25, 0x21	; 33
     a58:	0e 94 8c 06 	call	0xd18	; 0xd18 <init_uart>
  stdout = stdin = &uart_stdinout;
     a5c:	eb e2       	ldi	r30, 0x2B	; 43
     a5e:	f3 e2       	ldi	r31, 0x23	; 35
     a60:	8f e0       	ldi	r24, 0x0F	; 15
     a62:	90 e2       	ldi	r25, 0x20	; 32
     a64:	80 83       	st	Z, r24
     a66:	91 83       	std	Z+1, r25	; 0x01
     a68:	82 83       	std	Z+2, r24	; 0x02
     a6a:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     a6c:	e0 ea       	ldi	r30, 0xA0	; 160
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	82 81       	ldd	r24, Z+2	; 0x02
     a72:	81 60       	ori	r24, 0x01	; 1
     a74:	82 83       	std	Z+2, r24	; 0x02
}
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	ef 90       	pop	r14
     a7e:	cf 90       	pop	r12
     a80:	08 95       	ret

00000a82 <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
     a88:	0e 94 31 07 	call	0xe62	; 0xe62 <USART_RXBufferData_Available>
     a8c:	88 23       	and	r24, r24
     a8e:	29 f0       	breq	.+10     	; 0xa9a <uart_getc+0x18>
     a90:	ce 01       	movw	r24, r28
     a92:	0e 94 3c 07 	call	0xe78	; 0xe78 <USART_RXBuffer_GetByte>
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <uart_getc+0x1c>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	08 95       	ret

00000aa4 <uart_putc>:
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
     aac:	16 2f       	mov	r17, r22
     aae:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <USART_TXBuffer_FreeSpace>
     ab2:	88 23       	and	r24, r24
     ab4:	21 f0       	breq	.+8      	; 0xabe <uart_putc+0x1a>
     ab6:	61 2f       	mov	r22, r17
     ab8:	ce 01       	movw	r24, r28
     aba:	0e 94 08 07 	call	0xe10	; 0xe10 <USART_TXBuffer_PutByte>
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	08 95       	ret

00000ac6 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     ac6:	80 3a       	cpi	r24, 0xA0	; 160
     ac8:	28 e0       	ldi	r18, 0x08	; 8
     aca:	92 07       	cpc	r25, r18
     acc:	39 f4       	brne	.+14     	; 0xadc <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     ace:	e0 e4       	ldi	r30, 0x40	; 64
     ad0:	f6 e0       	ldi	r31, 0x06	; 6
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     ad6:	84 e0       	ldi	r24, 0x04	; 4
     ad8:	82 83       	std	Z+2, r24	; 0x02
     return;
     ada:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     adc:	80 3b       	cpi	r24, 0xB0	; 176
     ade:	28 e0       	ldi	r18, 0x08	; 8
     ae0:	92 07       	cpc	r25, r18
     ae2:	39 f4       	brne	.+14     	; 0xaf2 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     ae4:	e0 e4       	ldi	r30, 0x40	; 64
     ae6:	f6 e0       	ldi	r31, 0x06	; 6
     ae8:	80 e8       	ldi	r24, 0x80	; 128
     aea:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	82 83       	std	Z+2, r24	; 0x02
     return;
     af0:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     af2:	80 3a       	cpi	r24, 0xA0	; 160
     af4:	29 e0       	ldi	r18, 0x09	; 9
     af6:	92 07       	cpc	r25, r18
     af8:	39 f4       	brne	.+14     	; 0xb08 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     afa:	e0 e6       	ldi	r30, 0x60	; 96
     afc:	f6 e0       	ldi	r31, 0x06	; 6
     afe:	88 e0       	ldi	r24, 0x08	; 8
     b00:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	82 83       	std	Z+2, r24	; 0x02
     return;
     b06:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     b08:	80 3b       	cpi	r24, 0xB0	; 176
     b0a:	29 e0       	ldi	r18, 0x09	; 9
     b0c:	92 07       	cpc	r25, r18
     b0e:	39 f4       	brne	.+14     	; 0xb1e <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     b10:	e0 e6       	ldi	r30, 0x60	; 96
     b12:	f6 e0       	ldi	r31, 0x06	; 6
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	82 83       	std	Z+2, r24	; 0x02
     return;
     b1c:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     b1e:	80 3a       	cpi	r24, 0xA0	; 160
     b20:	2a e0       	ldi	r18, 0x0A	; 10
     b22:	92 07       	cpc	r25, r18
     b24:	39 f4       	brne	.+14     	; 0xb34 <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
     b26:	e0 e8       	ldi	r30, 0x80	; 128
     b28:	f6 e0       	ldi	r31, 0x06	; 6
     b2a:	88 e0       	ldi	r24, 0x08	; 8
     b2c:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	82 83       	std	Z+2, r24	; 0x02
     return;
     b32:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
     b34:	80 3b       	cpi	r24, 0xB0	; 176
     b36:	2a e0       	ldi	r18, 0x0A	; 10
     b38:	92 07       	cpc	r25, r18
     b3a:	39 f4       	brne	.+14     	; 0xb4a <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
     b3c:	e0 e8       	ldi	r30, 0x80	; 128
     b3e:	f6 e0       	ldi	r31, 0x06	; 6
     b40:	80 e8       	ldi	r24, 0x80	; 128
     b42:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	82 83       	std	Z+2, r24	; 0x02
     return;
     b48:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
     b4a:	80 3a       	cpi	r24, 0xA0	; 160
     b4c:	9b 40       	sbci	r25, 0x0B	; 11
     b4e:	31 f4       	brne	.+12     	; 0xb5c <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
     b50:	e0 ea       	ldi	r30, 0xA0	; 160
     b52:	f6 e0       	ldi	r31, 0x06	; 6
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
     b58:	84 e0       	ldi	r24, 0x04	; 4
     b5a:	82 83       	std	Z+2, r24	; 0x02
     b5c:	08 95       	ret

00000b5e <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     b5e:	4f 92       	push	r4
     b60:	5f 92       	push	r5
     b62:	6f 92       	push	r6
     b64:	7f 92       	push	r7
     b66:	8f 92       	push	r8
     b68:	9f 92       	push	r9
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	49 01       	movw	r8, r18
     b80:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     b82:	2e 2d       	mov	r18, r14
     b84:	21 70       	andi	r18, 0x01	; 1
     b86:	c0 e1       	ldi	r28, 0x10	; 16
     b88:	d0 e0       	ldi	r29, 0x00	; 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <calc_bsel+0x32>
     b8c:	d5 95       	asr	r29
     b8e:	c7 95       	ror	r28
     b90:	2a 95       	dec	r18
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <calc_bsel+0x2e>
  if ( scale < 0 ) {
     b94:	00 23       	and	r16, r16
     b96:	0c f0       	brlt	.+2      	; 0xb9a <calc_bsel+0x3c>
     b98:	42 c0       	rjmp	.+132    	; 0xc1e <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     b9a:	0e 94 97 08 	call	0x112e	; 0x112e <__floatunsisf>
     b9e:	6b 01       	movw	r12, r22
     ba0:	7c 01       	movw	r14, r24
     ba2:	dd 27       	eor	r29, r29
     ba4:	be 01       	movw	r22, r28
     ba6:	dd 0f       	add	r29, r29
     ba8:	88 0b       	sbc	r24, r24
     baa:	99 0b       	sbc	r25, r25
     bac:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatsisf>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	c5 01       	movw	r24, r10
     bb6:	b4 01       	movw	r22, r8
     bb8:	0e 94 97 08 	call	0x112e	; 0x112e <__floatunsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	c3 01       	movw	r24, r6
     bc2:	b2 01       	movw	r22, r4
     bc4:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	0e 94 f6 07 	call	0xfec	; 0xfec <__divsf3>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e8       	ldi	r20, 0x80	; 128
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     be0:	6b 01       	movw	r12, r22
     be2:	7c 01       	movw	r14, r24
     be4:	11 27       	eor	r17, r17
     be6:	01 95       	neg	r16
     be8:	0c f4       	brge	.+2      	; 0xbec <calc_bsel+0x8e>
     bea:	10 95       	com	r17
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <calc_bsel+0x98>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	0a 95       	dec	r16
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <calc_bsel+0x94>
     bfa:	07 2e       	mov	r0, r23
     bfc:	00 0c       	add	r0, r0
     bfe:	88 0b       	sbc	r24, r24
     c00:	99 0b       	sbc	r25, r25
     c02:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatsisf>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	c7 01       	movw	r24, r14
     c0c:	b6 01       	movw	r22, r12
     c0e:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     c12:	0e 94 92 09 	call	0x1324	; 0x1324 <round>
     c16:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fixunssfsi>
     c1a:	cb 01       	movw	r24, r22
     c1c:	3e c0       	rjmp	.+124    	; 0xc9a <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     c1e:	0e 94 97 08 	call	0x112e	; 0x112e <__floatunsisf>
     c22:	6b 01       	movw	r12, r22
     c24:	7c 01       	movw	r14, r24
     c26:	be 01       	movw	r22, r28
     c28:	77 27       	eor	r23, r23
     c2a:	07 2e       	mov	r0, r23
     c2c:	00 0c       	add	r0, r0
     c2e:	88 0b       	sbc	r24, r24
     c30:	99 0b       	sbc	r25, r25
     c32:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatsisf>
     c36:	2b 01       	movw	r4, r22
     c38:	3c 01       	movw	r6, r24
     c3a:	c5 01       	movw	r24, r10
     c3c:	b4 01       	movw	r22, r8
     c3e:	0e 94 97 08 	call	0x112e	; 0x112e <__floatunsisf>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c3 01       	movw	r24, r6
     c48:	b2 01       	movw	r22, r4
     c4a:	0e 94 25 09 	call	0x124a	; 0x124a <__mulsf3>
     c4e:	9b 01       	movw	r18, r22
     c50:	ac 01       	movw	r20, r24
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
     c56:	0e 94 f6 07 	call	0xfec	; 0xfec <__divsf3>
     c5a:	6b 01       	movw	r12, r22
     c5c:	7c 01       	movw	r14, r24
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <calc_bsel+0x10a>
     c64:	66 0f       	add	r22, r22
     c66:	77 1f       	adc	r23, r23
     c68:	0a 95       	dec	r16
     c6a:	e2 f7       	brpl	.-8      	; 0xc64 <calc_bsel+0x106>
     c6c:	07 2e       	mov	r0, r23
     c6e:	00 0c       	add	r0, r0
     c70:	88 0b       	sbc	r24, r24
     c72:	99 0b       	sbc	r25, r25
     c74:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatsisf>
     c78:	9b 01       	movw	r18, r22
     c7a:	ac 01       	movw	r20, r24
     c7c:	c7 01       	movw	r24, r14
     c7e:	b6 01       	movw	r22, r12
     c80:	0e 94 f6 07 	call	0xfec	; 0xfec <__divsf3>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e8       	ldi	r20, 0x80	; 128
     c8a:	5f e3       	ldi	r21, 0x3F	; 63
     c8c:	0e 94 89 07 	call	0xf12	; 0xf12 <__subsf3>
     c90:	0e 94 92 09 	call	0x1324	; 0x1324 <round>
     c94:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__fixunssfsi>
     c98:	cb 01       	movw	r24, r22
  }
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	af 90       	pop	r10
     cae:	9f 90       	pop	r9
     cb0:	8f 90       	pop	r8
     cb2:	7f 90       	pop	r7
     cb4:	6f 90       	pop	r6
     cb6:	5f 90       	pop	r5
     cb8:	4f 90       	pop	r4
     cba:	08 95       	ret

00000cbc <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     cbc:	4f 92       	push	r4
     cbe:	5f 92       	push	r5
     cc0:	6f 92       	push	r6
     cc2:	7f 92       	push	r7
     cc4:	8f 92       	push	r8
     cc6:	9f 92       	push	r9
     cc8:	af 92       	push	r10
     cca:	bf 92       	push	r11
     ccc:	ef 92       	push	r14
     cce:	0f 93       	push	r16
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	2b 01       	movw	r4, r22
     cd6:	3c 01       	movw	r6, r24
     cd8:	49 01       	movw	r8, r18
     cda:	5a 01       	movw	r10, r20
     cdc:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     cde:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     ce0:	ed 2e       	mov	r14, r29
     ce2:	0c 2f       	mov	r16, r28
     ce4:	a5 01       	movw	r20, r10
     ce6:	94 01       	movw	r18, r8
     ce8:	c3 01       	movw	r24, r6
     cea:	b2 01       	movw	r22, r4
     cec:	0e 94 af 05 	call	0xb5e	; 0xb5e <calc_bsel>
     cf0:	81 15       	cp	r24, r1
     cf2:	90 41       	sbci	r25, 0x10	; 16
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <calc_bscale+0x40>
     cf6:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     cf8:	c8 30       	cpi	r28, 0x08	; 8
     cfa:	91 f7       	brne	.-28     	; 0xce0 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     cfc:	8c 2f       	mov	r24, r28
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	0f 91       	pop	r16
     d04:	ef 90       	pop	r14
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	9f 90       	pop	r9
     d0c:	8f 90       	pop	r8
     d0e:	7f 90       	pop	r7
     d10:	6f 90       	pop	r6
     d12:	5f 90       	pop	r5
     d14:	4f 90       	pop	r4
     d16:	08 95       	ret

00000d18 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     d18:	2f 92       	push	r2
     d1a:	3f 92       	push	r3
     d1c:	4f 92       	push	r4
     d1e:	5f 92       	push	r5
     d20:	6f 92       	push	r6
     d22:	7f 92       	push	r7
     d24:	8f 92       	push	r8
     d26:	9f 92       	push	r9
     d28:	af 92       	push	r10
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	ef 92       	push	r14
     d30:	ff 92       	push	r15
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	ec 01       	movw	r28, r24
     d3c:	1b 01       	movw	r2, r22
     d3e:	29 01       	movw	r4, r18
     d40:	3a 01       	movw	r6, r20
     d42:	47 01       	movw	r8, r14
     d44:	58 01       	movw	r10, r16
     d46:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     d48:	0c 2d       	mov	r16, r12
     d4a:	a5 01       	movw	r20, r10
     d4c:	94 01       	movw	r18, r8
     d4e:	c3 01       	movw	r24, r6
     d50:	b2 01       	movw	r22, r4
     d52:	0e 94 5e 06 	call	0xcbc	; 0xcbc <calc_bscale>
     d56:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     d58:	08 2f       	mov	r16, r24
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	c3 01       	movw	r24, r6
     d60:	b2 01       	movw	r22, r4
     d62:	0e 94 af 05 	call	0xb5e	; 0xb5e <calc_bsel>
     d66:	f8 2e       	mov	r15, r24
     d68:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     d6a:	41 e0       	ldi	r20, 0x01	; 1
     d6c:	b1 01       	movw	r22, r2
     d6e:	ce 01       	movw	r24, r28
     d70:	0e 94 ed 06 	call	0xdda	; 0xdda <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     d74:	e8 81       	ld	r30, Y
     d76:	f9 81       	ldd	r31, Y+1	; 0x01
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     d7c:	e8 81       	ld	r30, Y
     d7e:	f9 81       	ldd	r31, Y+1	; 0x01
     d80:	84 81       	ldd	r24, Z+4	; 0x04
     d82:	80 61       	ori	r24, 0x10	; 16
     d84:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     d86:	e8 81       	ld	r30, Y
     d88:	f9 81       	ldd	r31, Y+1	; 0x01
     d8a:	84 81       	ldd	r24, Z+4	; 0x04
     d8c:	88 60       	ori	r24, 0x08	; 8
     d8e:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     d90:	e8 81       	ld	r30, Y
     d92:	f9 81       	ldd	r31, Y+1	; 0x01
     d94:	83 81       	ldd	r24, Z+3	; 0x03
     d96:	8f 7c       	andi	r24, 0xCF	; 207
     d98:	80 61       	ori	r24, 0x10	; 16
     d9a:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     d9c:	e8 81       	ld	r30, Y
     d9e:	f9 81       	ldd	r31, Y+1	; 0x01
     da0:	f6 82       	std	Z+6, r15	; 0x06
     da2:	e8 81       	ld	r30, Y
     da4:	f9 81       	ldd	r31, Y+1	; 0x01
     da6:	12 95       	swap	r17
     da8:	10 7f       	andi	r17, 0xF0	; 240
     daa:	10 2b       	or	r17, r16
     dac:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
     dae:	88 81       	ld	r24, Y
     db0:	99 81       	ldd	r25, Y+1	; 0x01
     db2:	0e 94 63 05 	call	0xac6	; 0xac6 <set_usart_txrx_direction>
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	5f 90       	pop	r5
     dd2:	4f 90       	pop	r4
     dd4:	3f 90       	pop	r3
     dd6:	2f 90       	pop	r2
     dd8:	08 95       	ret

00000dda <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     dda:	fc 01       	movw	r30, r24
     ddc:	60 83       	st	Z, r22
     dde:	71 83       	std	Z+1, r23	; 0x01
     de0:	42 83       	std	Z+2, r20	; 0x02
     de2:	ec 5f       	subi	r30, 0xFC	; 252
     de4:	fd 4f       	sbci	r31, 0xFD	; 253
     de6:	10 82       	st	Z, r1
     de8:	31 97       	sbiw	r30, 0x01	; 1
     dea:	10 82       	st	Z, r1
     dec:	33 96       	adiw	r30, 0x03	; 3
     dee:	10 82       	st	Z, r1
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	10 82       	st	Z, r1
     df4:	08 95       	ret

00000df6 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     df6:	fc 01       	movw	r30, r24
     df8:	eb 5f       	subi	r30, 0xFB	; 251
     dfa:	fd 4f       	sbci	r31, 0xFD	; 253
     dfc:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	92 0f       	add	r25, r18
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	93 13       	cpse	r25, r19
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <USART_TXBuffer_FreeSpace+0x18>
     e0c:	80 e0       	ldi	r24, 0x00	; 0
}
     e0e:	08 95       	ret

00000e10 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     e16:	dc 01       	movw	r26, r24
     e18:	ab 5f       	subi	r26, 0xFB	; 251
     e1a:	bd 4f       	sbci	r27, 0xFD	; 253
     e1c:	9c 91       	ld	r25, X
     e1e:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	92 13       	cpse	r25, r18
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <USART_TXBuffer_PutByte+0x1c>
     e2a:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     e2c:	92 17       	cp	r25, r18
     e2e:	b1 f0       	breq	.+44     	; 0xe5c <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     e30:	ef 01       	movw	r28, r30
     e32:	cb 5f       	subi	r28, 0xFB	; 251
     e34:	dd 4f       	sbci	r29, 0xFD	; 253
     e36:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
     e38:	df 01       	movw	r26, r30
     e3a:	a9 0f       	add	r26, r25
     e3c:	b1 1d       	adc	r27, r1
     e3e:	ad 5f       	subi	r26, 0xFD	; 253
     e40:	be 4f       	sbci	r27, 0xFE	; 254
     e42:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     e44:	9f 5f       	subi	r25, 0xFF	; 255
     e46:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     e48:	a0 81       	ld	r26, Z
     e4a:	b1 81       	ldd	r27, Z+1	; 0x01
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	9c 91       	ld	r25, X
     e50:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     e52:	9c 7f       	andi	r25, 0xFC	; 252
     e54:	22 81       	ldd	r18, Z+2	; 0x02
     e56:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     e58:	13 96       	adiw	r26, 0x03	; 3
     e5a:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     e62:	fc 01       	movw	r30, r24
     e64:	ed 5f       	subi	r30, 0xFD	; 253
     e66:	fd 4f       	sbci	r31, 0xFD	; 253
     e68:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     e6a:	31 96       	adiw	r30, 0x01	; 1
     e6c:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	29 13       	cpse	r18, r25
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <USART_RXBufferData_Available+0x14>
     e74:	80 e0       	ldi	r24, 0x00	; 0
}
     e76:	08 95       	ret

00000e78 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     e78:	fc 01       	movw	r30, r24
     e7a:	ec 5f       	subi	r30, 0xFC	; 252
     e7c:	fd 4f       	sbci	r31, 0xFD	; 253
     e7e:	20 81       	ld	r18, Z
     e80:	dc 01       	movw	r26, r24
     e82:	a2 0f       	add	r26, r18
     e84:	b1 1d       	adc	r27, r1
     e86:	13 96       	adiw	r26, 0x03	; 3
     e88:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     e8a:	90 81       	ld	r25, Z
     e8c:	9f 5f       	subi	r25, 0xFF	; 255
     e8e:	90 83       	st	Z, r25

	return ans;
}
     e90:	08 95       	ret

00000e92 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     e92:	fc 01       	movw	r30, r24
     e94:	ed 5f       	subi	r30, 0xFD	; 253
     e96:	fd 4f       	sbci	r31, 0xFD	; 253
     e98:	20 81       	ld	r18, Z
     e9a:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     e9c:	31 96       	adiw	r30, 0x01	; 1
     e9e:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     ea0:	dc 01       	movw	r26, r24
     ea2:	ed 91       	ld	r30, X+
     ea4:	fc 91       	ld	r31, X
     ea6:	11 97       	sbiw	r26, 0x01	; 1
     ea8:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     eaa:	23 17       	cp	r18, r19
     eac:	59 f0       	breq	.+22     	; 0xec4 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     eae:	fc 01       	movw	r30, r24
     eb0:	ed 5f       	subi	r30, 0xFD	; 253
     eb2:	fd 4f       	sbci	r31, 0xFD	; 253
     eb4:	30 81       	ld	r19, Z
     eb6:	a3 0f       	add	r26, r19
     eb8:	b1 1d       	adc	r27, r1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     ebe:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     ec4:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     ec6:	08 95       	ret

00000ec8 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     ecc:	fc 01       	movw	r30, r24
     ece:	ea 5f       	subi	r30, 0xFA	; 250
     ed0:	fd 4f       	sbci	r31, 0xFD	; 253
     ed2:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	20 81       	ld	r18, Z
     ed8:	32 13       	cpse	r19, r18
     eda:	07 c0       	rjmp	.+14     	; 0xeea <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     edc:	dc 01       	movw	r26, r24
     ede:	ed 91       	ld	r30, X+
     ee0:	fc 91       	ld	r31, X
     ee2:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     ee4:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     ee6:	83 83       	std	Z+3, r24	; 0x03
     ee8:	11 c0       	rjmp	.+34     	; 0xf0c <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     eea:	fc 01       	movw	r30, r24
     eec:	ea 5f       	subi	r30, 0xFA	; 250
     eee:	fd 4f       	sbci	r31, 0xFD	; 253
     ef0:	20 81       	ld	r18, Z
     ef2:	dc 01       	movw	r26, r24
     ef4:	a2 0f       	add	r26, r18
     ef6:	b1 1d       	adc	r27, r1
     ef8:	ad 5f       	subi	r26, 0xFD	; 253
     efa:	be 4f       	sbci	r27, 0xFE	; 254
     efc:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     efe:	ec 01       	movw	r28, r24
     f00:	a8 81       	ld	r26, Y
     f02:	b9 81       	ldd	r27, Y+1	; 0x01
     f04:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     f06:	80 81       	ld	r24, Z
     f08:	8f 5f       	subi	r24, 0xFF	; 255
     f0a:	80 83       	st	Z, r24
	}
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <__subsf3>:
     f12:	50 58       	subi	r21, 0x80	; 128

00000f14 <__addsf3>:
     f14:	bb 27       	eor	r27, r27
     f16:	aa 27       	eor	r26, r26
     f18:	0e 94 a1 07 	call	0xf42	; 0xf42 <__addsf3x>
     f1c:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_round>
     f20:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscA>
     f24:	38 f0       	brcs	.+14     	; 0xf34 <__addsf3+0x20>
     f26:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_pscB>
     f2a:	20 f0       	brcs	.+8      	; 0xf34 <__addsf3+0x20>
     f2c:	39 f4       	brne	.+14     	; 0xf3c <__addsf3+0x28>
     f2e:	9f 3f       	cpi	r25, 0xFF	; 255
     f30:	19 f4       	brne	.+6      	; 0xf38 <__addsf3+0x24>
     f32:	26 f4       	brtc	.+8      	; 0xf3c <__addsf3+0x28>
     f34:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_nan>
     f38:	0e f4       	brtc	.+2      	; 0xf3c <__addsf3+0x28>
     f3a:	e0 95       	com	r30
     f3c:	e7 fb       	bst	r30, 7
     f3e:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_inf>

00000f42 <__addsf3x>:
     f42:	e9 2f       	mov	r30, r25
     f44:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fp_split3>
     f48:	58 f3       	brcs	.-42     	; 0xf20 <__addsf3+0xc>
     f4a:	ba 17       	cp	r27, r26
     f4c:	62 07       	cpc	r22, r18
     f4e:	73 07       	cpc	r23, r19
     f50:	84 07       	cpc	r24, r20
     f52:	95 07       	cpc	r25, r21
     f54:	20 f0       	brcs	.+8      	; 0xf5e <__addsf3x+0x1c>
     f56:	79 f4       	brne	.+30     	; 0xf76 <__addsf3x+0x34>
     f58:	a6 f5       	brtc	.+104    	; 0xfc2 <__addsf3x+0x80>
     f5a:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_zero>
     f5e:	0e f4       	brtc	.+2      	; 0xf62 <__addsf3x+0x20>
     f60:	e0 95       	com	r30
     f62:	0b 2e       	mov	r0, r27
     f64:	ba 2f       	mov	r27, r26
     f66:	a0 2d       	mov	r26, r0
     f68:	0b 01       	movw	r0, r22
     f6a:	b9 01       	movw	r22, r18
     f6c:	90 01       	movw	r18, r0
     f6e:	0c 01       	movw	r0, r24
     f70:	ca 01       	movw	r24, r20
     f72:	a0 01       	movw	r20, r0
     f74:	11 24       	eor	r1, r1
     f76:	ff 27       	eor	r31, r31
     f78:	59 1b       	sub	r21, r25
     f7a:	99 f0       	breq	.+38     	; 0xfa2 <__addsf3x+0x60>
     f7c:	59 3f       	cpi	r21, 0xF9	; 249
     f7e:	50 f4       	brcc	.+20     	; 0xf94 <__addsf3x+0x52>
     f80:	50 3e       	cpi	r21, 0xE0	; 224
     f82:	68 f1       	brcs	.+90     	; 0xfde <__addsf3x+0x9c>
     f84:	1a 16       	cp	r1, r26
     f86:	f0 40       	sbci	r31, 0x00	; 0
     f88:	a2 2f       	mov	r26, r18
     f8a:	23 2f       	mov	r18, r19
     f8c:	34 2f       	mov	r19, r20
     f8e:	44 27       	eor	r20, r20
     f90:	58 5f       	subi	r21, 0xF8	; 248
     f92:	f3 cf       	rjmp	.-26     	; 0xf7a <__addsf3x+0x38>
     f94:	46 95       	lsr	r20
     f96:	37 95       	ror	r19
     f98:	27 95       	ror	r18
     f9a:	a7 95       	ror	r26
     f9c:	f0 40       	sbci	r31, 0x00	; 0
     f9e:	53 95       	inc	r21
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__addsf3x+0x52>
     fa2:	7e f4       	brtc	.+30     	; 0xfc2 <__addsf3x+0x80>
     fa4:	1f 16       	cp	r1, r31
     fa6:	ba 0b       	sbc	r27, r26
     fa8:	62 0b       	sbc	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	ba f0       	brmi	.+46     	; 0xfde <__addsf3x+0x9c>
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	a1 f0       	breq	.+40     	; 0xfdc <__addsf3x+0x9a>
     fb4:	ff 0f       	add	r31, r31
     fb6:	bb 1f       	adc	r27, r27
     fb8:	66 1f       	adc	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	c2 f7       	brpl	.-16     	; 0xfb0 <__addsf3x+0x6e>
     fc0:	0e c0       	rjmp	.+28     	; 0xfde <__addsf3x+0x9c>
     fc2:	ba 0f       	add	r27, r26
     fc4:	62 1f       	adc	r22, r18
     fc6:	73 1f       	adc	r23, r19
     fc8:	84 1f       	adc	r24, r20
     fca:	48 f4       	brcc	.+18     	; 0xfde <__addsf3x+0x9c>
     fcc:	87 95       	ror	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	b7 95       	ror	r27
     fd4:	f7 95       	ror	r31
     fd6:	9e 3f       	cpi	r25, 0xFE	; 254
     fd8:	08 f0       	brcs	.+2      	; 0xfdc <__addsf3x+0x9a>
     fda:	b0 cf       	rjmp	.-160    	; 0xf3c <__addsf3+0x28>
     fdc:	93 95       	inc	r25
     fde:	88 0f       	add	r24, r24
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <__addsf3x+0xa2>
     fe2:	99 27       	eor	r25, r25
     fe4:	ee 0f       	add	r30, r30
     fe6:	97 95       	ror	r25
     fe8:	87 95       	ror	r24
     fea:	08 95       	ret

00000fec <__divsf3>:
     fec:	0e 94 0a 08 	call	0x1014	; 0x1014 <__divsf3x>
     ff0:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_round>
     ff4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_pscB>
     ff8:	58 f0       	brcs	.+22     	; 0x1010 <__divsf3+0x24>
     ffa:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscA>
     ffe:	40 f0       	brcs	.+16     	; 0x1010 <__divsf3+0x24>
    1000:	29 f4       	brne	.+10     	; 0x100c <__divsf3+0x20>
    1002:	5f 3f       	cpi	r21, 0xFF	; 255
    1004:	29 f0       	breq	.+10     	; 0x1010 <__divsf3+0x24>
    1006:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_inf>
    100a:	51 11       	cpse	r21, r1
    100c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_szero>
    1010:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_nan>

00001014 <__divsf3x>:
    1014:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fp_split3>
    1018:	68 f3       	brcs	.-38     	; 0xff4 <__divsf3+0x8>

0000101a <__divsf3_pse>:
    101a:	99 23       	and	r25, r25
    101c:	b1 f3       	breq	.-20     	; 0x100a <__divsf3+0x1e>
    101e:	55 23       	and	r21, r21
    1020:	91 f3       	breq	.-28     	; 0x1006 <__divsf3+0x1a>
    1022:	95 1b       	sub	r25, r21
    1024:	55 0b       	sbc	r21, r21
    1026:	bb 27       	eor	r27, r27
    1028:	aa 27       	eor	r26, r26
    102a:	62 17       	cp	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	38 f0       	brcs	.+14     	; 0x1040 <__divsf3_pse+0x26>
    1032:	9f 5f       	subi	r25, 0xFF	; 255
    1034:	5f 4f       	sbci	r21, 0xFF	; 255
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	44 1f       	adc	r20, r20
    103c:	aa 1f       	adc	r26, r26
    103e:	a9 f3       	breq	.-22     	; 0x102a <__divsf3_pse+0x10>
    1040:	35 d0       	rcall	.+106    	; 0x10ac <__divsf3_pse+0x92>
    1042:	0e 2e       	mov	r0, r30
    1044:	3a f0       	brmi	.+14     	; 0x1054 <__divsf3_pse+0x3a>
    1046:	e0 e8       	ldi	r30, 0x80	; 128
    1048:	32 d0       	rcall	.+100    	; 0x10ae <__divsf3_pse+0x94>
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	e6 95       	lsr	r30
    1050:	00 1c       	adc	r0, r0
    1052:	ca f7       	brpl	.-14     	; 0x1046 <__divsf3_pse+0x2c>
    1054:	2b d0       	rcall	.+86     	; 0x10ac <__divsf3_pse+0x92>
    1056:	fe 2f       	mov	r31, r30
    1058:	29 d0       	rcall	.+82     	; 0x10ac <__divsf3_pse+0x92>
    105a:	66 0f       	add	r22, r22
    105c:	77 1f       	adc	r23, r23
    105e:	88 1f       	adc	r24, r24
    1060:	bb 1f       	adc	r27, r27
    1062:	26 17       	cp	r18, r22
    1064:	37 07       	cpc	r19, r23
    1066:	48 07       	cpc	r20, r24
    1068:	ab 07       	cpc	r26, r27
    106a:	b0 e8       	ldi	r27, 0x80	; 128
    106c:	09 f0       	breq	.+2      	; 0x1070 <__divsf3_pse+0x56>
    106e:	bb 0b       	sbc	r27, r27
    1070:	80 2d       	mov	r24, r0
    1072:	bf 01       	movw	r22, r30
    1074:	ff 27       	eor	r31, r31
    1076:	93 58       	subi	r25, 0x83	; 131
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	3a f0       	brmi	.+14     	; 0x108a <__divsf3_pse+0x70>
    107c:	9e 3f       	cpi	r25, 0xFE	; 254
    107e:	51 05       	cpc	r21, r1
    1080:	78 f0       	brcs	.+30     	; 0x10a0 <__divsf3_pse+0x86>
    1082:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_inf>
    1086:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_szero>
    108a:	5f 3f       	cpi	r21, 0xFF	; 255
    108c:	e4 f3       	brlt	.-8      	; 0x1086 <__divsf3_pse+0x6c>
    108e:	98 3e       	cpi	r25, 0xE8	; 232
    1090:	d4 f3       	brlt	.-12     	; 0x1086 <__divsf3_pse+0x6c>
    1092:	86 95       	lsr	r24
    1094:	77 95       	ror	r23
    1096:	67 95       	ror	r22
    1098:	b7 95       	ror	r27
    109a:	f7 95       	ror	r31
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	c9 f7       	brne	.-14     	; 0x1092 <__divsf3_pse+0x78>
    10a0:	88 0f       	add	r24, r24
    10a2:	91 1d       	adc	r25, r1
    10a4:	96 95       	lsr	r25
    10a6:	87 95       	ror	r24
    10a8:	97 f9       	bld	r25, 7
    10aa:	08 95       	ret
    10ac:	e1 e0       	ldi	r30, 0x01	; 1
    10ae:	66 0f       	add	r22, r22
    10b0:	77 1f       	adc	r23, r23
    10b2:	88 1f       	adc	r24, r24
    10b4:	bb 1f       	adc	r27, r27
    10b6:	62 17       	cp	r22, r18
    10b8:	73 07       	cpc	r23, r19
    10ba:	84 07       	cpc	r24, r20
    10bc:	ba 07       	cpc	r27, r26
    10be:	20 f0       	brcs	.+8      	; 0x10c8 <__divsf3_pse+0xae>
    10c0:	62 1b       	sub	r22, r18
    10c2:	73 0b       	sbc	r23, r19
    10c4:	84 0b       	sbc	r24, r20
    10c6:	ba 0b       	sbc	r27, r26
    10c8:	ee 1f       	adc	r30, r30
    10ca:	88 f7       	brcc	.-30     	; 0x10ae <__divsf3_pse+0x94>
    10cc:	e0 95       	com	r30
    10ce:	08 95       	ret

000010d0 <__fixunssfsi>:
    10d0:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_splitA>
    10d4:	88 f0       	brcs	.+34     	; 0x10f8 <__fixunssfsi+0x28>
    10d6:	9f 57       	subi	r25, 0x7F	; 127
    10d8:	98 f0       	brcs	.+38     	; 0x1100 <__fixunssfsi+0x30>
    10da:	b9 2f       	mov	r27, r25
    10dc:	99 27       	eor	r25, r25
    10de:	b7 51       	subi	r27, 0x17	; 23
    10e0:	b0 f0       	brcs	.+44     	; 0x110e <__fixunssfsi+0x3e>
    10e2:	e1 f0       	breq	.+56     	; 0x111c <__fixunssfsi+0x4c>
    10e4:	66 0f       	add	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	1a f0       	brmi	.+6      	; 0x10f4 <__fixunssfsi+0x24>
    10ee:	ba 95       	dec	r27
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__fixunssfsi+0x14>
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <__fixunssfsi+0x4c>
    10f4:	b1 30       	cpi	r27, 0x01	; 1
    10f6:	91 f0       	breq	.+36     	; 0x111c <__fixunssfsi+0x4c>
    10f8:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_zero>
    10fc:	b1 e0       	ldi	r27, 0x01	; 1
    10fe:	08 95       	ret
    1100:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__fp_zero>
    1104:	67 2f       	mov	r22, r23
    1106:	78 2f       	mov	r23, r24
    1108:	88 27       	eor	r24, r24
    110a:	b8 5f       	subi	r27, 0xF8	; 248
    110c:	39 f0       	breq	.+14     	; 0x111c <__fixunssfsi+0x4c>
    110e:	b9 3f       	cpi	r27, 0xF9	; 249
    1110:	cc f3       	brlt	.-14     	; 0x1104 <__fixunssfsi+0x34>
    1112:	86 95       	lsr	r24
    1114:	77 95       	ror	r23
    1116:	67 95       	ror	r22
    1118:	b3 95       	inc	r27
    111a:	d9 f7       	brne	.-10     	; 0x1112 <__fixunssfsi+0x42>
    111c:	3e f4       	brtc	.+14     	; 0x112c <__fixunssfsi+0x5c>
    111e:	90 95       	com	r25
    1120:	80 95       	com	r24
    1122:	70 95       	com	r23
    1124:	61 95       	neg	r22
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8f 4f       	sbci	r24, 0xFF	; 255
    112a:	9f 4f       	sbci	r25, 0xFF	; 255
    112c:	08 95       	ret

0000112e <__floatunsisf>:
    112e:	e8 94       	clt
    1130:	09 c0       	rjmp	.+18     	; 0x1144 <__floatsisf+0x12>

00001132 <__floatsisf>:
    1132:	97 fb       	bst	r25, 7
    1134:	3e f4       	brtc	.+14     	; 0x1144 <__floatsisf+0x12>
    1136:	90 95       	com	r25
    1138:	80 95       	com	r24
    113a:	70 95       	com	r23
    113c:	61 95       	neg	r22
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	8f 4f       	sbci	r24, 0xFF	; 255
    1142:	9f 4f       	sbci	r25, 0xFF	; 255
    1144:	99 23       	and	r25, r25
    1146:	a9 f0       	breq	.+42     	; 0x1172 <__floatsisf+0x40>
    1148:	f9 2f       	mov	r31, r25
    114a:	96 e9       	ldi	r25, 0x96	; 150
    114c:	bb 27       	eor	r27, r27
    114e:	93 95       	inc	r25
    1150:	f6 95       	lsr	r31
    1152:	87 95       	ror	r24
    1154:	77 95       	ror	r23
    1156:	67 95       	ror	r22
    1158:	b7 95       	ror	r27
    115a:	f1 11       	cpse	r31, r1
    115c:	f8 cf       	rjmp	.-16     	; 0x114e <__floatsisf+0x1c>
    115e:	fa f4       	brpl	.+62     	; 0x119e <__floatsisf+0x6c>
    1160:	bb 0f       	add	r27, r27
    1162:	11 f4       	brne	.+4      	; 0x1168 <__floatsisf+0x36>
    1164:	60 ff       	sbrs	r22, 0
    1166:	1b c0       	rjmp	.+54     	; 0x119e <__floatsisf+0x6c>
    1168:	6f 5f       	subi	r22, 0xFF	; 255
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	16 c0       	rjmp	.+44     	; 0x119e <__floatsisf+0x6c>
    1172:	88 23       	and	r24, r24
    1174:	11 f0       	breq	.+4      	; 0x117a <__floatsisf+0x48>
    1176:	96 e9       	ldi	r25, 0x96	; 150
    1178:	11 c0       	rjmp	.+34     	; 0x119c <__floatsisf+0x6a>
    117a:	77 23       	and	r23, r23
    117c:	21 f0       	breq	.+8      	; 0x1186 <__floatsisf+0x54>
    117e:	9e e8       	ldi	r25, 0x8E	; 142
    1180:	87 2f       	mov	r24, r23
    1182:	76 2f       	mov	r23, r22
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <__floatsisf+0x5e>
    1186:	66 23       	and	r22, r22
    1188:	71 f0       	breq	.+28     	; 0x11a6 <__floatsisf+0x74>
    118a:	96 e8       	ldi	r25, 0x86	; 134
    118c:	86 2f       	mov	r24, r22
    118e:	70 e0       	ldi	r23, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	2a f0       	brmi	.+10     	; 0x119e <__floatsisf+0x6c>
    1194:	9a 95       	dec	r25
    1196:	66 0f       	add	r22, r22
    1198:	77 1f       	adc	r23, r23
    119a:	88 1f       	adc	r24, r24
    119c:	da f7       	brpl	.-10     	; 0x1194 <__floatsisf+0x62>
    119e:	88 0f       	add	r24, r24
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret

000011a8 <__fp_inf>:
    11a8:	97 f9       	bld	r25, 7
    11aa:	9f 67       	ori	r25, 0x7F	; 127
    11ac:	80 e8       	ldi	r24, 0x80	; 128
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	08 95       	ret

000011b4 <__fp_nan>:
    11b4:	9f ef       	ldi	r25, 0xFF	; 255
    11b6:	80 ec       	ldi	r24, 0xC0	; 192
    11b8:	08 95       	ret

000011ba <__fp_pscA>:
    11ba:	00 24       	eor	r0, r0
    11bc:	0a 94       	dec	r0
    11be:	16 16       	cp	r1, r22
    11c0:	17 06       	cpc	r1, r23
    11c2:	18 06       	cpc	r1, r24
    11c4:	09 06       	cpc	r0, r25
    11c6:	08 95       	ret

000011c8 <__fp_pscB>:
    11c8:	00 24       	eor	r0, r0
    11ca:	0a 94       	dec	r0
    11cc:	12 16       	cp	r1, r18
    11ce:	13 06       	cpc	r1, r19
    11d0:	14 06       	cpc	r1, r20
    11d2:	05 06       	cpc	r0, r21
    11d4:	08 95       	ret

000011d6 <__fp_round>:
    11d6:	09 2e       	mov	r0, r25
    11d8:	03 94       	inc	r0
    11da:	00 0c       	add	r0, r0
    11dc:	11 f4       	brne	.+4      	; 0x11e2 <__fp_round+0xc>
    11de:	88 23       	and	r24, r24
    11e0:	52 f0       	brmi	.+20     	; 0x11f6 <__fp_round+0x20>
    11e2:	bb 0f       	add	r27, r27
    11e4:	40 f4       	brcc	.+16     	; 0x11f6 <__fp_round+0x20>
    11e6:	bf 2b       	or	r27, r31
    11e8:	11 f4       	brne	.+4      	; 0x11ee <__fp_round+0x18>
    11ea:	60 ff       	sbrs	r22, 0
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <__fp_round+0x20>
    11ee:	6f 5f       	subi	r22, 0xFF	; 255
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255
    11f2:	8f 4f       	sbci	r24, 0xFF	; 255
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__fp_split3>:
    11f8:	57 fd       	sbrc	r21, 7
    11fa:	90 58       	subi	r25, 0x80	; 128
    11fc:	44 0f       	add	r20, r20
    11fe:	55 1f       	adc	r21, r21
    1200:	59 f0       	breq	.+22     	; 0x1218 <__fp_splitA+0x10>
    1202:	5f 3f       	cpi	r21, 0xFF	; 255
    1204:	71 f0       	breq	.+28     	; 0x1222 <__fp_splitA+0x1a>
    1206:	47 95       	ror	r20

00001208 <__fp_splitA>:
    1208:	88 0f       	add	r24, r24
    120a:	97 fb       	bst	r25, 7
    120c:	99 1f       	adc	r25, r25
    120e:	61 f0       	breq	.+24     	; 0x1228 <__fp_splitA+0x20>
    1210:	9f 3f       	cpi	r25, 0xFF	; 255
    1212:	79 f0       	breq	.+30     	; 0x1232 <__fp_splitA+0x2a>
    1214:	87 95       	ror	r24
    1216:	08 95       	ret
    1218:	12 16       	cp	r1, r18
    121a:	13 06       	cpc	r1, r19
    121c:	14 06       	cpc	r1, r20
    121e:	55 1f       	adc	r21, r21
    1220:	f2 cf       	rjmp	.-28     	; 0x1206 <__fp_split3+0xe>
    1222:	46 95       	lsr	r20
    1224:	f1 df       	rcall	.-30     	; 0x1208 <__fp_splitA>
    1226:	08 c0       	rjmp	.+16     	; 0x1238 <__fp_splitA+0x30>
    1228:	16 16       	cp	r1, r22
    122a:	17 06       	cpc	r1, r23
    122c:	18 06       	cpc	r1, r24
    122e:	99 1f       	adc	r25, r25
    1230:	f1 cf       	rjmp	.-30     	; 0x1214 <__fp_splitA+0xc>
    1232:	86 95       	lsr	r24
    1234:	71 05       	cpc	r23, r1
    1236:	61 05       	cpc	r22, r1
    1238:	08 94       	sec
    123a:	08 95       	ret

0000123c <__fp_zero>:
    123c:	e8 94       	clt

0000123e <__fp_szero>:
    123e:	bb 27       	eor	r27, r27
    1240:	66 27       	eor	r22, r22
    1242:	77 27       	eor	r23, r23
    1244:	cb 01       	movw	r24, r22
    1246:	97 f9       	bld	r25, 7
    1248:	08 95       	ret

0000124a <__mulsf3>:
    124a:	0e 94 38 09 	call	0x1270	; 0x1270 <__mulsf3x>
    124e:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__fp_round>
    1252:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscA>
    1256:	38 f0       	brcs	.+14     	; 0x1266 <__mulsf3+0x1c>
    1258:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fp_pscB>
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__mulsf3+0x1c>
    125e:	95 23       	and	r25, r21
    1260:	11 f0       	breq	.+4      	; 0x1266 <__mulsf3+0x1c>
    1262:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_inf>
    1266:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__fp_nan>
    126a:	11 24       	eor	r1, r1
    126c:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_szero>

00001270 <__mulsf3x>:
    1270:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fp_split3>
    1274:	70 f3       	brcs	.-36     	; 0x1252 <__mulsf3+0x8>

00001276 <__mulsf3_pse>:
    1276:	95 9f       	mul	r25, r21
    1278:	c1 f3       	breq	.-16     	; 0x126a <__mulsf3+0x20>
    127a:	95 0f       	add	r25, r21
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	55 1f       	adc	r21, r21
    1280:	62 9f       	mul	r22, r18
    1282:	f0 01       	movw	r30, r0
    1284:	72 9f       	mul	r23, r18
    1286:	bb 27       	eor	r27, r27
    1288:	f0 0d       	add	r31, r0
    128a:	b1 1d       	adc	r27, r1
    128c:	63 9f       	mul	r22, r19
    128e:	aa 27       	eor	r26, r26
    1290:	f0 0d       	add	r31, r0
    1292:	b1 1d       	adc	r27, r1
    1294:	aa 1f       	adc	r26, r26
    1296:	64 9f       	mul	r22, r20
    1298:	66 27       	eor	r22, r22
    129a:	b0 0d       	add	r27, r0
    129c:	a1 1d       	adc	r26, r1
    129e:	66 1f       	adc	r22, r22
    12a0:	82 9f       	mul	r24, r18
    12a2:	22 27       	eor	r18, r18
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	62 1f       	adc	r22, r18
    12aa:	73 9f       	mul	r23, r19
    12ac:	b0 0d       	add	r27, r0
    12ae:	a1 1d       	adc	r26, r1
    12b0:	62 1f       	adc	r22, r18
    12b2:	83 9f       	mul	r24, r19
    12b4:	a0 0d       	add	r26, r0
    12b6:	61 1d       	adc	r22, r1
    12b8:	22 1f       	adc	r18, r18
    12ba:	74 9f       	mul	r23, r20
    12bc:	33 27       	eor	r19, r19
    12be:	a0 0d       	add	r26, r0
    12c0:	61 1d       	adc	r22, r1
    12c2:	23 1f       	adc	r18, r19
    12c4:	84 9f       	mul	r24, r20
    12c6:	60 0d       	add	r22, r0
    12c8:	21 1d       	adc	r18, r1
    12ca:	82 2f       	mov	r24, r18
    12cc:	76 2f       	mov	r23, r22
    12ce:	6a 2f       	mov	r22, r26
    12d0:	11 24       	eor	r1, r1
    12d2:	9f 57       	subi	r25, 0x7F	; 127
    12d4:	50 40       	sbci	r21, 0x00	; 0
    12d6:	9a f0       	brmi	.+38     	; 0x12fe <__mulsf3_pse+0x88>
    12d8:	f1 f0       	breq	.+60     	; 0x1316 <__mulsf3_pse+0xa0>
    12da:	88 23       	and	r24, r24
    12dc:	4a f0       	brmi	.+18     	; 0x12f0 <__mulsf3_pse+0x7a>
    12de:	ee 0f       	add	r30, r30
    12e0:	ff 1f       	adc	r31, r31
    12e2:	bb 1f       	adc	r27, r27
    12e4:	66 1f       	adc	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	88 1f       	adc	r24, r24
    12ea:	91 50       	subi	r25, 0x01	; 1
    12ec:	50 40       	sbci	r21, 0x00	; 0
    12ee:	a9 f7       	brne	.-22     	; 0x12da <__mulsf3_pse+0x64>
    12f0:	9e 3f       	cpi	r25, 0xFE	; 254
    12f2:	51 05       	cpc	r21, r1
    12f4:	80 f0       	brcs	.+32     	; 0x1316 <__mulsf3_pse+0xa0>
    12f6:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__fp_inf>
    12fa:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_szero>
    12fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1300:	e4 f3       	brlt	.-8      	; 0x12fa <__mulsf3_pse+0x84>
    1302:	98 3e       	cpi	r25, 0xE8	; 232
    1304:	d4 f3       	brlt	.-12     	; 0x12fa <__mulsf3_pse+0x84>
    1306:	86 95       	lsr	r24
    1308:	77 95       	ror	r23
    130a:	67 95       	ror	r22
    130c:	b7 95       	ror	r27
    130e:	f7 95       	ror	r31
    1310:	e7 95       	ror	r30
    1312:	9f 5f       	subi	r25, 0xFF	; 255
    1314:	c1 f7       	brne	.-16     	; 0x1306 <__mulsf3_pse+0x90>
    1316:	fe 2b       	or	r31, r30
    1318:	88 0f       	add	r24, r24
    131a:	91 1d       	adc	r25, r1
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret

00001324 <round>:
    1324:	0e 94 04 09 	call	0x1208	; 0x1208 <__fp_splitA>
    1328:	e8 f0       	brcs	.+58     	; 0x1364 <round+0x40>
    132a:	9e 37       	cpi	r25, 0x7E	; 126
    132c:	e8 f0       	brcs	.+58     	; 0x1368 <round+0x44>
    132e:	96 39       	cpi	r25, 0x96	; 150
    1330:	b8 f4       	brcc	.+46     	; 0x1360 <round+0x3c>
    1332:	9e 38       	cpi	r25, 0x8E	; 142
    1334:	48 f4       	brcc	.+18     	; 0x1348 <round+0x24>
    1336:	67 2f       	mov	r22, r23
    1338:	78 2f       	mov	r23, r24
    133a:	88 27       	eor	r24, r24
    133c:	98 5f       	subi	r25, 0xF8	; 248
    133e:	f9 cf       	rjmp	.-14     	; 0x1332 <round+0xe>
    1340:	86 95       	lsr	r24
    1342:	77 95       	ror	r23
    1344:	67 95       	ror	r22
    1346:	93 95       	inc	r25
    1348:	95 39       	cpi	r25, 0x95	; 149
    134a:	d0 f3       	brcs	.-12     	; 0x1340 <round+0x1c>
    134c:	b6 2f       	mov	r27, r22
    134e:	b1 70       	andi	r27, 0x01	; 1
    1350:	6b 0f       	add	r22, r27
    1352:	71 1d       	adc	r23, r1
    1354:	81 1d       	adc	r24, r1
    1356:	20 f4       	brcc	.+8      	; 0x1360 <round+0x3c>
    1358:	87 95       	ror	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	93 95       	inc	r25
    1360:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__fp_mintl>
    1364:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__fp_mpack>
    1368:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__fp_szero>

0000136c <__fp_mintl>:
    136c:	88 23       	and	r24, r24
    136e:	71 f4       	brne	.+28     	; 0x138c <__fp_mintl+0x20>
    1370:	77 23       	and	r23, r23
    1372:	21 f0       	breq	.+8      	; 0x137c <__fp_mintl+0x10>
    1374:	98 50       	subi	r25, 0x08	; 8
    1376:	87 2b       	or	r24, r23
    1378:	76 2f       	mov	r23, r22
    137a:	07 c0       	rjmp	.+14     	; 0x138a <__fp_mintl+0x1e>
    137c:	66 23       	and	r22, r22
    137e:	11 f4       	brne	.+4      	; 0x1384 <__fp_mintl+0x18>
    1380:	99 27       	eor	r25, r25
    1382:	0d c0       	rjmp	.+26     	; 0x139e <__fp_mintl+0x32>
    1384:	90 51       	subi	r25, 0x10	; 16
    1386:	86 2b       	or	r24, r22
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	2a f0       	brmi	.+10     	; 0x1398 <__fp_mintl+0x2c>
    138e:	9a 95       	dec	r25
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	da f7       	brpl	.-10     	; 0x138e <__fp_mintl+0x22>
    1398:	88 0f       	add	r24, r24
    139a:	96 95       	lsr	r25
    139c:	87 95       	ror	r24
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <__fp_mpack>:
    13a2:	9f 3f       	cpi	r25, 0xFF	; 255
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <__fp_mpack_finite+0xc>

000013a6 <__fp_mpack_finite>:
    13a6:	91 50       	subi	r25, 0x01	; 1
    13a8:	20 f4       	brcc	.+8      	; 0x13b2 <__fp_mpack_finite+0xc>
    13aa:	87 95       	ror	r24
    13ac:	77 95       	ror	r23
    13ae:	67 95       	ror	r22
    13b0:	b7 95       	ror	r27
    13b2:	88 0f       	add	r24, r24
    13b4:	91 1d       	adc	r25, r1
    13b6:	96 95       	lsr	r25
    13b8:	87 95       	ror	r24
    13ba:	97 f9       	bld	r25, 7
    13bc:	08 95       	ret

000013be <memcpy>:
    13be:	fb 01       	movw	r30, r22
    13c0:	dc 01       	movw	r26, r24
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <memcpy+0xa>
    13c4:	01 90       	ld	r0, Z+
    13c6:	0d 92       	st	X+, r0
    13c8:	41 50       	subi	r20, 0x01	; 1
    13ca:	50 40       	sbci	r21, 0x00	; 0
    13cc:	d8 f7       	brcc	.-10     	; 0x13c4 <memcpy+0x6>
    13ce:	08 95       	ret

000013d0 <strcmp>:
    13d0:	fb 01       	movw	r30, r22
    13d2:	dc 01       	movw	r26, r24
    13d4:	8d 91       	ld	r24, X+
    13d6:	01 90       	ld	r0, Z+
    13d8:	80 19       	sub	r24, r0
    13da:	01 10       	cpse	r0, r1
    13dc:	d9 f3       	breq	.-10     	; 0x13d4 <strcmp+0x4>
    13de:	99 0b       	sbc	r25, r25
    13e0:	08 95       	ret

000013e2 <printf>:
    13e2:	cf 93       	push	r28
    13e4:	df 93       	push	r29
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	ae 01       	movw	r20, r28
    13ec:	4a 5f       	subi	r20, 0xFA	; 250
    13ee:	5f 4f       	sbci	r21, 0xFF	; 255
    13f0:	fa 01       	movw	r30, r20
    13f2:	61 91       	ld	r22, Z+
    13f4:	71 91       	ld	r23, Z+
    13f6:	af 01       	movw	r20, r30
    13f8:	80 91 2d 23 	lds	r24, 0x232D	; 0x80232d <__iob+0x2>
    13fc:	90 91 2e 23 	lds	r25, 0x232E	; 0x80232e <__iob+0x3>
    1400:	0e 94 35 0a 	call	0x146a	; 0x146a <vfprintf>
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <puts>:
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	e0 91 2d 23 	lds	r30, 0x232D	; 0x80232d <__iob+0x2>
    1416:	f0 91 2e 23 	lds	r31, 0x232E	; 0x80232e <__iob+0x3>
    141a:	23 81       	ldd	r18, Z+3	; 0x03
    141c:	21 ff       	sbrs	r18, 1
    141e:	1b c0       	rjmp	.+54     	; 0x1456 <puts+0x4c>
    1420:	8c 01       	movw	r16, r24
    1422:	d0 e0       	ldi	r29, 0x00	; 0
    1424:	c0 e0       	ldi	r28, 0x00	; 0
    1426:	f8 01       	movw	r30, r16
    1428:	81 91       	ld	r24, Z+
    142a:	8f 01       	movw	r16, r30
    142c:	60 91 2d 23 	lds	r22, 0x232D	; 0x80232d <__iob+0x2>
    1430:	70 91 2e 23 	lds	r23, 0x232E	; 0x80232e <__iob+0x3>
    1434:	db 01       	movw	r26, r22
    1436:	18 96       	adiw	r26, 0x08	; 8
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	19 97       	sbiw	r26, 0x09	; 9
    143e:	88 23       	and	r24, r24
    1440:	31 f0       	breq	.+12     	; 0x144e <puts+0x44>
    1442:	19 95       	eicall
    1444:	89 2b       	or	r24, r25
    1446:	79 f3       	breq	.-34     	; 0x1426 <puts+0x1c>
    1448:	df ef       	ldi	r29, 0xFF	; 255
    144a:	cf ef       	ldi	r28, 0xFF	; 255
    144c:	ec cf       	rjmp	.-40     	; 0x1426 <puts+0x1c>
    144e:	8a e0       	ldi	r24, 0x0A	; 10
    1450:	19 95       	eicall
    1452:	89 2b       	or	r24, r25
    1454:	19 f0       	breq	.+6      	; 0x145c <puts+0x52>
    1456:	8f ef       	ldi	r24, 0xFF	; 255
    1458:	9f ef       	ldi	r25, 0xFF	; 255
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <puts+0x56>
    145c:	8d 2f       	mov	r24, r29
    145e:	9c 2f       	mov	r25, r28
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <vfprintf>:
    146a:	2f 92       	push	r2
    146c:	3f 92       	push	r3
    146e:	4f 92       	push	r4
    1470:	5f 92       	push	r5
    1472:	6f 92       	push	r6
    1474:	7f 92       	push	r7
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	2b 97       	sbiw	r28, 0x0b	; 11
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	6c 01       	movw	r12, r24
    149a:	7b 01       	movw	r14, r22
    149c:	8a 01       	movw	r16, r20
    149e:	fc 01       	movw	r30, r24
    14a0:	16 82       	std	Z+6, r1	; 0x06
    14a2:	17 82       	std	Z+7, r1	; 0x07
    14a4:	83 81       	ldd	r24, Z+3	; 0x03
    14a6:	81 ff       	sbrs	r24, 1
    14a8:	cc c1       	rjmp	.+920    	; 0x1842 <vfprintf+0x3d8>
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	3c 01       	movw	r6, r24
    14b0:	f6 01       	movw	r30, r12
    14b2:	93 81       	ldd	r25, Z+3	; 0x03
    14b4:	f7 01       	movw	r30, r14
    14b6:	93 fd       	sbrc	r25, 3
    14b8:	85 91       	lpm	r24, Z+
    14ba:	93 ff       	sbrs	r25, 3
    14bc:	81 91       	ld	r24, Z+
    14be:	7f 01       	movw	r14, r30
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <vfprintf+0x5c>
    14c4:	ba c1       	rjmp	.+884    	; 0x183a <vfprintf+0x3d0>
    14c6:	85 32       	cpi	r24, 0x25	; 37
    14c8:	39 f4       	brne	.+14     	; 0x14d8 <vfprintf+0x6e>
    14ca:	93 fd       	sbrc	r25, 3
    14cc:	85 91       	lpm	r24, Z+
    14ce:	93 ff       	sbrs	r25, 3
    14d0:	81 91       	ld	r24, Z+
    14d2:	7f 01       	movw	r14, r30
    14d4:	85 32       	cpi	r24, 0x25	; 37
    14d6:	29 f4       	brne	.+10     	; 0x14e2 <vfprintf+0x78>
    14d8:	b6 01       	movw	r22, r12
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    14e0:	e7 cf       	rjmp	.-50     	; 0x14b0 <vfprintf+0x46>
    14e2:	91 2c       	mov	r9, r1
    14e4:	21 2c       	mov	r2, r1
    14e6:	31 2c       	mov	r3, r1
    14e8:	ff e1       	ldi	r31, 0x1F	; 31
    14ea:	f3 15       	cp	r31, r3
    14ec:	d8 f0       	brcs	.+54     	; 0x1524 <vfprintf+0xba>
    14ee:	8b 32       	cpi	r24, 0x2B	; 43
    14f0:	79 f0       	breq	.+30     	; 0x1510 <vfprintf+0xa6>
    14f2:	38 f4       	brcc	.+14     	; 0x1502 <vfprintf+0x98>
    14f4:	80 32       	cpi	r24, 0x20	; 32
    14f6:	79 f0       	breq	.+30     	; 0x1516 <vfprintf+0xac>
    14f8:	83 32       	cpi	r24, 0x23	; 35
    14fa:	a1 f4       	brne	.+40     	; 0x1524 <vfprintf+0xba>
    14fc:	23 2d       	mov	r18, r3
    14fe:	20 61       	ori	r18, 0x10	; 16
    1500:	1d c0       	rjmp	.+58     	; 0x153c <vfprintf+0xd2>
    1502:	8d 32       	cpi	r24, 0x2D	; 45
    1504:	61 f0       	breq	.+24     	; 0x151e <vfprintf+0xb4>
    1506:	80 33       	cpi	r24, 0x30	; 48
    1508:	69 f4       	brne	.+26     	; 0x1524 <vfprintf+0xba>
    150a:	23 2d       	mov	r18, r3
    150c:	21 60       	ori	r18, 0x01	; 1
    150e:	16 c0       	rjmp	.+44     	; 0x153c <vfprintf+0xd2>
    1510:	83 2d       	mov	r24, r3
    1512:	82 60       	ori	r24, 0x02	; 2
    1514:	38 2e       	mov	r3, r24
    1516:	e3 2d       	mov	r30, r3
    1518:	e4 60       	ori	r30, 0x04	; 4
    151a:	3e 2e       	mov	r3, r30
    151c:	2a c0       	rjmp	.+84     	; 0x1572 <vfprintf+0x108>
    151e:	f3 2d       	mov	r31, r3
    1520:	f8 60       	ori	r31, 0x08	; 8
    1522:	1d c0       	rjmp	.+58     	; 0x155e <vfprintf+0xf4>
    1524:	37 fc       	sbrc	r3, 7
    1526:	2d c0       	rjmp	.+90     	; 0x1582 <vfprintf+0x118>
    1528:	20 ed       	ldi	r18, 0xD0	; 208
    152a:	28 0f       	add	r18, r24
    152c:	2a 30       	cpi	r18, 0x0A	; 10
    152e:	40 f0       	brcs	.+16     	; 0x1540 <vfprintf+0xd6>
    1530:	8e 32       	cpi	r24, 0x2E	; 46
    1532:	b9 f4       	brne	.+46     	; 0x1562 <vfprintf+0xf8>
    1534:	36 fc       	sbrc	r3, 6
    1536:	81 c1       	rjmp	.+770    	; 0x183a <vfprintf+0x3d0>
    1538:	23 2d       	mov	r18, r3
    153a:	20 64       	ori	r18, 0x40	; 64
    153c:	32 2e       	mov	r3, r18
    153e:	19 c0       	rjmp	.+50     	; 0x1572 <vfprintf+0x108>
    1540:	36 fe       	sbrs	r3, 6
    1542:	06 c0       	rjmp	.+12     	; 0x1550 <vfprintf+0xe6>
    1544:	8a e0       	ldi	r24, 0x0A	; 10
    1546:	98 9e       	mul	r9, r24
    1548:	20 0d       	add	r18, r0
    154a:	11 24       	eor	r1, r1
    154c:	92 2e       	mov	r9, r18
    154e:	11 c0       	rjmp	.+34     	; 0x1572 <vfprintf+0x108>
    1550:	ea e0       	ldi	r30, 0x0A	; 10
    1552:	2e 9e       	mul	r2, r30
    1554:	20 0d       	add	r18, r0
    1556:	11 24       	eor	r1, r1
    1558:	22 2e       	mov	r2, r18
    155a:	f3 2d       	mov	r31, r3
    155c:	f0 62       	ori	r31, 0x20	; 32
    155e:	3f 2e       	mov	r3, r31
    1560:	08 c0       	rjmp	.+16     	; 0x1572 <vfprintf+0x108>
    1562:	8c 36       	cpi	r24, 0x6C	; 108
    1564:	21 f4       	brne	.+8      	; 0x156e <vfprintf+0x104>
    1566:	83 2d       	mov	r24, r3
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	38 2e       	mov	r3, r24
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x108>
    156e:	88 36       	cpi	r24, 0x68	; 104
    1570:	41 f4       	brne	.+16     	; 0x1582 <vfprintf+0x118>
    1572:	f7 01       	movw	r30, r14
    1574:	93 fd       	sbrc	r25, 3
    1576:	85 91       	lpm	r24, Z+
    1578:	93 ff       	sbrs	r25, 3
    157a:	81 91       	ld	r24, Z+
    157c:	7f 01       	movw	r14, r30
    157e:	81 11       	cpse	r24, r1
    1580:	b3 cf       	rjmp	.-154    	; 0x14e8 <vfprintf+0x7e>
    1582:	98 2f       	mov	r25, r24
    1584:	9f 7d       	andi	r25, 0xDF	; 223
    1586:	95 54       	subi	r25, 0x45	; 69
    1588:	93 30       	cpi	r25, 0x03	; 3
    158a:	28 f4       	brcc	.+10     	; 0x1596 <vfprintf+0x12c>
    158c:	0c 5f       	subi	r16, 0xFC	; 252
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	9f e3       	ldi	r25, 0x3F	; 63
    1592:	99 83       	std	Y+1, r25	; 0x01
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <vfprintf+0x146>
    1596:	83 36       	cpi	r24, 0x63	; 99
    1598:	31 f0       	breq	.+12     	; 0x15a6 <vfprintf+0x13c>
    159a:	83 37       	cpi	r24, 0x73	; 115
    159c:	71 f0       	breq	.+28     	; 0x15ba <vfprintf+0x150>
    159e:	83 35       	cpi	r24, 0x53	; 83
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <vfprintf+0x13a>
    15a2:	59 c0       	rjmp	.+178    	; 0x1656 <vfprintf+0x1ec>
    15a4:	21 c0       	rjmp	.+66     	; 0x15e8 <vfprintf+0x17e>
    15a6:	f8 01       	movw	r30, r16
    15a8:	80 81       	ld	r24, Z
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	0e 5f       	subi	r16, 0xFE	; 254
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	88 24       	eor	r8, r8
    15b2:	83 94       	inc	r8
    15b4:	91 2c       	mov	r9, r1
    15b6:	53 01       	movw	r10, r6
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <vfprintf+0x176>
    15ba:	28 01       	movw	r4, r16
    15bc:	f2 e0       	ldi	r31, 0x02	; 2
    15be:	4f 0e       	add	r4, r31
    15c0:	51 1c       	adc	r5, r1
    15c2:	f8 01       	movw	r30, r16
    15c4:	a0 80       	ld	r10, Z
    15c6:	b1 80       	ldd	r11, Z+1	; 0x01
    15c8:	36 fe       	sbrs	r3, 6
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <vfprintf+0x168>
    15cc:	69 2d       	mov	r22, r9
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0x16c>
    15d2:	6f ef       	ldi	r22, 0xFF	; 255
    15d4:	7f ef       	ldi	r23, 0xFF	; 255
    15d6:	c5 01       	movw	r24, r10
    15d8:	0e 94 44 0c 	call	0x1888	; 0x1888 <strnlen>
    15dc:	4c 01       	movw	r8, r24
    15de:	82 01       	movw	r16, r4
    15e0:	f3 2d       	mov	r31, r3
    15e2:	ff 77       	andi	r31, 0x7F	; 127
    15e4:	3f 2e       	mov	r3, r31
    15e6:	16 c0       	rjmp	.+44     	; 0x1614 <vfprintf+0x1aa>
    15e8:	28 01       	movw	r4, r16
    15ea:	22 e0       	ldi	r18, 0x02	; 2
    15ec:	42 0e       	add	r4, r18
    15ee:	51 1c       	adc	r5, r1
    15f0:	f8 01       	movw	r30, r16
    15f2:	a0 80       	ld	r10, Z
    15f4:	b1 80       	ldd	r11, Z+1	; 0x01
    15f6:	36 fe       	sbrs	r3, 6
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <vfprintf+0x196>
    15fa:	69 2d       	mov	r22, r9
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <vfprintf+0x19a>
    1600:	6f ef       	ldi	r22, 0xFF	; 255
    1602:	7f ef       	ldi	r23, 0xFF	; 255
    1604:	c5 01       	movw	r24, r10
    1606:	0e 94 39 0c 	call	0x1872	; 0x1872 <strnlen_P>
    160a:	4c 01       	movw	r8, r24
    160c:	f3 2d       	mov	r31, r3
    160e:	f0 68       	ori	r31, 0x80	; 128
    1610:	3f 2e       	mov	r3, r31
    1612:	82 01       	movw	r16, r4
    1614:	33 fc       	sbrc	r3, 3
    1616:	1b c0       	rjmp	.+54     	; 0x164e <vfprintf+0x1e4>
    1618:	82 2d       	mov	r24, r2
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	88 16       	cp	r8, r24
    161e:	99 06       	cpc	r9, r25
    1620:	b0 f4       	brcc	.+44     	; 0x164e <vfprintf+0x1e4>
    1622:	b6 01       	movw	r22, r12
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    162c:	2a 94       	dec	r2
    162e:	f4 cf       	rjmp	.-24     	; 0x1618 <vfprintf+0x1ae>
    1630:	f5 01       	movw	r30, r10
    1632:	37 fc       	sbrc	r3, 7
    1634:	85 91       	lpm	r24, Z+
    1636:	37 fe       	sbrs	r3, 7
    1638:	81 91       	ld	r24, Z+
    163a:	5f 01       	movw	r10, r30
    163c:	b6 01       	movw	r22, r12
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1644:	21 10       	cpse	r2, r1
    1646:	2a 94       	dec	r2
    1648:	21 e0       	ldi	r18, 0x01	; 1
    164a:	82 1a       	sub	r8, r18
    164c:	91 08       	sbc	r9, r1
    164e:	81 14       	cp	r8, r1
    1650:	91 04       	cpc	r9, r1
    1652:	71 f7       	brne	.-36     	; 0x1630 <vfprintf+0x1c6>
    1654:	e8 c0       	rjmp	.+464    	; 0x1826 <vfprintf+0x3bc>
    1656:	84 36       	cpi	r24, 0x64	; 100
    1658:	11 f0       	breq	.+4      	; 0x165e <vfprintf+0x1f4>
    165a:	89 36       	cpi	r24, 0x69	; 105
    165c:	41 f5       	brne	.+80     	; 0x16ae <vfprintf+0x244>
    165e:	f8 01       	movw	r30, r16
    1660:	37 fe       	sbrs	r3, 7
    1662:	07 c0       	rjmp	.+14     	; 0x1672 <vfprintf+0x208>
    1664:	60 81       	ld	r22, Z
    1666:	71 81       	ldd	r23, Z+1	; 0x01
    1668:	82 81       	ldd	r24, Z+2	; 0x02
    166a:	93 81       	ldd	r25, Z+3	; 0x03
    166c:	0c 5f       	subi	r16, 0xFC	; 252
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	08 c0       	rjmp	.+16     	; 0x1682 <vfprintf+0x218>
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	07 2e       	mov	r0, r23
    1678:	00 0c       	add	r0, r0
    167a:	88 0b       	sbc	r24, r24
    167c:	99 0b       	sbc	r25, r25
    167e:	0e 5f       	subi	r16, 0xFE	; 254
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	f3 2d       	mov	r31, r3
    1684:	ff 76       	andi	r31, 0x6F	; 111
    1686:	3f 2e       	mov	r3, r31
    1688:	97 ff       	sbrs	r25, 7
    168a:	09 c0       	rjmp	.+18     	; 0x169e <vfprintf+0x234>
    168c:	90 95       	com	r25
    168e:	80 95       	com	r24
    1690:	70 95       	com	r23
    1692:	61 95       	neg	r22
    1694:	7f 4f       	sbci	r23, 0xFF	; 255
    1696:	8f 4f       	sbci	r24, 0xFF	; 255
    1698:	9f 4f       	sbci	r25, 0xFF	; 255
    169a:	f0 68       	ori	r31, 0x80	; 128
    169c:	3f 2e       	mov	r3, r31
    169e:	2a e0       	ldi	r18, 0x0A	; 10
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	a3 01       	movw	r20, r6
    16a4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__ultoa_invert>
    16a8:	88 2e       	mov	r8, r24
    16aa:	86 18       	sub	r8, r6
    16ac:	45 c0       	rjmp	.+138    	; 0x1738 <vfprintf+0x2ce>
    16ae:	85 37       	cpi	r24, 0x75	; 117
    16b0:	31 f4       	brne	.+12     	; 0x16be <vfprintf+0x254>
    16b2:	23 2d       	mov	r18, r3
    16b4:	2f 7e       	andi	r18, 0xEF	; 239
    16b6:	b2 2e       	mov	r11, r18
    16b8:	2a e0       	ldi	r18, 0x0A	; 10
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	25 c0       	rjmp	.+74     	; 0x1708 <vfprintf+0x29e>
    16be:	93 2d       	mov	r25, r3
    16c0:	99 7f       	andi	r25, 0xF9	; 249
    16c2:	b9 2e       	mov	r11, r25
    16c4:	8f 36       	cpi	r24, 0x6F	; 111
    16c6:	c1 f0       	breq	.+48     	; 0x16f8 <vfprintf+0x28e>
    16c8:	18 f4       	brcc	.+6      	; 0x16d0 <vfprintf+0x266>
    16ca:	88 35       	cpi	r24, 0x58	; 88
    16cc:	79 f0       	breq	.+30     	; 0x16ec <vfprintf+0x282>
    16ce:	b5 c0       	rjmp	.+362    	; 0x183a <vfprintf+0x3d0>
    16d0:	80 37       	cpi	r24, 0x70	; 112
    16d2:	19 f0       	breq	.+6      	; 0x16da <vfprintf+0x270>
    16d4:	88 37       	cpi	r24, 0x78	; 120
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <vfprintf+0x276>
    16d8:	b0 c0       	rjmp	.+352    	; 0x183a <vfprintf+0x3d0>
    16da:	e9 2f       	mov	r30, r25
    16dc:	e0 61       	ori	r30, 0x10	; 16
    16de:	be 2e       	mov	r11, r30
    16e0:	b4 fe       	sbrs	r11, 4
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <vfprintf+0x294>
    16e4:	fb 2d       	mov	r31, r11
    16e6:	f4 60       	ori	r31, 0x04	; 4
    16e8:	bf 2e       	mov	r11, r31
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <vfprintf+0x294>
    16ec:	34 fe       	sbrs	r3, 4
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <vfprintf+0x29a>
    16f0:	29 2f       	mov	r18, r25
    16f2:	26 60       	ori	r18, 0x06	; 6
    16f4:	b2 2e       	mov	r11, r18
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <vfprintf+0x29a>
    16f8:	28 e0       	ldi	r18, 0x08	; 8
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <vfprintf+0x29e>
    16fe:	20 e1       	ldi	r18, 0x10	; 16
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <vfprintf+0x29e>
    1704:	20 e1       	ldi	r18, 0x10	; 16
    1706:	32 e0       	ldi	r19, 0x02	; 2
    1708:	f8 01       	movw	r30, r16
    170a:	b7 fe       	sbrs	r11, 7
    170c:	07 c0       	rjmp	.+14     	; 0x171c <vfprintf+0x2b2>
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	0c 5f       	subi	r16, 0xFC	; 252
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	06 c0       	rjmp	.+12     	; 0x1728 <vfprintf+0x2be>
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 5f       	subi	r16, 0xFE	; 254
    1726:	1f 4f       	sbci	r17, 0xFF	; 255
    1728:	a3 01       	movw	r20, r6
    172a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__ultoa_invert>
    172e:	88 2e       	mov	r8, r24
    1730:	86 18       	sub	r8, r6
    1732:	fb 2d       	mov	r31, r11
    1734:	ff 77       	andi	r31, 0x7F	; 127
    1736:	3f 2e       	mov	r3, r31
    1738:	36 fe       	sbrs	r3, 6
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x2ec>
    173c:	23 2d       	mov	r18, r3
    173e:	2e 7f       	andi	r18, 0xFE	; 254
    1740:	a2 2e       	mov	r10, r18
    1742:	89 14       	cp	r8, r9
    1744:	58 f4       	brcc	.+22     	; 0x175c <vfprintf+0x2f2>
    1746:	34 fe       	sbrs	r3, 4
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <vfprintf+0x2f6>
    174a:	32 fc       	sbrc	r3, 2
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <vfprintf+0x2f6>
    174e:	83 2d       	mov	r24, r3
    1750:	8e 7e       	andi	r24, 0xEE	; 238
    1752:	a8 2e       	mov	r10, r24
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x2f6>
    1756:	b8 2c       	mov	r11, r8
    1758:	a3 2c       	mov	r10, r3
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <vfprintf+0x2f8>
    175c:	b8 2c       	mov	r11, r8
    175e:	01 c0       	rjmp	.+2      	; 0x1762 <vfprintf+0x2f8>
    1760:	b9 2c       	mov	r11, r9
    1762:	a4 fe       	sbrs	r10, 4
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <vfprintf+0x31a>
    1766:	fe 01       	movw	r30, r28
    1768:	e8 0d       	add	r30, r8
    176a:	f1 1d       	adc	r31, r1
    176c:	80 81       	ld	r24, Z
    176e:	80 33       	cpi	r24, 0x30	; 48
    1770:	21 f4       	brne	.+8      	; 0x177a <vfprintf+0x310>
    1772:	9a 2d       	mov	r25, r10
    1774:	99 7e       	andi	r25, 0xE9	; 233
    1776:	a9 2e       	mov	r10, r25
    1778:	09 c0       	rjmp	.+18     	; 0x178c <vfprintf+0x322>
    177a:	a2 fe       	sbrs	r10, 2
    177c:	06 c0       	rjmp	.+12     	; 0x178a <vfprintf+0x320>
    177e:	b3 94       	inc	r11
    1780:	b3 94       	inc	r11
    1782:	04 c0       	rjmp	.+8      	; 0x178c <vfprintf+0x322>
    1784:	8a 2d       	mov	r24, r10
    1786:	86 78       	andi	r24, 0x86	; 134
    1788:	09 f0       	breq	.+2      	; 0x178c <vfprintf+0x322>
    178a:	b3 94       	inc	r11
    178c:	a3 fc       	sbrc	r10, 3
    178e:	11 c0       	rjmp	.+34     	; 0x17b2 <vfprintf+0x348>
    1790:	a0 fe       	sbrs	r10, 0
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <vfprintf+0x336>
    1794:	b2 14       	cp	r11, r2
    1796:	88 f4       	brcc	.+34     	; 0x17ba <vfprintf+0x350>
    1798:	28 0c       	add	r2, r8
    179a:	92 2c       	mov	r9, r2
    179c:	9b 18       	sub	r9, r11
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <vfprintf+0x352>
    17a0:	b2 14       	cp	r11, r2
    17a2:	60 f4       	brcc	.+24     	; 0x17bc <vfprintf+0x352>
    17a4:	b6 01       	movw	r22, r12
    17a6:	80 e2       	ldi	r24, 0x20	; 32
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    17ae:	b3 94       	inc	r11
    17b0:	f7 cf       	rjmp	.-18     	; 0x17a0 <vfprintf+0x336>
    17b2:	b2 14       	cp	r11, r2
    17b4:	18 f4       	brcc	.+6      	; 0x17bc <vfprintf+0x352>
    17b6:	2b 18       	sub	r2, r11
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x354>
    17ba:	98 2c       	mov	r9, r8
    17bc:	21 2c       	mov	r2, r1
    17be:	a4 fe       	sbrs	r10, 4
    17c0:	10 c0       	rjmp	.+32     	; 0x17e2 <vfprintf+0x378>
    17c2:	b6 01       	movw	r22, r12
    17c4:	80 e3       	ldi	r24, 0x30	; 48
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    17cc:	a2 fe       	sbrs	r10, 2
    17ce:	17 c0       	rjmp	.+46     	; 0x17fe <vfprintf+0x394>
    17d0:	a1 fc       	sbrc	r10, 1
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <vfprintf+0x370>
    17d4:	88 e7       	ldi	r24, 0x78	; 120
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x374>
    17da:	88 e5       	ldi	r24, 0x58	; 88
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	b6 01       	movw	r22, r12
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <vfprintf+0x390>
    17e2:	8a 2d       	mov	r24, r10
    17e4:	86 78       	andi	r24, 0x86	; 134
    17e6:	59 f0       	breq	.+22     	; 0x17fe <vfprintf+0x394>
    17e8:	a1 fe       	sbrs	r10, 1
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x386>
    17ec:	8b e2       	ldi	r24, 0x2B	; 43
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <vfprintf+0x388>
    17f0:	80 e2       	ldi	r24, 0x20	; 32
    17f2:	a7 fc       	sbrc	r10, 7
    17f4:	8d e2       	ldi	r24, 0x2D	; 45
    17f6:	b6 01       	movw	r22, r12
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    17fe:	89 14       	cp	r8, r9
    1800:	38 f4       	brcc	.+14     	; 0x1810 <vfprintf+0x3a6>
    1802:	b6 01       	movw	r22, r12
    1804:	80 e3       	ldi	r24, 0x30	; 48
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    180c:	9a 94       	dec	r9
    180e:	f7 cf       	rjmp	.-18     	; 0x17fe <vfprintf+0x394>
    1810:	8a 94       	dec	r8
    1812:	f3 01       	movw	r30, r6
    1814:	e8 0d       	add	r30, r8
    1816:	f1 1d       	adc	r31, r1
    1818:	80 81       	ld	r24, Z
    181a:	b6 01       	movw	r22, r12
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1822:	81 10       	cpse	r8, r1
    1824:	f5 cf       	rjmp	.-22     	; 0x1810 <vfprintf+0x3a6>
    1826:	22 20       	and	r2, r2
    1828:	09 f4       	brne	.+2      	; 0x182c <vfprintf+0x3c2>
    182a:	42 ce       	rjmp	.-892    	; 0x14b0 <vfprintf+0x46>
    182c:	b6 01       	movw	r22, r12
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 4f 0c 	call	0x189e	; 0x189e <fputc>
    1836:	2a 94       	dec	r2
    1838:	f6 cf       	rjmp	.-20     	; 0x1826 <vfprintf+0x3bc>
    183a:	f6 01       	movw	r30, r12
    183c:	86 81       	ldd	r24, Z+6	; 0x06
    183e:	97 81       	ldd	r25, Z+7	; 0x07
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x3dc>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	2b 96       	adiw	r28, 0x0b	; 11
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	9f 90       	pop	r9
    1862:	8f 90       	pop	r8
    1864:	7f 90       	pop	r7
    1866:	6f 90       	pop	r6
    1868:	5f 90       	pop	r5
    186a:	4f 90       	pop	r4
    186c:	3f 90       	pop	r3
    186e:	2f 90       	pop	r2
    1870:	08 95       	ret

00001872 <strnlen_P>:
    1872:	fc 01       	movw	r30, r24
    1874:	05 90       	lpm	r0, Z+
    1876:	61 50       	subi	r22, 0x01	; 1
    1878:	70 40       	sbci	r23, 0x00	; 0
    187a:	01 10       	cpse	r0, r1
    187c:	d8 f7       	brcc	.-10     	; 0x1874 <strnlen_P+0x2>
    187e:	80 95       	com	r24
    1880:	90 95       	com	r25
    1882:	8e 0f       	add	r24, r30
    1884:	9f 1f       	adc	r25, r31
    1886:	08 95       	ret

00001888 <strnlen>:
    1888:	fc 01       	movw	r30, r24
    188a:	61 50       	subi	r22, 0x01	; 1
    188c:	70 40       	sbci	r23, 0x00	; 0
    188e:	01 90       	ld	r0, Z+
    1890:	01 10       	cpse	r0, r1
    1892:	d8 f7       	brcc	.-10     	; 0x188a <strnlen+0x2>
    1894:	80 95       	com	r24
    1896:	90 95       	com	r25
    1898:	8e 0f       	add	r24, r30
    189a:	9f 1f       	adc	r25, r31
    189c:	08 95       	ret

0000189e <fputc>:
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	fb 01       	movw	r30, r22
    18a8:	23 81       	ldd	r18, Z+3	; 0x03
    18aa:	21 fd       	sbrc	r18, 1
    18ac:	03 c0       	rjmp	.+6      	; 0x18b4 <fputc+0x16>
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	2c c0       	rjmp	.+88     	; 0x190c <fputc+0x6e>
    18b4:	22 ff       	sbrs	r18, 2
    18b6:	16 c0       	rjmp	.+44     	; 0x18e4 <fputc+0x46>
    18b8:	46 81       	ldd	r20, Z+6	; 0x06
    18ba:	57 81       	ldd	r21, Z+7	; 0x07
    18bc:	24 81       	ldd	r18, Z+4	; 0x04
    18be:	35 81       	ldd	r19, Z+5	; 0x05
    18c0:	42 17       	cp	r20, r18
    18c2:	53 07       	cpc	r21, r19
    18c4:	44 f4       	brge	.+16     	; 0x18d6 <fputc+0x38>
    18c6:	a0 81       	ld	r26, Z
    18c8:	b1 81       	ldd	r27, Z+1	; 0x01
    18ca:	9d 01       	movw	r18, r26
    18cc:	2f 5f       	subi	r18, 0xFF	; 255
    18ce:	3f 4f       	sbci	r19, 0xFF	; 255
    18d0:	20 83       	st	Z, r18
    18d2:	31 83       	std	Z+1, r19	; 0x01
    18d4:	8c 93       	st	X, r24
    18d6:	26 81       	ldd	r18, Z+6	; 0x06
    18d8:	37 81       	ldd	r19, Z+7	; 0x07
    18da:	2f 5f       	subi	r18, 0xFF	; 255
    18dc:	3f 4f       	sbci	r19, 0xFF	; 255
    18de:	26 83       	std	Z+6, r18	; 0x06
    18e0:	37 83       	std	Z+7, r19	; 0x07
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <fputc+0x6e>
    18e4:	8b 01       	movw	r16, r22
    18e6:	ec 01       	movw	r28, r24
    18e8:	fb 01       	movw	r30, r22
    18ea:	00 84       	ldd	r0, Z+8	; 0x08
    18ec:	f1 85       	ldd	r31, Z+9	; 0x09
    18ee:	e0 2d       	mov	r30, r0
    18f0:	19 95       	eicall
    18f2:	89 2b       	or	r24, r25
    18f4:	e1 f6       	brne	.-72     	; 0x18ae <fputc+0x10>
    18f6:	d8 01       	movw	r26, r16
    18f8:	16 96       	adiw	r26, 0x06	; 6
    18fa:	8d 91       	ld	r24, X+
    18fc:	9c 91       	ld	r25, X
    18fe:	17 97       	sbiw	r26, 0x07	; 7
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	16 96       	adiw	r26, 0x06	; 6
    1904:	8d 93       	st	X+, r24
    1906:	9c 93       	st	X, r25
    1908:	17 97       	sbiw	r26, 0x07	; 7
    190a:	ce 01       	movw	r24, r28
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <__ultoa_invert>:
    1916:	fa 01       	movw	r30, r20
    1918:	aa 27       	eor	r26, r26
    191a:	28 30       	cpi	r18, 0x08	; 8
    191c:	51 f1       	breq	.+84     	; 0x1972 <__ultoa_invert+0x5c>
    191e:	20 31       	cpi	r18, 0x10	; 16
    1920:	81 f1       	breq	.+96     	; 0x1982 <__ultoa_invert+0x6c>
    1922:	e8 94       	clt
    1924:	6f 93       	push	r22
    1926:	6e 7f       	andi	r22, 0xFE	; 254
    1928:	6e 5f       	subi	r22, 0xFE	; 254
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	8f 4f       	sbci	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	af 4f       	sbci	r26, 0xFF	; 255
    1932:	b1 e0       	ldi	r27, 0x01	; 1
    1934:	3e d0       	rcall	.+124    	; 0x19b2 <__ultoa_invert+0x9c>
    1936:	b4 e0       	ldi	r27, 0x04	; 4
    1938:	3c d0       	rcall	.+120    	; 0x19b2 <__ultoa_invert+0x9c>
    193a:	67 0f       	add	r22, r23
    193c:	78 1f       	adc	r23, r24
    193e:	89 1f       	adc	r24, r25
    1940:	9a 1f       	adc	r25, r26
    1942:	a1 1d       	adc	r26, r1
    1944:	68 0f       	add	r22, r24
    1946:	79 1f       	adc	r23, r25
    1948:	8a 1f       	adc	r24, r26
    194a:	91 1d       	adc	r25, r1
    194c:	a1 1d       	adc	r26, r1
    194e:	6a 0f       	add	r22, r26
    1950:	71 1d       	adc	r23, r1
    1952:	81 1d       	adc	r24, r1
    1954:	91 1d       	adc	r25, r1
    1956:	a1 1d       	adc	r26, r1
    1958:	20 d0       	rcall	.+64     	; 0x199a <__ultoa_invert+0x84>
    195a:	09 f4       	brne	.+2      	; 0x195e <__ultoa_invert+0x48>
    195c:	68 94       	set
    195e:	3f 91       	pop	r19
    1960:	2a e0       	ldi	r18, 0x0A	; 10
    1962:	26 9f       	mul	r18, r22
    1964:	11 24       	eor	r1, r1
    1966:	30 19       	sub	r19, r0
    1968:	30 5d       	subi	r19, 0xD0	; 208
    196a:	31 93       	st	Z+, r19
    196c:	de f6       	brtc	.-74     	; 0x1924 <__ultoa_invert+0xe>
    196e:	cf 01       	movw	r24, r30
    1970:	08 95       	ret
    1972:	46 2f       	mov	r20, r22
    1974:	47 70       	andi	r20, 0x07	; 7
    1976:	40 5d       	subi	r20, 0xD0	; 208
    1978:	41 93       	st	Z+, r20
    197a:	b3 e0       	ldi	r27, 0x03	; 3
    197c:	0f d0       	rcall	.+30     	; 0x199c <__ultoa_invert+0x86>
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0x5c>
    1980:	f6 cf       	rjmp	.-20     	; 0x196e <__ultoa_invert+0x58>
    1982:	46 2f       	mov	r20, r22
    1984:	4f 70       	andi	r20, 0x0F	; 15
    1986:	40 5d       	subi	r20, 0xD0	; 208
    1988:	4a 33       	cpi	r20, 0x3A	; 58
    198a:	18 f0       	brcs	.+6      	; 0x1992 <__ultoa_invert+0x7c>
    198c:	49 5d       	subi	r20, 0xD9	; 217
    198e:	31 fd       	sbrc	r19, 1
    1990:	40 52       	subi	r20, 0x20	; 32
    1992:	41 93       	st	Z+, r20
    1994:	02 d0       	rcall	.+4      	; 0x199a <__ultoa_invert+0x84>
    1996:	a9 f7       	brne	.-22     	; 0x1982 <__ultoa_invert+0x6c>
    1998:	ea cf       	rjmp	.-44     	; 0x196e <__ultoa_invert+0x58>
    199a:	b4 e0       	ldi	r27, 0x04	; 4
    199c:	a6 95       	lsr	r26
    199e:	97 95       	ror	r25
    19a0:	87 95       	ror	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__ultoa_invert+0x86>
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	08 95       	ret
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	0a 2e       	mov	r0, r26
    19b8:	06 94       	lsr	r0
    19ba:	57 95       	ror	r21
    19bc:	47 95       	ror	r20
    19be:	37 95       	ror	r19
    19c0:	27 95       	ror	r18
    19c2:	ba 95       	dec	r27
    19c4:	c9 f7       	brne	.-14     	; 0x19b8 <__ultoa_invert+0xa2>
    19c6:	62 0f       	add	r22, r18
    19c8:	73 1f       	adc	r23, r19
    19ca:	84 1f       	adc	r24, r20
    19cc:	95 1f       	adc	r25, r21
    19ce:	a0 1d       	adc	r26, r0
    19d0:	08 95       	ret

000019d2 <_exit>:
    19d2:	f8 94       	cli

000019d4 <__stop_program>:
    19d4:	ff cf       	rjmp	.-2      	; 0x19d4 <__stop_program>
