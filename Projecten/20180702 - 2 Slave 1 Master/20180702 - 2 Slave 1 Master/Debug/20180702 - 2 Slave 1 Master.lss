
20180702 - 2 Slave 1 Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00802000  00002112  000021a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b7  008020bc  008020bc  00002262  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000085cc  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000400e  00000000  00000000  0000ac3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000206a  00000000  00000000  0000ec4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  00010cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f08  00000000  00000000  0001182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032f4  00000000  00000000  00015734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00018a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_119>
     1e0:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <uart_fgetc>
     200:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <uart_fputc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e2 e1       	ldi	r30, 0x12	; 18
     21c:	f1 e2       	ldi	r31, 0x21	; 33
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ac 3b       	cpi	r26, 0xBC	; 188
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	23 e2       	ldi	r18, 0x23	; 35
     230:	ac eb       	ldi	r26, 0xBC	; 188
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a3 37       	cpi	r26, 0x73	; 115
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 ca 02 	call	0x594	; 0x594 <main>
     242:	0c 94 87 10 	jmp	0x210e	; 0x210e <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |
     24a:	e0 e5       	ldi	r30, 0x50	; 80
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	82 83       	std	Z+2, r24	; 0x02
  OSC_XOSCSEL_XTAL_16KCLK_gc;
  OSC.CTRL |= OSC_XOSCEN_bm;
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	83 ff       	sbrs	r24, 3
     25c:	fd cf       	rjmp	.-6      	; 0x258 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc |
     25e:	e0 e5       	ldi	r30, 0x50	; 80
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	82 ec       	ldi	r24, 0xC2	; 194
     264:	85 83       	std	Z+5, r24	; 0x05
  (OSC_PLLFAC_gm & 2);
  OSC.CTRL |= OSC_PLLEN_bm;
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	84 ff       	sbrs	r24, 4
     270:	fd cf       	rjmp	.-6      	; 0x26c <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;
     272:	88 ed       	ldi	r24, 0xD8	; 216
     274:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret

0000028e <__vector_104>:
		}
	}
}

ISR(PORTF_INT0_vect)
{
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	0b b6       	in	r0, 0x3b	; 59
     29a:	0f 92       	push	r0
     29c:	9f 92       	push	r9
     29e:	af 92       	push	r10
     2a0:	bf 92       	push	r11
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	2f 93       	push	r18
     2b0:	3f 93       	push	r19
     2b2:	4f 93       	push	r20
     2b4:	5f 93       	push	r21
     2b6:	6f 93       	push	r22
     2b8:	7f 93       	push	r23
     2ba:	8f 93       	push	r24
     2bc:	9f 93       	push	r25
     2be:	af 93       	push	r26
     2c0:	bf 93       	push	r27
     2c2:	ef 93       	push	r30
     2c4:	ff 93       	push	r31
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <__vector_104+0x3e>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t  tx, fail, rx;
	uint8_t  len;
	uint8_t  ipipe;

	nrfWhatHappened(&tx, &fail, &rx);
     2d0:	ae 01       	movw	r20, r28
     2d2:	4d 5f       	subi	r20, 0xFD	; 253
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	be 01       	movw	r22, r28
     2d8:	6e 5f       	subi	r22, 0xFE	; 254
     2da:	7f 4f       	sbci	r23, 0xFF	; 255
     2dc:	ce 01       	movw	r24, r28
     2de:	01 96       	adiw	r24, 0x01	; 1
     2e0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <nrfWhatHappened>
	
	if(rx){
     2e4:	8b 81       	ldd	r24, Y+3	; 0x03
     2e6:	88 23       	and	r24, r24
     2e8:	09 f4       	brne	.+2      	; 0x2ec <__vector_104+0x5e>
     2ea:	7e c0       	rjmp	.+252    	; 0x3e8 <__vector_104+0x15a>
		len =  nrfGetDynamicPayloadSize();
     2ec:	0e 94 88 05 	call	0xb10	; 0xb10 <nrfGetDynamicPayloadSize>
     2f0:	98 2e       	mov	r9, r24
		
		nrfRead( packet, len );
     2f2:	68 2f       	mov	r22, r24
     2f4:	82 ec       	ldi	r24, 0xC2	; 194
     2f6:	90 e2       	ldi	r25, 0x20	; 32
     2f8:	0e 94 38 04 	call	0x870	; 0x870 <nrfRead>
		
		packet[len] = '\0';
     2fc:	09 2d       	mov	r16, r9
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	f8 01       	movw	r30, r16
     302:	ee 53       	subi	r30, 0x3E	; 62
     304:	ff 4d       	sbci	r31, 0xDF	; 223
     306:	10 82       	st	Z, r1
		char* sensor_id;
		char* command_id;
		char* command_data;
		
		int sensor_id_index = packet[1] - 48;
		if(blacklist[sensor_id_index] == -1) return;
     308:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <packet+0x1>
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	ee 0f       	add	r30, r30
     310:	ff 1f       	adc	r31, r31
     312:	e9 55       	subi	r30, 0x59	; 89
     314:	f0 4e       	sbci	r31, 0xE0	; 224
     316:	80 81       	ld	r24, Z
     318:	91 81       	ldd	r25, Z+1	; 0x01
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	09 f4       	brne	.+2      	; 0x320 <__vector_104+0x92>
     31e:	72 c0       	rjmp	.+228    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		
		sensor_id = (char*)malloc(2+1);
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <malloc>
     328:	6c 01       	movw	r12, r24
		memcpy(sensor_id,packet,2);
     32a:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <packet>
     32e:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <packet+0x1>
     332:	f6 01       	movw	r30, r12
     334:	80 83       	st	Z, r24
     336:	91 83       	std	Z+1, r25	; 0x01
		sensor_id[2] = 0;
     338:	12 82       	std	Z+2, r1	; 0x02
		
		command_id = (char*)malloc(2+1);
     33a:	83 e0       	ldi	r24, 0x03	; 3
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <malloc>
     342:	7c 01       	movw	r14, r24
		memcpy(command_id,packet+2,2);
     344:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <packet+0x2>
     348:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <packet+0x3>
     34c:	f7 01       	movw	r30, r14
     34e:	80 83       	st	Z, r24
     350:	91 83       	std	Z+1, r25	; 0x01
		command_id[2] = 0;
     352:	12 82       	std	Z+2, r1	; 0x02
		
		command_data = (char*)malloc(len+1);
     354:	c8 01       	movw	r24, r16
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <malloc>
     35c:	5c 01       	movw	r10, r24
		memcpy(command_data,packet+4,len);
     35e:	a8 01       	movw	r20, r16
     360:	66 ec       	ldi	r22, 0xC6	; 198
     362:	70 e2       	ldi	r23, 0x20	; 32
     364:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <memcpy>
		command_data[len] = 0;
     368:	f5 01       	movw	r30, r10
     36a:	e0 0f       	add	r30, r16
     36c:	f1 1f       	adc	r31, r17
     36e:	10 82       	st	Z, r1
		
		printf("%s: command %s, data %s\n", sensor_id, command_id, command_data);
     370:	bf 92       	push	r11
     372:	af 92       	push	r10
     374:	ff 92       	push	r15
     376:	ef 92       	push	r14
     378:	df 92       	push	r13
     37a:	cf 92       	push	r12
     37c:	80 e3       	ldi	r24, 0x30	; 48
     37e:	90 e2       	ldi	r25, 0x20	; 32
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <printf>
		
		if (strcmp(command_id, C_PRINT) == 0)
     388:	69 e4       	ldi	r22, 0x49	; 73
     38a:	70 e2       	ldi	r23, 0x20	; 32
     38c:	c7 01       	movw	r24, r14
     38e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strcmp>
     392:	cd bf       	out	0x3d, r28	; 61
     394:	de bf       	out	0x3e, r29	; 62
     396:	89 2b       	or	r24, r25
     398:	19 f4       	brne	.+6      	; 0x3a0 <__vector_104+0x112>
		{
			printf("%s\n", command_data);
     39a:	c5 01       	movw	r24, r10
     39c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <puts>
		}
		if (strcmp(command_id, C_BLAUW) == 0)
     3a0:	6c e4       	ldi	r22, 0x4C	; 76
     3a2:	70 e2       	ldi	r23, 0x20	; 32
     3a4:	c7 01       	movw	r24, r14
     3a6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strcmp>
     3aa:	89 2b       	or	r24, r25
     3ac:	41 f4       	brne	.+16     	; 0x3be <__vector_104+0x130>
		{
			uint8_t low = atoi(command_data);
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <atoi>
			TCC0.CCABUF  = low;
     3b4:	99 27       	eor	r25, r25
     3b6:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     3ba:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>
		}
		if (strcmp(command_id, C_ROOD) == 0)
     3be:	6f e4       	ldi	r22, 0x4F	; 79
     3c0:	70 e2       	ldi	r23, 0x20	; 32
     3c2:	c7 01       	movw	r24, r14
     3c4:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <strcmp>
     3c8:	89 2b       	or	r24, r25
     3ca:	41 f4       	brne	.+16     	; 0x3dc <__vector_104+0x14e>
		{
			uint8_t low = atoi(command_data);
     3cc:	c5 01       	movw	r24, r10
     3ce:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <atoi>
			TCF0.CCBBUF  = low;
     3d2:	99 27       	eor	r25, r25
     3d4:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <__TEXT_REGION_LENGTH__+0x700b3a>
     3d8:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <__TEXT_REGION_LENGTH__+0x700b3b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3dc:	8f e3       	ldi	r24, 0x3F	; 63
     3de:	9c e9       	ldi	r25, 0x9C	; 156
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <__vector_104+0x152>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_104+0x158>
     3e6:	00 00       	nop
		}
		
		_delay_ms(5);
	}
	
	if (tx) {
     3e8:	89 81       	ldd	r24, Y+1	; 0x01
     3ea:	88 23       	and	r24, r24
     3ec:	59 f0       	breq	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		nrfStopListening();
     3ee:	0e 94 92 04 	call	0x924	; 0x924 <nrfStopListening>
     3f2:	ef e3       	ldi	r30, 0x3F	; 63
     3f4:	fc e9       	ldi	r31, 0x9C	; 156
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <__vector_104+0x168>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <__vector_104+0x16e>
     3fc:	00 00       	nop
		_delay_ms(5);
		sending = 1;
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sending>
	}
}
     404:	23 96       	adiw	r28, 0x03	; 3
     406:	cd bf       	out	0x3d, r28	; 61
     408:	de bf       	out	0x3e, r29	; 62
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	bf 91       	pop	r27
     414:	af 91       	pop	r26
     416:	9f 91       	pop	r25
     418:	8f 91       	pop	r24
     41a:	7f 91       	pop	r23
     41c:	6f 91       	pop	r22
     41e:	5f 91       	pop	r21
     420:	4f 91       	pop	r20
     422:	3f 91       	pop	r19
     424:	2f 91       	pop	r18
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	df 90       	pop	r13
     430:	cf 90       	pop	r12
     432:	bf 90       	pop	r11
     434:	af 90       	pop	r10
     436:	9f 90       	pop	r9
     438:	0f 90       	pop	r0
     43a:	0b be       	out	0x3b, r0	; 59
     43c:	0f 90       	pop	r0
     43e:	0f be       	out	0x3f, r0	; 63
     440:	0f 90       	pop	r0
     442:	1f 90       	pop	r1
     444:	18 95       	reti

00000446 <init_pwm>:

void init_pwm(void)
{
	PORTC.OUTCLR = PIN0_bm;
     446:	a0 e4       	ldi	r26, 0x40	; 64
     448:	b6 e0       	ldi	r27, 0x06	; 6
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	16 96       	adiw	r26, 0x06	; 6
     44e:	9c 93       	st	X, r25
     450:	16 97       	sbiw	r26, 0x06	; 6
	PORTF.OUTCLR = PIN1_bm|PIN0_bm;
     452:	e0 ea       	ldi	r30, 0xA0	; 160
     454:	f6 e0       	ldi	r31, 0x06	; 6
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN0_bm;               // PC0 output (blue)
     45a:	11 96       	adiw	r26, 0x01	; 1
     45c:	9c 93       	st	X, r25
	PORTF.DIRSET = PIN0_bm|PIN1_bm;       // PF0, PF1  output (green red)
     45e:	81 83       	std	Z+1, r24	; 0x01

	TCC0.CTRLB   = TC0_CCAEN_bm | TC_WGMODE_SINGLESLOPE_gc;
     460:	e0 e0       	ldi	r30, 0x00	; 0
     462:	f8 e0       	ldi	r31, 0x08	; 8
     464:	83 e1       	ldi	r24, 0x13	; 19
     466:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLA   = TC_CLKSEL_DIV8_gc;    // f = FCPU/(N*PER) = 32M/(8*20000) = 200 Hz
     468:	24 e0       	ldi	r18, 0x04	; 4
     46a:	20 83       	st	Z, r18
	TCC0.PER     = 20000;
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	9e e4       	ldi	r25, 0x4E	; 78
     470:	86 a3       	std	Z+38, r24	; 0x26
     472:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA     = 0;
     474:	10 a6       	std	Z+40, r1	; 0x28
     476:	11 a6       	std	Z+41, r1	; 0x29

	TCF0.CTRLB   = TC0_CCAEN_bm | TC0_CCBEN_bm  | TC_WGMODE_SINGLESLOPE_gc;
     478:	e0 e0       	ldi	r30, 0x00	; 0
     47a:	fb e0       	ldi	r31, 0x0B	; 11
     47c:	33 e3       	ldi	r19, 0x33	; 51
     47e:	31 83       	std	Z+1, r19	; 0x01
	TCF0.CTRLA   = TC_CLKSEL_DIV8_gc;
     480:	20 83       	st	Z, r18
	TCF0.PER     = 20000;
     482:	86 a3       	std	Z+38, r24	; 0x26
     484:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CCA     = 0;
     486:	10 a6       	std	Z+40, r1	; 0x28
     488:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB     = 0;
     48a:	12 a6       	std	Z+42, r1	; 0x2a
     48c:	13 a6       	std	Z+43, r1	; 0x2b
     48e:	08 95       	ret

00000490 <init_nrf>:
}

void init_nrf(void)
{
	nrfspiInit();
     490:	0e 94 88 06 	call	0xd10	; 0xd10 <nrfspiInit>
	// Check SPI Connection
	if (nrfVerifySPIConnection())   PORTF.OUTSET = PIN0_bm;
     494:	0e 94 69 06 	call	0xcd2	; 0xcd2 <nrfVerifySPIConnection>
     498:	88 23       	and	r24, r24
     49a:	21 f0       	breq	.+8      	; 0x4a4 <init_nrf+0x14>
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <init_nrf+0x1a>
	else                             PORTF.OUTSET = PIN1_bm;
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

	nrfBegin();
     4aa:	0e 94 40 06 	call	0xc80	; 0xc80 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc, NRF_SETUP_ARC_8RETRANSMIT_gc);
     4ae:	68 e0       	ldi	r22, 0x08	; 8
     4b0:	80 e3       	ldi	r24, 0x30	; 48
     4b2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <nrfSetRetries>
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);
     4b6:	84 e0       	ldi	r24, 0x04	; 4
     4b8:	0e 94 b2 05 	call	0xb64	; 0xb64 <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);
     4bc:	80 e2       	ldi	r24, 0x20	; 32
     4be:	0e 94 c0 05 	call	0xb80	; 0xb80 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);
     4c2:	8c e0       	ldi	r24, 0x0C	; 12
     4c4:	0e 94 d6 05 	call	0xbac	; 0xbac <nrfSetCRCLength>
	nrfSetChannel(48);
     4c8:	80 e3       	ldi	r24, 0x30	; 48
     4ca:	0e 94 9a 05 	call	0xb34	; 0xb34 <nrfSetChannel>
	nrfSetAutoAck(1);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <nrfSetAutoAck>
	nrfEnableDynamicPayloads();
     4d4:	0e 94 65 05 	call	0xaca	; 0xaca <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();
     4d8:	0e 94 3b 06 	call	0xc76	; 0xc76 <nrfClearInterruptBits>
	nrfFlushRx();
     4dc:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfFlushRx>
	nrfFlushTx();
     4e0:	0e 94 4e 04 	call	0x89c	; 0x89c <nrfFlushTx>

	// Interrupt Pin
	PORTF.INT0MASK |= PIN6_bm;
     4e4:	e0 ea       	ldi	r30, 0xA0	; 160
     4e6:	f6 e0       	ldi	r31, 0x06	; 6
     4e8:	82 85       	ldd	r24, Z+10	; 0x0a
     4ea:	80 64       	ori	r24, 0x40	; 64
     4ec:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.INTCTRL   = (PORTF.INTCTRL & ~PORT_INT0LVL_gm) |
     4f2:	81 85       	ldd	r24, Z+9	; 0x09
     4f4:	8c 7f       	andi	r24, 0xFC	; 252
     4f6:	81 60       	ori	r24, 0x01	; 1
     4f8:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT0LVL_LO_gc;

	nrfOpenWritingPipe(pipes[0]);
     4fa:	83 e1       	ldi	r24, 0x13	; 19
     4fc:	90 e2       	ldi	r25, 0x20	; 32
     4fe:	0e 94 ef 04 	call	0x9de	; 0x9de <nrfOpenWritingPipe>
	nrfOpenReadingPipe(1,pipes[1]);
     502:	69 e1       	ldi	r22, 0x19	; 25
     504:	70 e2       	ldi	r23, 0x20	; 32
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	0e 94 0d 05 	call	0xa1a	; 0xa1a <nrfOpenReadingPipe>
     50c:	08 95       	ret

0000050e <getLine>:
}

uint8_t getLine(char *s)
{
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	8c 01       	movw	r16, r24
	uint8_t c;
	uint8_t i = 0;
     51a:	c0 e0       	ldi	r28, 0x00	; 0

	while ( (c = getchar()) != '\r') {
     51c:	0f 2e       	mov	r0, r31
     51e:	fd e6       	ldi	r31, 0x6D	; 109
     520:	ef 2e       	mov	r14, r31
     522:	f3 e2       	ldi	r31, 0x23	; 35
     524:	ff 2e       	mov	r15, r31
     526:	f0 2d       	mov	r31, r0
     528:	04 c0       	rjmp	.+8      	; 0x532 <getLine+0x24>
		*s = c;
     52a:	f8 01       	movw	r30, r16
     52c:	81 93       	st	Z+, r24
     52e:	8f 01       	movw	r16, r30
		s++;
		i++;
     530:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t getLine(char *s)
{
	uint8_t c;
	uint8_t i = 0;

	while ( (c = getchar()) != '\r') {
     532:	f7 01       	movw	r30, r14
     534:	80 81       	ld	r24, Z
     536:	91 81       	ldd	r25, Z+1	; 0x01
     538:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <fgetc>
     53c:	8d 30       	cpi	r24, 0x0D	; 13
     53e:	a9 f7       	brne	.-22     	; 0x52a <getLine+0x1c>
		*s = c;
		s++;
		i++;
	}
	*s = '\0';
     540:	f8 01       	movw	r30, r16
     542:	10 82       	st	Z, r1

	return i;
}
     544:	8c 2f       	mov	r24, r28
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	08 95       	ret

00000552 <nrfSendCommand>:

void nrfSendCommand(char *command)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	ec 01       	movw	r28, r24
	nrfStopListening();
     558:	0e 94 92 04 	call	0x924	; 0x924 <nrfStopListening>
	nrfWrite( (uint8_t *) command, strlen(command) );
     55c:	fe 01       	movw	r30, r28
     55e:	01 90       	ld	r0, Z+
     560:	00 20       	and	r0, r0
     562:	e9 f7       	brne	.-6      	; 0x55e <nrfSendCommand+0xc>
     564:	31 97       	sbiw	r30, 0x01	; 1
     566:	bf 01       	movw	r22, r30
     568:	6c 1b       	sub	r22, r28
     56a:	7d 0b       	sbc	r23, r29
     56c:	ce 01       	movw	r24, r28
     56e:	0e 94 35 06 	call	0xc6a	; 0xc6a <nrfWrite>
     572:	8f e3       	ldi	r24, 0x3F	; 63
     574:	9c e9       	ldi	r25, 0x9C	; 156
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <nrfSendCommand+0x24>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <nrfSendCommand+0x2a>
     57c:	00 00       	nop
	_delay_ms(5);
	nrfStartListening();
     57e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <nrfStartListening>
     582:	8f e3       	ldi	r24, 0x3F	; 63
     584:	9c e9       	ldi	r25, 0x9C	; 156
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <nrfSendCommand+0x34>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <nrfSendCommand+0x3a>
     58c:	00 00       	nop
	_delay_ms(5);
}
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <main>:

int main(void)
{
	uint16_t length;

	Config32MHzClock_Ext16M();
     594:	0e 94 25 01 	call	0x24a	; 0x24a <Config32MHzClock_Ext16M>

	init_pwm();
     598:	0e 94 23 02 	call	0x446	; 0x446 <init_pwm>
	init_nrf();
     59c:	0e 94 48 02 	call	0x490	; 0x490 <init_nrf>

	init_stream(F_CPU);
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	78 e4       	ldi	r23, 0x48	; 72
     5a4:	88 ee       	ldi	r24, 0xE8	; 232
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 25 07 	call	0xe4a	; 0xe4a <init_stream>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     5ac:	e0 ea       	ldi	r30, 0xA0	; 160
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	82 81       	ldd	r24, Z+2	; 0x02
     5b2:	81 60       	ori	r24, 0x01	; 1
     5b4:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5b6:	78 94       	sei

	clear_screen();
     5b8:	82 e5       	ldi	r24, 0x52	; 82
     5ba:	90 e2       	ldi	r25, 0x20	; 32
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <printf>
	printf("Master\n");
     5c4:	8e e5       	ldi	r24, 0x5E	; 94
     5c6:	90 e2       	ldi	r25, 0x20	; 32
     5c8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <puts>

	nrfStartListening();
     5cc:	0e 94 5d 04 	call	0x8ba	; 0x8ba <nrfStartListening>
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
					printf("Toggled sensor S%d, status: %d\n", sensor_id_index, blacklist[sensor_id_index]);
					nrfSendCommand("Toggled sensor!");
					continue;
				}

				printf("sent: %s\n", buffer);
     5d4:	05 e9       	ldi	r16, 0x95	; 149
     5d6:	10 e2       	ldi	r17, 0x20	; 32
				
				if (buffer[0]=='S' || buffer[0]=='s')
				{
					int sensor_id_index = buffer[1] - 48;
					blacklist[sensor_id_index]=blacklist[sensor_id_index]*-1;
					printf("Toggled sensor S%d, status: %d\n", sensor_id_index, blacklist[sensor_id_index]);
     5d8:	c5 e6       	ldi	r28, 0x65	; 101
     5da:	d0 e2       	ldi	r29, 0x20	; 32
	printf("Master\n");

	nrfStartListening();
	
	while (1) {
		if (sending) {
     5dc:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sending>
     5e0:	88 23       	and	r24, r24
     5e2:	e1 f3       	breq	.-8      	; 0x5dc <main+0x48>
			if ( (length = getLine(buffer)) > 0) {
     5e4:	82 ee       	ldi	r24, 0xE2	; 226
     5e6:	90 e2       	ldi	r25, 0x20	; 32
     5e8:	0e 94 87 02 	call	0x50e	; 0x50e <getLine>
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	a9 f3       	breq	.-22     	; 0x5dc <main+0x48>
				buffer[length] = '\0';
     5f2:	fc 01       	movw	r30, r24
     5f4:	ee 51       	subi	r30, 0x1E	; 30
     5f6:	ff 4d       	sbci	r31, 0xDF	; 223
     5f8:	10 82       	st	Z, r1
				
				if (buffer[0]=='S' || buffer[0]=='s')
     5fa:	80 91 e2 20 	lds	r24, 0x20E2	; 0x8020e2 <buffer>
     5fe:	8f 7d       	andi	r24, 0xDF	; 223
     600:	83 35       	cpi	r24, 0x53	; 83
     602:	19 f5       	brne	.+70     	; 0x64a <main+0xb6>
				{
					int sensor_id_index = buffer[1] - 48;
     604:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <buffer+0x1>
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	c0 97       	sbiw	r24, 0x30	; 48
					blacklist[sensor_id_index]=blacklist[sensor_id_index]*-1;
     60c:	fc 01       	movw	r30, r24
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	e9 5f       	subi	r30, 0xF9	; 249
     614:	ff 4d       	sbci	r31, 0xDF	; 223
     616:	20 81       	ld	r18, Z
     618:	31 81       	ldd	r19, Z+1	; 0x01
     61a:	31 95       	neg	r19
     61c:	21 95       	neg	r18
     61e:	31 09       	sbc	r19, r1
     620:	20 83       	st	Z, r18
     622:	31 83       	std	Z+1, r19	; 0x01
					printf("Toggled sensor S%d, status: %d\n", sensor_id_index, blacklist[sensor_id_index]);
     624:	3f 93       	push	r19
     626:	2f 93       	push	r18
     628:	9f 93       	push	r25
     62a:	8f 93       	push	r24
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <printf>
					nrfSendCommand("Toggled sensor!");
     634:	85 e8       	ldi	r24, 0x85	; 133
     636:	90 e2       	ldi	r25, 0x20	; 32
     638:	0e 94 a9 02 	call	0x552	; 0x552 <nrfSendCommand>
					continue;
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	c9 cf       	rjmp	.-110    	; 0x5dc <main+0x48>
				}

				printf("sent: %s\n", buffer);
     64a:	82 ee       	ldi	r24, 0xE2	; 226
     64c:	90 e2       	ldi	r25, 0x20	; 32
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	1f 93       	push	r17
     654:	0f 93       	push	r16
     656:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <printf>
				nrfSendCommand(buffer);
     65a:	82 ee       	ldi	r24, 0xE2	; 226
     65c:	90 e2       	ldi	r25, 0x20	; 32
     65e:	0e 94 a9 02 	call	0x552	; 0x552 <nrfSendCommand>
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	b8 cf       	rjmp	.-144    	; 0x5dc <main+0x48>

0000066c <nrfReadRegister>:
 * \brief   Disbale CRC
 */
void nrfDisableCRC( void )
{
  uint8_t config = nrfReadRegister(REG_CONFIG) & ~NRF_CONFIG_EN_CRC_bm;
  nrfWriteRegister( REG_CONFIG, config );
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	c0 ea       	ldi	r28, 0xA0	; 160
     674:	d6 e0       	ldi	r29, 0x06	; 6
     676:	10 e2       	ldi	r17, 0x20	; 32
     678:	1e 83       	std	Y+6, r17	; 0x06
     67a:	8f 71       	andi	r24, 0x1F	; 31
     67c:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     680:	8f ef       	ldi	r24, 0xFF	; 255
     682:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     686:	1d 83       	std	Y+5, r17	; 0x05
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	08 95       	ret

00000690 <nrfWriteRegisterMulti>:
     690:	df 92       	push	r13
     692:	ef 92       	push	r14
     694:	ff 92       	push	r15
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	7b 01       	movw	r14, r22
     6a0:	c4 2f       	mov	r28, r20
     6a2:	90 e2       	ldi	r25, 0x20	; 32
     6a4:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     6a8:	8f 71       	andi	r24, 0x1F	; 31
     6aa:	80 62       	ori	r24, 0x20	; 32
     6ac:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     6b0:	d8 2e       	mov	r13, r24
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
     6b4:	8c 0f       	add	r24, r28
     6b6:	cc 23       	and	r28, r28
     6b8:	69 f0       	breq	.+26     	; 0x6d4 <nrfWriteRegisterMulti+0x44>
     6ba:	e7 01       	movw	r28, r14
     6bc:	08 2f       	mov	r16, r24
     6be:	10 e0       	ldi	r17, 0x00	; 0
     6c0:	0f 5f       	subi	r16, 0xFF	; 255
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	0e 0d       	add	r16, r14
     6c6:	1f 1d       	adc	r17, r15
     6c8:	89 91       	ld	r24, Y+
     6ca:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     6ce:	c0 17       	cp	r28, r16
     6d0:	d1 07       	cpc	r29, r17
     6d2:	d1 f7       	brne	.-12     	; 0x6c8 <nrfWriteRegisterMulti+0x38>
     6d4:	80 e2       	ldi	r24, 0x20	; 32
     6d6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     6da:	8d 2d       	mov	r24, r13
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	08 95       	ret

000006ec <nrfWriteRegister>:
     6ec:	ff 92       	push	r15
     6ee:	0f 93       	push	r16
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	f6 2e       	mov	r15, r22
     6f8:	c0 ea       	ldi	r28, 0xA0	; 160
     6fa:	d6 e0       	ldi	r29, 0x06	; 6
     6fc:	10 e2       	ldi	r17, 0x20	; 32
     6fe:	1e 83       	std	Y+6, r17	; 0x06
     700:	8f 71       	andi	r24, 0x1F	; 31
     702:	80 62       	ori	r24, 0x20	; 32
     704:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     708:	08 2f       	mov	r16, r24
     70a:	8f 2d       	mov	r24, r15
     70c:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     710:	1d 83       	std	Y+5, r17	; 0x05
     712:	80 2f       	mov	r24, r16
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	08 95       	ret

00000720 <nrfWritePayload>:
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	6c 01       	movw	r12, r24
     734:	84 2f       	mov	r24, r20
     736:	c0 91 20 20 	lds	r28, 0x2020	; 0x802020 <fixed_payload_size>
     73a:	1c 2f       	mov	r17, r28
     73c:	6c 17       	cp	r22, r28
     73e:	08 f4       	brcc	.+2      	; 0x742 <nrfWritePayload+0x22>
     740:	16 2f       	mov	r17, r22
     742:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <dynamic_payloads_enabled>
     746:	91 11       	cpse	r25, r1
     748:	25 c0       	rjmp	.+74     	; 0x794 <nrfWritePayload+0x74>
     74a:	0c 2f       	mov	r16, r28
     74c:	01 1b       	sub	r16, r17
     74e:	90 e2       	ldi	r25, 0x20	; 32
     750:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     754:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     758:	b8 2e       	mov	r11, r24
     75a:	ee 24       	eor	r14, r14
     75c:	ea 94       	dec	r14
     75e:	e1 0e       	add	r14, r17
     760:	11 11       	cpse	r17, r1
     762:	02 c0       	rjmp	.+4      	; 0x768 <nrfWritePayload+0x48>
     764:	0e c0       	rjmp	.+28     	; 0x782 <nrfWritePayload+0x62>
     766:	00 e0       	ldi	r16, 0x00	; 0
     768:	e6 01       	movw	r28, r12
     76a:	f1 2c       	mov	r15, r1
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	e8 1a       	sub	r14, r24
     770:	f8 0a       	sbc	r15, r24
     772:	ec 0c       	add	r14, r12
     774:	fd 1c       	adc	r15, r13
     776:	89 91       	ld	r24, Y+
     778:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     77c:	ec 16       	cp	r14, r28
     77e:	fd 06       	cpc	r15, r29
     780:	d1 f7       	brne	.-12     	; 0x776 <nrfWritePayload+0x56>
     782:	00 23       	and	r16, r16
     784:	91 f0       	breq	.+36     	; 0x7aa <nrfWritePayload+0x8a>
     786:	c0 2f       	mov	r28, r16
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     78e:	c1 50       	subi	r28, 0x01	; 1
     790:	d9 f7       	brne	.-10     	; 0x788 <nrfWritePayload+0x68>
     792:	0b c0       	rjmp	.+22     	; 0x7aa <nrfWritePayload+0x8a>
     794:	90 e2       	ldi	r25, 0x20	; 32
     796:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     79a:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     79e:	b8 2e       	mov	r11, r24
     7a0:	ee 24       	eor	r14, r14
     7a2:	ea 94       	dec	r14
     7a4:	e1 0e       	add	r14, r17
     7a6:	11 11       	cpse	r17, r1
     7a8:	de cf       	rjmp	.-68     	; 0x766 <nrfWritePayload+0x46>
     7aa:	80 e2       	ldi	r24, 0x20	; 32
     7ac:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     7b0:	8b 2d       	mov	r24, r11
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	df 90       	pop	r13
     7c0:	cf 90       	pop	r12
     7c2:	bf 90       	pop	r11
     7c4:	08 95       	ret

000007c6 <nrfReadPayload>:
     7c6:	bf 92       	push	r11
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	6c 01       	movw	r12, r24
     7da:	c0 91 20 20 	lds	r28, 0x2020	; 0x802020 <fixed_payload_size>
     7de:	1c 2f       	mov	r17, r28
     7e0:	6c 17       	cp	r22, r28
     7e2:	08 f4       	brcc	.+2      	; 0x7e6 <nrfReadPayload+0x20>
     7e4:	16 2f       	mov	r17, r22
     7e6:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <dynamic_payloads_enabled>
     7ea:	81 11       	cpse	r24, r1
     7ec:	27 c0       	rjmp	.+78     	; 0x83c <nrfReadPayload+0x76>
     7ee:	0c 2f       	mov	r16, r28
     7f0:	01 1b       	sub	r16, r17
     7f2:	80 e2       	ldi	r24, 0x20	; 32
     7f4:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     7f8:	81 e6       	ldi	r24, 0x61	; 97
     7fa:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     7fe:	b8 2e       	mov	r11, r24
     800:	ee 24       	eor	r14, r14
     802:	ea 94       	dec	r14
     804:	e1 0e       	add	r14, r17
     806:	11 11       	cpse	r17, r1
     808:	02 c0       	rjmp	.+4      	; 0x80e <nrfReadPayload+0x48>
     80a:	0f c0       	rjmp	.+30     	; 0x82a <nrfReadPayload+0x64>
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	e6 01       	movw	r28, r12
     810:	f1 2c       	mov	r15, r1
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	e8 1a       	sub	r14, r24
     816:	f8 0a       	sbc	r15, r24
     818:	ec 0c       	add	r14, r12
     81a:	fd 1c       	adc	r15, r13
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     822:	89 93       	st	Y+, r24
     824:	ec 16       	cp	r14, r28
     826:	fd 06       	cpc	r15, r29
     828:	c9 f7       	brne	.-14     	; 0x81c <nrfReadPayload+0x56>
     82a:	00 23       	and	r16, r16
     82c:	99 f0       	breq	.+38     	; 0x854 <nrfReadPayload+0x8e>
     82e:	c0 2f       	mov	r28, r16
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     836:	c1 50       	subi	r28, 0x01	; 1
     838:	d9 f7       	brne	.-10     	; 0x830 <nrfReadPayload+0x6a>
     83a:	0c c0       	rjmp	.+24     	; 0x854 <nrfReadPayload+0x8e>
     83c:	80 e2       	ldi	r24, 0x20	; 32
     83e:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     842:	81 e6       	ldi	r24, 0x61	; 97
     844:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     848:	b8 2e       	mov	r11, r24
     84a:	ee 24       	eor	r14, r14
     84c:	ea 94       	dec	r14
     84e:	e1 0e       	add	r14, r17
     850:	11 11       	cpse	r17, r1
     852:	dc cf       	rjmp	.-72     	; 0x80c <nrfReadPayload+0x46>
     854:	80 e2       	ldi	r24, 0x20	; 32
     856:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     85a:	8b 2d       	mov	r24, r11
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <nrfRead>:
     870:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <nrfReadPayload>
     874:	87 e1       	ldi	r24, 0x17	; 23
     876:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	08 95       	ret

0000087e <nrfFlushRx>:
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	c0 ea       	ldi	r28, 0xA0	; 160
     886:	d6 e0       	ldi	r29, 0x06	; 6
     888:	10 e2       	ldi	r17, 0x20	; 32
     88a:	1e 83       	std	Y+6, r17	; 0x06
     88c:	82 ee       	ldi	r24, 0xE2	; 226
     88e:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     892:	1d 83       	std	Y+5, r17	; 0x05
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	08 95       	ret

0000089c <nrfFlushTx>:
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	c0 ea       	ldi	r28, 0xA0	; 160
     8a4:	d6 e0       	ldi	r29, 0x06	; 6
     8a6:	10 e2       	ldi	r17, 0x20	; 32
     8a8:	1e 83       	std	Y+6, r17	; 0x06
     8aa:	81 ee       	ldi	r24, 0xE1	; 225
     8ac:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     8b0:	1d 83       	std	Y+5, r17	; 0x05
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	08 95       	ret

000008ba <nrfStartListening>:
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     8c0:	81 fd       	sbrc	r24, 1
     8c2:	0c c0       	rjmp	.+24     	; 0x8dc <nrfStartListening+0x22>
     8c4:	68 2f       	mov	r22, r24
     8c6:	63 60       	ori	r22, 0x03	; 3
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     8ce:	8f e7       	ldi	r24, 0x7F	; 127
     8d0:	9e e3       	ldi	r25, 0x3E	; 62
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <nrfStartListening+0x18>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <nrfStartListening+0x1e>
     8d8:	00 00       	nop
     8da:	05 c0       	rjmp	.+10     	; 0x8e6 <nrfStartListening+0x2c>
     8dc:	68 2f       	mov	r22, r24
     8de:	61 60       	ori	r22, 0x01	; 1
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     8e6:	8f e0       	ldi	r24, 0x0F	; 15
     8e8:	94 e0       	ldi	r25, 0x04	; 4
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <nrfStartListening+0x30>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <nrfStartListening+0x36>
     8f0:	00 00       	nop
     8f2:	60 e7       	ldi	r22, 0x70	; 112
     8f4:	87 e0       	ldi	r24, 0x07	; 7
     8f6:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     8fa:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     8fe:	6c eb       	ldi	r22, 0xBC	; 188
     900:	70 e2       	ldi	r23, 0x20	; 32
     902:	8a e0       	ldi	r24, 0x0A	; 10
     904:	0e 94 48 03 	call	0x690	; 0x690 <nrfWriteRegisterMulti>
     908:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfFlushRx>
     90c:	0e 94 4e 04 	call	0x89c	; 0x89c <nrfFlushTx>
     910:	80 e8       	ldi	r24, 0x80	; 128
     912:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     916:	8f e0       	ldi	r24, 0x0F	; 15
     918:	94 e0       	ldi	r25, 0x04	; 4
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	f1 f7       	brne	.-4      	; 0x91a <nrfStartListening+0x60>
     91e:	00 c0       	rjmp	.+0      	; 0x920 <nrfStartListening+0x66>
     920:	00 00       	nop
     922:	08 95       	ret

00000924 <nrfStopListening>:
     924:	80 e8       	ldi	r24, 0x80	; 128
     926:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     92a:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfFlushRx>
     92e:	0e 94 4e 04 	call	0x89c	; 0x89c <nrfFlushTx>
     932:	08 95       	ret

00000934 <nrfStartWrite>:
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	16 2f       	mov	r17, r22
     940:	04 2f       	mov	r16, r20
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     948:	81 fd       	sbrc	r24, 1
     94a:	0d c0       	rjmp	.+26     	; 0x966 <nrfStartWrite+0x32>
     94c:	68 2f       	mov	r22, r24
     94e:	6e 7f       	andi	r22, 0xFE	; 254
     950:	62 60       	ori	r22, 0x02	; 2
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     958:	8f e7       	ldi	r24, 0x7F	; 127
     95a:	9e e3       	ldi	r25, 0x3E	; 62
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	f1 f7       	brne	.-4      	; 0x95c <nrfStartWrite+0x28>
     960:	00 c0       	rjmp	.+0      	; 0x962 <nrfStartWrite+0x2e>
     962:	00 00       	nop
     964:	05 c0       	rjmp	.+10     	; 0x970 <nrfStartWrite+0x3c>
     966:	68 2f       	mov	r22, r24
     968:	6e 7f       	andi	r22, 0xFE	; 254
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     970:	8f e0       	ldi	r24, 0x0F	; 15
     972:	94 e0       	ldi	r25, 0x04	; 4
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <nrfStartWrite+0x40>
     978:	00 c0       	rjmp	.+0      	; 0x97a <nrfStartWrite+0x46>
     97a:	00 00       	nop
     97c:	40 2f       	mov	r20, r16
     97e:	61 2f       	mov	r22, r17
     980:	ce 01       	movw	r24, r28
     982:	0e 94 90 03 	call	0x720	; 0x720 <nrfWritePayload>
     986:	e0 ea       	ldi	r30, 0xA0	; 160
     988:	f6 e0       	ldi	r31, 0x06	; 6
     98a:	80 e8       	ldi	r24, 0x80	; 128
     98c:	85 83       	std	Z+5, r24	; 0x05
     98e:	9a e6       	ldi	r25, 0x6A	; 106
     990:	9a 95       	dec	r25
     992:	f1 f7       	brne	.-4      	; 0x990 <nrfStartWrite+0x5c>
     994:	00 c0       	rjmp	.+0      	; 0x996 <nrfStartWrite+0x62>
     996:	86 83       	std	Z+6, r24	; 0x06
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <nrfWhatHappened>:
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	7c 01       	movw	r14, r24
     9b0:	8b 01       	movw	r16, r22
     9b2:	ea 01       	movw	r28, r20
     9b4:	60 e7       	ldi	r22, 0x70	; 112
     9b6:	87 e0       	ldi	r24, 0x07	; 7
     9b8:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     9bc:	98 2f       	mov	r25, r24
     9be:	90 72       	andi	r25, 0x20	; 32
     9c0:	f7 01       	movw	r30, r14
     9c2:	90 83       	st	Z, r25
     9c4:	98 2f       	mov	r25, r24
     9c6:	90 71       	andi	r25, 0x10	; 16
     9c8:	f8 01       	movw	r30, r16
     9ca:	90 83       	st	Z, r25
     9cc:	80 74       	andi	r24, 0x40	; 64
     9ce:	88 83       	st	Y, r24
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	08 95       	ret

000009de <nrfOpenWritingPipe>:
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	ec 01       	movw	r28, r24
     9e4:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     9e8:	bc 01       	movw	r22, r24
     9ea:	8a e0       	ldi	r24, 0x0A	; 10
     9ec:	0e 94 48 03 	call	0x690	; 0x690 <nrfWriteRegisterMulti>
     9f0:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     9f4:	be 01       	movw	r22, r28
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	0e 94 48 03 	call	0x690	; 0x690 <nrfWriteRegisterMulti>
     9fc:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <fixed_payload_size>
     a00:	60 32       	cpi	r22, 0x20	; 32
     a02:	20 f4       	brcc	.+8      	; 0xa0c <nrfOpenWritingPipe+0x2e>
     a04:	81 e1       	ldi	r24, 0x11	; 17
     a06:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <nrfOpenWritingPipe+0x36>
     a0c:	60 e2       	ldi	r22, 0x20	; 32
     a0e:	81 e1       	ldi	r24, 0x11	; 17
     a10:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <nrfOpenReadingPipe>:
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	c8 2f       	mov	r28, r24
     a24:	8b 01       	movw	r16, r22
     a26:	81 11       	cpse	r24, r1
     a28:	08 c0       	rjmp	.+16     	; 0xa3a <nrfOpenReadingPipe+0x20>
     a2a:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	8c eb       	ldi	r24, 0xBC	; 188
     a32:	90 e2       	ldi	r25, 0x20	; 32
     a34:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <memcpy>
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <nrfOpenReadingPipe+0x28>
     a3a:	87 30       	cpi	r24, 0x07	; 7
     a3c:	78 f5       	brcc	.+94     	; 0xa9c <nrfOpenReadingPipe+0x82>
     a3e:	82 30       	cpi	r24, 0x02	; 2
     a40:	58 f4       	brcc	.+22     	; 0xa58 <nrfOpenReadingPipe+0x3e>
     a42:	ec 2f       	mov	r30, r28
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	eb 54       	subi	r30, 0x4B	; 75
     a48:	ff 4d       	sbci	r31, 0xDF	; 223
     a4a:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     a4e:	b8 01       	movw	r22, r16
     a50:	80 81       	ld	r24, Z
     a52:	0e 94 48 03 	call	0x690	; 0x690 <nrfWriteRegisterMulti>
     a56:	08 c0       	rjmp	.+16     	; 0xa68 <nrfOpenReadingPipe+0x4e>
     a58:	e8 2f       	mov	r30, r24
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	eb 54       	subi	r30, 0x4B	; 75
     a5e:	ff 4d       	sbci	r31, 0xDF	; 223
     a60:	41 e0       	ldi	r20, 0x01	; 1
     a62:	80 81       	ld	r24, Z
     a64:	0e 94 48 03 	call	0x690	; 0x690 <nrfWriteRegisterMulti>
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	fe 01       	movw	r30, r28
     a6c:	e1 55       	subi	r30, 0x51	; 81
     a6e:	ff 4d       	sbci	r31, 0xDF	; 223
     a70:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <fixed_payload_size>
     a74:	80 81       	ld	r24, Z
     a76:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     a80:	c7 55       	subi	r28, 0x57	; 87
     a82:	df 4d       	sbci	r29, 0xDF	; 223
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	08 80       	ld	r0, Y
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <nrfOpenReadingPipe+0x76>
     a8c:	66 0f       	add	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <nrfOpenReadingPipe+0x72>
     a94:	68 2b       	or	r22, r24
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	1f 91       	pop	r17
     aa2:	0f 91       	pop	r16
     aa4:	08 95       	ret

00000aa6 <nrfToggleFeatures>:
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	c0 ea       	ldi	r28, 0xA0	; 160
     aae:	d6 e0       	ldi	r29, 0x06	; 6
     ab0:	10 e2       	ldi	r17, 0x20	; 32
     ab2:	1e 83       	std	Y+6, r17	; 0x06
     ab4:	80 e5       	ldi	r24, 0x50	; 80
     ab6:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     aba:	83 e7       	ldi	r24, 0x73	; 115
     abc:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     ac0:	1d 83       	std	Y+5, r17	; 0x05
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	08 95       	ret

00000aca <nrfEnableDynamicPayloads>:
     aca:	8d e1       	ldi	r24, 0x1D	; 29
     acc:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     ad0:	68 2f       	mov	r22, r24
     ad2:	64 60       	ori	r22, 0x04	; 4
     ad4:	8d e1       	ldi	r24, 0x1D	; 29
     ad6:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     ada:	8d e1       	ldi	r24, 0x1D	; 29
     adc:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     ae0:	81 11       	cpse	r24, r1
     ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <nrfEnableDynamicPayloads+0x2e>
     ae4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <nrfToggleFeatures>
     ae8:	8d e1       	ldi	r24, 0x1D	; 29
     aea:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     aee:	68 2f       	mov	r22, r24
     af0:	64 60       	ori	r22, 0x04	; 4
     af2:	8d e1       	ldi	r24, 0x1D	; 29
     af4:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     af8:	8c e1       	ldi	r24, 0x1C	; 28
     afa:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     afe:	68 2f       	mov	r22, r24
     b00:	6f 63       	ori	r22, 0x3F	; 63
     b02:	8c e1       	ldi	r24, 0x1C	; 28
     b04:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <dynamic_payloads_enabled>
     b0e:	08 95       	ret

00000b10 <nrfGetDynamicPayloadSize>:
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	c0 ea       	ldi	r28, 0xA0	; 160
     b18:	d6 e0       	ldi	r29, 0x06	; 6
     b1a:	10 e2       	ldi	r17, 0x20	; 32
     b1c:	1e 83       	std	Y+6, r17	; 0x06
     b1e:	80 e6       	ldi	r24, 0x60	; 96
     b20:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	0e 94 a2 06 	call	0xd44	; 0xd44 <nrfspiTransfer>
     b2a:	1d 83       	std	Y+5, r17	; 0x05
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	1f 91       	pop	r17
     b32:	08 95       	ret

00000b34 <nrfSetChannel>:
     b34:	88 23       	and	r24, r24
     b36:	2c f0       	brlt	.+10     	; 0xb42 <nrfSetChannel+0xe>
     b38:	68 2f       	mov	r22, r24
     b3a:	85 e0       	ldi	r24, 0x05	; 5
     b3c:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b40:	08 95       	ret
     b42:	6f e7       	ldi	r22, 0x7F	; 127
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b4a:	08 95       	ret

00000b4c <nrfSetAutoAck>:
     b4c:	88 23       	and	r24, r24
     b4e:	29 f0       	breq	.+10     	; 0xb5a <nrfSetAutoAck+0xe>
     b50:	6f e3       	ldi	r22, 0x3F	; 63
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b58:	08 95       	ret
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b62:	08 95       	ret

00000b64 <nrfSetPALevel>:
     b64:	cf 93       	push	r28
     b66:	c8 2f       	mov	r28, r24
     b68:	86 e0       	ldi	r24, 0x06	; 6
     b6a:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     b6e:	89 7f       	andi	r24, 0xF9	; 249
     b70:	c6 70       	andi	r28, 0x06	; 6
     b72:	68 2f       	mov	r22, r24
     b74:	6c 2b       	or	r22, r28
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b7c:	cf 91       	pop	r28
     b7e:	08 95       	ret

00000b80 <nrfSetDataRate>:
     b80:	cf 93       	push	r28
     b82:	c8 2f       	mov	r28, r24
     b84:	86 e0       	ldi	r24, 0x06	; 6
     b86:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     b8a:	87 7d       	andi	r24, 0xD7	; 215
     b8c:	9c 2f       	mov	r25, r28
     b8e:	98 72       	andi	r25, 0x28	; 40
     b90:	68 2f       	mov	r22, r24
     b92:	69 2b       	or	r22, r25
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	c8 13       	cpse	r28, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	89 2f       	mov	r24, r25
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <nrfSetCRCLength>:
     bac:	cf 93       	push	r28
     bae:	c8 2f       	mov	r28, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     bb6:	83 7f       	andi	r24, 0xF3	; 243
     bb8:	cc 70       	andi	r28, 0x0C	; 12
     bba:	68 2f       	mov	r22, r24
     bbc:	6c 2b       	or	r22, r28
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <nrfSetRetries>:
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     bc8:	68 2b       	or	r22, r24
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     bd0:	08 95       	ret

00000bd2 <nrfGetMaxTimeout>:
 *
 * @return  maximum timeout in us
 */

uint16_t nrfGetMaxTimeout(void){
  uint8_t retries = nrfReadRegister(REG_SETUP_RETR);
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
  uint8_t delay   = (retries & NRF_SETUP_ARD_gm) >> NRF_SETUP_ARD_gp;
  uint8_t count   = (retries & NRF_SETUP_ARC_gm) >> NRF_SETUP_ARC_gp;

  uint16_t to = 250 * (delay + 1) * (count + 1);

  return to ;
     bd8:	28 2f       	mov	r18, r24
     bda:	22 95       	swap	r18
     bdc:	2f 70       	andi	r18, 0x0F	; 15
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	2f 5f       	subi	r18, 0xFF	; 255
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	9a ef       	ldi	r25, 0xFA	; 250
     be6:	92 9f       	mul	r25, r18
     be8:	a0 01       	movw	r20, r0
     bea:	93 9f       	mul	r25, r19
     bec:	50 0d       	add	r21, r0
     bee:	11 24       	eor	r1, r1
     bf0:	8f 70       	andi	r24, 0x0F	; 15
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	01 96       	adiw	r24, 0x01	; 1
}
     bf6:	9c 01       	movw	r18, r24
     bf8:	42 9f       	mul	r20, r18
     bfa:	c0 01       	movw	r24, r0
     bfc:	43 9f       	mul	r20, r19
     bfe:	90 0d       	add	r25, r0
     c00:	52 9f       	mul	r21, r18
     c02:	90 0d       	add	r25, r0
     c04:	11 24       	eor	r1, r1
     c06:	08 95       	ret

00000c08 <nrfWaitForAck>:
// from Wouter + nrfGetMaxTimeout()
// TODO?  iAckTimer zou ook een globale waarde kunnen zijn,
//        die bij init bepaald of bij setRetries gezet wordt
//        is nrfFlushRx nodig ??
uint8_t nrfWaitForAck(void)
{
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
     c0c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <nrfGetMaxTimeout>
     c10:	9c 01       	movw	r18, r24
     c12:	36 95       	lsr	r19
     c14:	27 95       	ror	r18
     c16:	36 95       	lsr	r19
     c18:	27 95       	ror	r18
     c1a:	ab e7       	ldi	r26, 0x7B	; 123
     c1c:	b4 e1       	ldi	r27, 0x14	; 20
     c1e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__umulhisi3>
     c22:	ec 01       	movw	r28, r24
     c24:	d6 95       	lsr	r29
     c26:	c7 95       	ror	r28
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     c28:	20 97       	sbiw	r28, 0x00	; 0
     c2a:	71 f0       	breq	.+28     	; 0xc48 <nrfWaitForAck+0x40>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     c2c:	87 e0       	ldi	r24, 0x07	; 7
     c2e:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
    iAckTimer--;
     c32:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c34:	ef e1       	ldi	r30, 0x1F	; 31
     c36:	f3 e0       	ldi	r31, 0x03	; 3
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <nrfWaitForAck+0x30>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <nrfWaitForAck+0x36>
     c3e:	00 00       	nop
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     c40:	80 73       	andi	r24, 0x30	; 48
     c42:	11 f4       	brne	.+4      	; 0xc48 <nrfWaitForAck+0x40>
     c44:	20 97       	sbiw	r28, 0x00	; 0
     c46:	91 f7       	brne	.-28     	; 0xc2c <nrfWaitForAck+0x24>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
    iAckTimer--;
    _delay_us(100);
  }
  iSucces = nrfReadRegister(REG_STATUS) & NRF_STATUS_TX_DS_bm;
     c48:	87 e0       	ldi	r24, 0x07	; 7
     c4a:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     c4e:	c8 2f       	mov	r28, r24

  nrfFlushRx();       // ??
     c50:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfFlushRx>
  nrfFlushTx();       // Flush TX FIFO because of MAX_RT
     c54:	0e 94 4e 04 	call	0x89c	; 0x89c <nrfFlushTx>
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm|NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     c58:	60 e7       	ldi	r22, 0x70	; 112
     c5a:	87 e0       	ldi	r24, 0x07	; 7
     c5c:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>

  return(iSucces);    // Returns 32 on ACK received, 0 on time out
}
     c60:	8c 2f       	mov	r24, r28
     c62:	80 72       	andi	r24, 0x20	; 32
     c64:	df 91       	pop	r29
     c66:	cf 91       	pop	r28
     c68:	08 95       	ret

00000c6a <nrfWrite>:
uint8_t nrfWrite( uint8_t* buf, uint8_t len)
{
  uint8_t iReturn;

  //nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD_NO_ACK);
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);
     c6a:	40 ea       	ldi	r20, 0xA0	; 160
     c6c:	0e 94 9a 04 	call	0x934	; 0x934 <nrfStartWrite>

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out
     c70:	0e 94 04 06 	call	0xc08	; 0xc08 <nrfWaitForAck>

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     c74:	08 95       	ret

00000c76 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     c76:	60 e7       	ldi	r22, 0x70	; 112
     c78:	87 e0       	ldi	r24, 0x07	; 7
     c7a:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     c7e:	08 95       	ret

00000c80 <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c80:	8f e3       	ldi	r24, 0x3F	; 63
     c82:	9c e9       	ldi	r25, 0x9C	; 156
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <nrfBegin+0x4>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <nrfBegin+0xa>
     c8a:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     c8c:	6f e5       	ldi	r22, 0x5F	; 95
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     c94:	86 e0       	ldi	r24, 0x06	; 6
     c96:	0e 94 b2 05 	call	0xb64	; 0xb64 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	0e 94 c0 05 	call	0xb80	; 0xb80 <nrfSetDataRate>
     ca0:	88 23       	and	r24, r24
     ca2:	19 f0       	breq	.+6      	; 0xcaa <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 21 20 	sts	0x2021, r24	; 0x802021 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	0e 94 c0 05 	call	0xb80	; 0xb80 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     cb0:	8c e0       	ldi	r24, 0x0C	; 12
     cb2:	0e 94 d6 05 	call	0xbac	; 0xbac <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	8c e1       	ldi	r24, 0x1C	; 28
     cba:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     cbe:	8c e4       	ldi	r24, 0x4C	; 76
     cc0:	0e 94 9a 05 	call	0xb34	; 0xb34 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     cc4:	0e 94 3b 06 	call	0xc76	; 0xc76 <nrfClearInterruptBits>
  nrfFlushRx();
     cc8:	0e 94 3f 04 	call	0x87e	; 0x87e <nrfFlushRx>
  nrfFlushTx();
     ccc:	0e 94 4e 04 	call	0x89c	; 0x89c <nrfFlushTx>
     cd0:	08 95       	ret

00000cd2 <nrfVerifySPIConnection>:
 *          0 (false) if not
 */

// from Wouter
uint8_t nrfVerifySPIConnection(void)
{
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
  uint8_t iBuffer = 0;
  uint8_t iDataBuffer = 0;

  iDataBuffer = nrfReadRegister(REG_SETUP_RETR);  // Buffer old value
     cd6:	84 e0       	ldi	r24, 0x04	; 4
     cd8:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     cdc:	d8 2f       	mov	r29, r24
  nrfWriteRegister(REG_SETUP_RETR, 0x48);         // Write random value
     cde:	68 e4       	ldi	r22, 0x48	; 72
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     ce6:	8f e3       	ldi	r24, 0x3F	; 63
     ce8:	9f e1       	ldi	r25, 0x1F	; 31
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <nrfVerifySPIConnection+0x18>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <nrfVerifySPIConnection+0x1e>
     cf0:	00 00       	nop
  _delay_ms(1);
  iBuffer = nrfReadRegister(REG_SETUP_RETR);      // Read value from SPI
     cf2:	84 e0       	ldi	r24, 0x04	; 4
     cf4:	0e 94 36 03 	call	0x66c	; 0x66c <nrfReadRegister>
     cf8:	c8 2f       	mov	r28, r24
  nrfWriteRegister(REG_SETUP_RETR, iDataBuffer);  // Restore old value
     cfa:	6d 2f       	mov	r22, r29
     cfc:	84 e0       	ldi	r24, 0x04	; 4
     cfe:	0e 94 76 03 	call	0x6ec	; 0x6ec <nrfWriteRegister>
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	c8 34       	cpi	r28, 0x48	; 72
     d06:	09 f0       	breq	.+2      	; 0xd0a <nrfVerifySPIConnection+0x38>
     d08:	80 e0       	ldi	r24, 0x00	; 0

  if (iBuffer == 0x48) return(1);                  // 1 - Value is as expected
  else                 return(0);                  // 0 - Value is different
}
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	08 95       	ret

00000d10 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     d10:	e0 e4       	ldi	r30, 0x40	; 64
     d12:	f6 e0       	ldi	r31, 0x06	; 6
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     d18:	84 e0       	ldi	r24, 0x04	; 4
     d1a:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     d20:	e0 ea       	ldi	r30, 0xA0	; 160
     d22:	f6 e0       	ldi	r31, 0x06	; 6
     d24:	80 e2       	ldi	r24, 0x20	; 32
     d26:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     d28:	80 e4       	ldi	r24, 0x40	; 64
     d2a:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     d30:	e0 ea       	ldi	r30, 0xA0	; 160
     d32:	f8 e0       	ldi	r31, 0x08	; 8
     d34:	88 e1       	ldi	r24, 0x18	; 24
     d36:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     d38:	80 ec       	ldi	r24, 0xC0	; 192
     d3a:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     d3c:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	86 83       	std	Z+6, r24	; 0x06
     d42:	08 95       	ret

00000d44 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     d44:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     d48:	e0 ea       	ldi	r30, 0xA0	; 160
     d4a:	f8 e0       	ldi	r31, 0x08	; 8
     d4c:	81 81       	ldd	r24, Z+1	; 0x01
     d4e:	86 ff       	sbrs	r24, 6
     d50:	fd cf       	rjmp	.-6      	; 0xd4c <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     d52:	e0 ea       	ldi	r30, 0xA0	; 160
     d54:	f8 e0       	ldi	r31, 0x08	; 8
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	80 64       	ori	r24, 0x40	; 64
     d5a:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     d5c:	80 81       	ld	r24, Z
}
     d5e:	08 95       	ret

00000d60 <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     d60:	cf 93       	push	r28
     d62:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     d64:	82 e6       	ldi	r24, 0x62	; 98
     d66:	91 e2       	ldi	r25, 0x21	; 33
     d68:	0e 94 05 09 	call	0x120a	; 0x120a <USART_TXBuffer_FreeSpace>
     d6c:	88 23       	and	r24, r24
     d6e:	d1 f3       	breq	.-12     	; 0xd64 <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     d70:	ca 30       	cpi	r28, 0x0A	; 10
     d72:	29 f4       	brne	.+10     	; 0xd7e <uart_fputc+0x1e>
     d74:	6d e0       	ldi	r22, 0x0D	; 13
     d76:	82 e6       	ldi	r24, 0x62	; 98
     d78:	91 e2       	ldi	r25, 0x21	; 33
     d7a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uart_putc>
  uart_putc(&uartF0, c);
     d7e:	6c 2f       	mov	r22, r28
     d80:	82 e6       	ldi	r24, 0x62	; 98
     d82:	91 e2       	ldi	r25, 0x21	; 33
     d84:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <uart_putc>

  return 0;
}
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     d90:	82 e6       	ldi	r24, 0x62	; 98
     d92:	91 e2       	ldi	r25, 0x21	; 33
     d94:	0e 94 4b 07 	call	0xe96	; 0xe96 <uart_getc>
     d98:	81 15       	cp	r24, r1
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	92 07       	cpc	r25, r18
     d9e:	c1 f3       	breq	.-16     	; 0xd90 <uart_fgetc>

  return c;
}
     da0:	08 95       	ret

00000da2 <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	0b b6       	in	r0, 0x3b	; 59
     dae:	0f 92       	push	r0
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     dc8:	82 e6       	ldi	r24, 0x62	; 98
     dca:	91 e2       	ldi	r25, 0x21	; 33
     dcc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <USART_RXComplete>
}
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0b be       	out	0x3b, r0	; 59
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     e1c:	82 e6       	ldi	r24, 0x62	; 98
     e1e:	91 e2       	ldi	r25, 0x21	; 33
     e20:	0e 94 6e 09 	call	0x12dc	; 0x12dc <USART_DataRegEmpty>
}
     e24:	ff 91       	pop	r31
     e26:	ef 91       	pop	r30
     e28:	bf 91       	pop	r27
     e2a:	af 91       	pop	r26
     e2c:	9f 91       	pop	r25
     e2e:	8f 91       	pop	r24
     e30:	7f 91       	pop	r23
     e32:	6f 91       	pop	r22
     e34:	5f 91       	pop	r21
     e36:	4f 91       	pop	r20
     e38:	3f 91       	pop	r19
     e3a:	2f 91       	pop	r18
     e3c:	0f 90       	pop	r0
     e3e:	0b be       	out	0x3b, r0	; 59
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     e4a:	cf 92       	push	r12
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     e58:	c1 2c       	mov	r12, r1
     e5a:	e1 2c       	mov	r14, r1
     e5c:	12 ec       	ldi	r17, 0xC2	; 194
     e5e:	f1 2e       	mov	r15, r17
     e60:	01 e0       	ldi	r16, 0x01	; 1
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	60 ea       	ldi	r22, 0xA0	; 160
     e66:	7b e0       	ldi	r23, 0x0B	; 11
     e68:	82 e6       	ldi	r24, 0x62	; 98
     e6a:	91 e2       	ldi	r25, 0x21	; 33
     e6c:	0e 94 96 08 	call	0x112c	; 0x112c <init_uart>
  stdout = stdin = &uart_stdinout;
     e70:	ed e6       	ldi	r30, 0x6D	; 109
     e72:	f3 e2       	ldi	r31, 0x23	; 35
     e74:	82 e2       	ldi	r24, 0x22	; 34
     e76:	90 e2       	ldi	r25, 0x20	; 32
     e78:	80 83       	st	Z, r24
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	82 83       	std	Z+2, r24	; 0x02
     e7e:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     e80:	e0 ea       	ldi	r30, 0xA0	; 160
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	82 83       	std	Z+2, r24	; 0x02
}
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	ef 90       	pop	r14
     e92:	cf 90       	pop	r12
     e94:	08 95       	ret

00000e96 <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
     e9c:	0e 94 3b 09 	call	0x1276	; 0x1276 <USART_RXBufferData_Available>
     ea0:	88 23       	and	r24, r24
     ea2:	29 f0       	breq	.+10     	; 0xeae <uart_getc+0x18>
     ea4:	ce 01       	movw	r24, r28
     ea6:	0e 94 46 09 	call	0x128c	; 0x128c <USART_RXBuffer_GetByte>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <uart_getc+0x1c>
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	df 91       	pop	r29
     eb4:	cf 91       	pop	r28
     eb6:	08 95       	ret

00000eb8 <uart_putc>:
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	ec 01       	movw	r28, r24
     ec0:	16 2f       	mov	r17, r22
     ec2:	0e 94 05 09 	call	0x120a	; 0x120a <USART_TXBuffer_FreeSpace>
     ec6:	88 23       	and	r24, r24
     ec8:	21 f0       	breq	.+8      	; 0xed2 <uart_putc+0x1a>
     eca:	61 2f       	mov	r22, r17
     ecc:	ce 01       	movw	r24, r28
     ece:	0e 94 12 09 	call	0x1224	; 0x1224 <USART_TXBuffer_PutByte>
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	08 95       	ret

00000eda <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     eda:	80 3a       	cpi	r24, 0xA0	; 160
     edc:	28 e0       	ldi	r18, 0x08	; 8
     ede:	92 07       	cpc	r25, r18
     ee0:	39 f4       	brne	.+14     	; 0xef0 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f6 e0       	ldi	r31, 0x06	; 6
     ee6:	88 e0       	ldi	r24, 0x08	; 8
     ee8:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	82 83       	std	Z+2, r24	; 0x02
     return;
     eee:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     ef0:	80 3b       	cpi	r24, 0xB0	; 176
     ef2:	28 e0       	ldi	r18, 0x08	; 8
     ef4:	92 07       	cpc	r25, r18
     ef6:	39 f4       	brne	.+14     	; 0xf06 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     ef8:	e0 e4       	ldi	r30, 0x40	; 64
     efa:	f6 e0       	ldi	r31, 0x06	; 6
     efc:	80 e8       	ldi	r24, 0x80	; 128
     efe:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     f00:	80 e4       	ldi	r24, 0x40	; 64
     f02:	82 83       	std	Z+2, r24	; 0x02
     return;
     f04:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     f06:	80 3a       	cpi	r24, 0xA0	; 160
     f08:	29 e0       	ldi	r18, 0x09	; 9
     f0a:	92 07       	cpc	r25, r18
     f0c:	39 f4       	brne	.+14     	; 0xf1c <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     f0e:	e0 e6       	ldi	r30, 0x60	; 96
     f10:	f6 e0       	ldi	r31, 0x06	; 6
     f12:	88 e0       	ldi	r24, 0x08	; 8
     f14:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	82 83       	std	Z+2, r24	; 0x02
     return;
     f1a:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     f1c:	80 3b       	cpi	r24, 0xB0	; 176
     f1e:	29 e0       	ldi	r18, 0x09	; 9
     f20:	92 07       	cpc	r25, r18
     f22:	39 f4       	brne	.+14     	; 0xf32 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     f24:	e0 e6       	ldi	r30, 0x60	; 96
     f26:	f6 e0       	ldi	r31, 0x06	; 6
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     f2c:	80 e4       	ldi	r24, 0x40	; 64
     f2e:	82 83       	std	Z+2, r24	; 0x02
     return;
     f30:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     f32:	80 3a       	cpi	r24, 0xA0	; 160
     f34:	2a e0       	ldi	r18, 0x0A	; 10
     f36:	92 07       	cpc	r25, r18
     f38:	39 f4       	brne	.+14     	; 0xf48 <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
     f3a:	e0 e8       	ldi	r30, 0x80	; 128
     f3c:	f6 e0       	ldi	r31, 0x06	; 6
     f3e:	88 e0       	ldi	r24, 0x08	; 8
     f40:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	82 83       	std	Z+2, r24	; 0x02
     return;
     f46:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
     f48:	80 3b       	cpi	r24, 0xB0	; 176
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	92 07       	cpc	r25, r18
     f4e:	39 f4       	brne	.+14     	; 0xf5e <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
     f50:	e0 e8       	ldi	r30, 0x80	; 128
     f52:	f6 e0       	ldi	r31, 0x06	; 6
     f54:	80 e8       	ldi	r24, 0x80	; 128
     f56:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
     f58:	80 e4       	ldi	r24, 0x40	; 64
     f5a:	82 83       	std	Z+2, r24	; 0x02
     return;
     f5c:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
     f5e:	80 3a       	cpi	r24, 0xA0	; 160
     f60:	9b 40       	sbci	r25, 0x0B	; 11
     f62:	31 f4       	brne	.+12     	; 0xf70 <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
     f64:	e0 ea       	ldi	r30, 0xA0	; 160
     f66:	f6 e0       	ldi	r31, 0x06	; 6
     f68:	88 e0       	ldi	r24, 0x08	; 8
     f6a:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	82 83       	std	Z+2, r24	; 0x02
     f70:	08 95       	ret

00000f72 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     f72:	4f 92       	push	r4
     f74:	5f 92       	push	r5
     f76:	6f 92       	push	r6
     f78:	7f 92       	push	r7
     f7a:	8f 92       	push	r8
     f7c:	9f 92       	push	r9
     f7e:	af 92       	push	r10
     f80:	bf 92       	push	r11
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	49 01       	movw	r8, r18
     f94:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     f96:	2e 2d       	mov	r18, r14
     f98:	21 70       	andi	r18, 0x01	; 1
     f9a:	c0 e1       	ldi	r28, 0x10	; 16
     f9c:	d0 e0       	ldi	r29, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <calc_bsel+0x32>
     fa0:	d5 95       	asr	r29
     fa2:	c7 95       	ror	r28
     fa4:	2a 95       	dec	r18
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     fa8:	00 23       	and	r16, r16
     faa:	0c f0       	brlt	.+2      	; 0xfae <calc_bsel+0x3c>
     fac:	42 c0       	rjmp	.+132    	; 0x1032 <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     fae:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__floatunsisf>
     fb2:	6b 01       	movw	r12, r22
     fb4:	7c 01       	movw	r14, r24
     fb6:	dd 27       	eor	r29, r29
     fb8:	be 01       	movw	r22, r28
     fba:	dd 0f       	add	r29, r29
     fbc:	88 0b       	sbc	r24, r24
     fbe:	99 0b       	sbc	r25, r25
     fc0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatsisf>
     fc4:	2b 01       	movw	r4, r22
     fc6:	3c 01       	movw	r6, r24
     fc8:	c5 01       	movw	r24, r10
     fca:	b4 01       	movw	r22, r8
     fcc:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__floatunsisf>
     fd0:	9b 01       	movw	r18, r22
     fd2:	ac 01       	movw	r20, r24
     fd4:	c3 01       	movw	r24, r6
     fd6:	b2 01       	movw	r22, r4
     fd8:	0e 94 2f 0b 	call	0x165e	; 0x165e <__mulsf3>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	c7 01       	movw	r24, r14
     fe2:	b6 01       	movw	r22, r12
     fe4:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divsf3>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e8       	ldi	r20, 0x80	; 128
     fee:	5f e3       	ldi	r21, 0x3F	; 63
     ff0:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
     ff8:	11 27       	eor	r17, r17
     ffa:	01 95       	neg	r16
     ffc:	0c f4       	brge	.+2      	; 0x1000 <calc_bsel+0x8e>
     ffe:	10 95       	com	r17
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <calc_bsel+0x98>
    1006:	66 0f       	add	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	0a 95       	dec	r16
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <calc_bsel+0x94>
    100e:	07 2e       	mov	r0, r23
    1010:	00 0c       	add	r0, r0
    1012:	88 0b       	sbc	r24, r24
    1014:	99 0b       	sbc	r25, r25
    1016:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatsisf>
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	c7 01       	movw	r24, r14
    1020:	b6 01       	movw	r22, r12
    1022:	0e 94 2f 0b 	call	0x165e	; 0x165e <__mulsf3>
    1026:	0e 94 9c 0b 	call	0x1738	; 0x1738 <round>
    102a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixunssfsi>
    102e:	cb 01       	movw	r24, r22
    1030:	3e c0       	rjmp	.+124    	; 0x10ae <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    1032:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__floatunsisf>
    1036:	6b 01       	movw	r12, r22
    1038:	7c 01       	movw	r14, r24
    103a:	be 01       	movw	r22, r28
    103c:	77 27       	eor	r23, r23
    103e:	07 2e       	mov	r0, r23
    1040:	00 0c       	add	r0, r0
    1042:	88 0b       	sbc	r24, r24
    1044:	99 0b       	sbc	r25, r25
    1046:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatsisf>
    104a:	2b 01       	movw	r4, r22
    104c:	3c 01       	movw	r6, r24
    104e:	c5 01       	movw	r24, r10
    1050:	b4 01       	movw	r22, r8
    1052:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__floatunsisf>
    1056:	9b 01       	movw	r18, r22
    1058:	ac 01       	movw	r20, r24
    105a:	c3 01       	movw	r24, r6
    105c:	b2 01       	movw	r22, r4
    105e:	0e 94 2f 0b 	call	0x165e	; 0x165e <__mulsf3>
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divsf3>
    106e:	6b 01       	movw	r12, r22
    1070:	7c 01       	movw	r14, r24
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <calc_bsel+0x10a>
    1078:	66 0f       	add	r22, r22
    107a:	77 1f       	adc	r23, r23
    107c:	0a 95       	dec	r16
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <calc_bsel+0x106>
    1080:	07 2e       	mov	r0, r23
    1082:	00 0c       	add	r0, r0
    1084:	88 0b       	sbc	r24, r24
    1086:	99 0b       	sbc	r25, r25
    1088:	0e 94 a3 0a 	call	0x1546	; 0x1546 <__floatsisf>
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 00 0a 	call	0x1400	; 0x1400 <__divsf3>
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	40 e8       	ldi	r20, 0x80	; 128
    109e:	5f e3       	ldi	r21, 0x3F	; 63
    10a0:	0e 94 93 09 	call	0x1326	; 0x1326 <__subsf3>
    10a4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <round>
    10a8:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <__fixunssfsi>
    10ac:	cb 01       	movw	r24, r22
  }
}
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	cf 90       	pop	r12
    10be:	bf 90       	pop	r11
    10c0:	af 90       	pop	r10
    10c2:	9f 90       	pop	r9
    10c4:	8f 90       	pop	r8
    10c6:	7f 90       	pop	r7
    10c8:	6f 90       	pop	r6
    10ca:	5f 90       	pop	r5
    10cc:	4f 90       	pop	r4
    10ce:	08 95       	ret

000010d0 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    10d0:	4f 92       	push	r4
    10d2:	5f 92       	push	r5
    10d4:	6f 92       	push	r6
    10d6:	7f 92       	push	r7
    10d8:	8f 92       	push	r8
    10da:	9f 92       	push	r9
    10dc:	af 92       	push	r10
    10de:	bf 92       	push	r11
    10e0:	ef 92       	push	r14
    10e2:	0f 93       	push	r16
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	2b 01       	movw	r4, r22
    10ea:	3c 01       	movw	r6, r24
    10ec:	49 01       	movw	r8, r18
    10ee:	5a 01       	movw	r10, r20
    10f0:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    10f2:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
    10f4:	ed 2e       	mov	r14, r29
    10f6:	0c 2f       	mov	r16, r28
    10f8:	a5 01       	movw	r20, r10
    10fa:	94 01       	movw	r18, r8
    10fc:	c3 01       	movw	r24, r6
    10fe:	b2 01       	movw	r22, r4
    1100:	0e 94 b9 07 	call	0xf72	; 0xf72 <calc_bsel>
    1104:	81 15       	cp	r24, r1
    1106:	90 41       	sbci	r25, 0x10	; 16
    1108:	18 f0       	brcs	.+6      	; 0x1110 <calc_bscale+0x40>
    110a:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    110c:	c8 30       	cpi	r28, 0x08	; 8
    110e:	91 f7       	brne	.-28     	; 0x10f4 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
    1110:	8c 2f       	mov	r24, r28
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	0f 91       	pop	r16
    1118:	ef 90       	pop	r14
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	9f 90       	pop	r9
    1120:	8f 90       	pop	r8
    1122:	7f 90       	pop	r7
    1124:	6f 90       	pop	r6
    1126:	5f 90       	pop	r5
    1128:	4f 90       	pop	r4
    112a:	08 95       	ret

0000112c <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	ec 01       	movw	r28, r24
    1150:	1b 01       	movw	r2, r22
    1152:	29 01       	movw	r4, r18
    1154:	3a 01       	movw	r6, r20
    1156:	47 01       	movw	r8, r14
    1158:	58 01       	movw	r10, r16
    115a:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
    115c:	0c 2d       	mov	r16, r12
    115e:	a5 01       	movw	r20, r10
    1160:	94 01       	movw	r18, r8
    1162:	c3 01       	movw	r24, r6
    1164:	b2 01       	movw	r22, r4
    1166:	0e 94 68 08 	call	0x10d0	; 0x10d0 <calc_bscale>
    116a:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
    116c:	08 2f       	mov	r16, r24
    116e:	a5 01       	movw	r20, r10
    1170:	94 01       	movw	r18, r8
    1172:	c3 01       	movw	r24, r6
    1174:	b2 01       	movw	r22, r4
    1176:	0e 94 b9 07 	call	0xf72	; 0xf72 <calc_bsel>
    117a:	f8 2e       	mov	r15, r24
    117c:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
    117e:	41 e0       	ldi	r20, 0x01	; 1
    1180:	b1 01       	movw	r22, r2
    1182:	ce 01       	movw	r24, r28
    1184:	0e 94 f7 08 	call	0x11ee	; 0x11ee <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	83 e0       	ldi	r24, 0x03	; 3
    118e:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
    1190:	e8 81       	ld	r30, Y
    1192:	f9 81       	ldd	r31, Y+1	; 0x01
    1194:	84 81       	ldd	r24, Z+4	; 0x04
    1196:	80 61       	ori	r24, 0x10	; 16
    1198:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
    119e:	84 81       	ldd	r24, Z+4	; 0x04
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
    11a4:	e8 81       	ld	r30, Y
    11a6:	f9 81       	ldd	r31, Y+1	; 0x01
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	8f 7c       	andi	r24, 0xCF	; 207
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
    11b0:	e8 81       	ld	r30, Y
    11b2:	f9 81       	ldd	r31, Y+1	; 0x01
    11b4:	f6 82       	std	Z+6, r15	; 0x06
    11b6:	e8 81       	ld	r30, Y
    11b8:	f9 81       	ldd	r31, Y+1	; 0x01
    11ba:	12 95       	swap	r17
    11bc:	10 7f       	andi	r17, 0xF0	; 240
    11be:	10 2b       	or	r17, r16
    11c0:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
    11c2:	88 81       	ld	r24, Y
    11c4:	99 81       	ldd	r25, Y+1	; 0x01
    11c6:	0e 94 6d 07 	call	0xeda	; 0xeda <set_usart_txrx_direction>
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	cf 90       	pop	r12
    11d8:	bf 90       	pop	r11
    11da:	af 90       	pop	r10
    11dc:	9f 90       	pop	r9
    11de:	8f 90       	pop	r8
    11e0:	7f 90       	pop	r7
    11e2:	6f 90       	pop	r6
    11e4:	5f 90       	pop	r5
    11e6:	4f 90       	pop	r4
    11e8:	3f 90       	pop	r3
    11ea:	2f 90       	pop	r2
    11ec:	08 95       	ret

000011ee <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
    11ee:	fc 01       	movw	r30, r24
    11f0:	60 83       	st	Z, r22
    11f2:	71 83       	std	Z+1, r23	; 0x01
    11f4:	42 83       	std	Z+2, r20	; 0x02
    11f6:	ec 5f       	subi	r30, 0xFC	; 252
    11f8:	fd 4f       	sbci	r31, 0xFD	; 253
    11fa:	10 82       	st	Z, r1
    11fc:	31 97       	sbiw	r30, 0x01	; 1
    11fe:	10 82       	st	Z, r1
    1200:	33 96       	adiw	r30, 0x03	; 3
    1202:	10 82       	st	Z, r1
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	10 82       	st	Z, r1
    1208:	08 95       	ret

0000120a <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    120a:	fc 01       	movw	r30, r24
    120c:	eb 5f       	subi	r30, 0xFB	; 251
    120e:	fd 4f       	sbci	r31, 0xFD	; 253
    1210:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    1212:	31 96       	adiw	r30, 0x01	; 1
    1214:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1216:	91 e0       	ldi	r25, 0x01	; 1
    1218:	92 0f       	add	r25, r18
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	93 13       	cpse	r25, r19
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <USART_TXBuffer_FreeSpace+0x18>
    1220:	80 e0       	ldi	r24, 0x00	; 0
}
    1222:	08 95       	ret

00001224 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    122a:	dc 01       	movw	r26, r24
    122c:	ab 5f       	subi	r26, 0xFB	; 251
    122e:	bd 4f       	sbci	r27, 0xFD	; 253
    1230:	9c 91       	ld	r25, X
    1232:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	92 13       	cpse	r25, r18
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <USART_TXBuffer_PutByte+0x1c>
    123e:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
    1240:	92 17       	cp	r25, r18
    1242:	b1 f0       	breq	.+44     	; 0x1270 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1244:	ef 01       	movw	r28, r30
    1246:	cb 5f       	subi	r28, 0xFB	; 251
    1248:	dd 4f       	sbci	r29, 0xFD	; 253
    124a:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
    124c:	df 01       	movw	r26, r30
    124e:	a9 0f       	add	r26, r25
    1250:	b1 1d       	adc	r27, r1
    1252:	ad 5f       	subi	r26, 0xFD	; 253
    1254:	be 4f       	sbci	r27, 0xFE	; 254
    1256:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1258:	9f 5f       	subi	r25, 0xFF	; 255
    125a:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    125c:	a0 81       	ld	r26, Z
    125e:	b1 81       	ldd	r27, Z+1	; 0x01
    1260:	13 96       	adiw	r26, 0x03	; 3
    1262:	9c 91       	ld	r25, X
    1264:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1266:	9c 7f       	andi	r25, 0xFC	; 252
    1268:	22 81       	ldd	r18, Z+2	; 0x02
    126a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    126c:	13 96       	adiw	r26, 0x03	; 3
    126e:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
    1270:	df 91       	pop	r29
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1276:	fc 01       	movw	r30, r24
    1278:	ed 5f       	subi	r30, 0xFD	; 253
    127a:	fd 4f       	sbci	r31, 0xFD	; 253
    127c:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    127e:	31 96       	adiw	r30, 0x01	; 1
    1280:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	29 13       	cpse	r18, r25
    1286:	01 c0       	rjmp	.+2      	; 0x128a <USART_RXBufferData_Available+0x14>
    1288:	80 e0       	ldi	r24, 0x00	; 0
}
    128a:	08 95       	ret

0000128c <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    128c:	fc 01       	movw	r30, r24
    128e:	ec 5f       	subi	r30, 0xFC	; 252
    1290:	fd 4f       	sbci	r31, 0xFD	; 253
    1292:	20 81       	ld	r18, Z
    1294:	dc 01       	movw	r26, r24
    1296:	a2 0f       	add	r26, r18
    1298:	b1 1d       	adc	r27, r1
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    129e:	90 81       	ld	r25, Z
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	90 83       	st	Z, r25

	return ans;
}
    12a4:	08 95       	ret

000012a6 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    12a6:	fc 01       	movw	r30, r24
    12a8:	ed 5f       	subi	r30, 0xFD	; 253
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	20 81       	ld	r18, Z
    12ae:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    12b4:	dc 01       	movw	r26, r24
    12b6:	ed 91       	ld	r30, X+
    12b8:	fc 91       	ld	r31, X
    12ba:	11 97       	sbiw	r26, 0x01	; 1
    12bc:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    12be:	23 17       	cp	r18, r19
    12c0:	59 f0       	breq	.+22     	; 0x12d8 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    12c2:	fc 01       	movw	r30, r24
    12c4:	ed 5f       	subi	r30, 0xFD	; 253
    12c6:	fd 4f       	sbci	r31, 0xFD	; 253
    12c8:	30 81       	ld	r19, Z
    12ca:	a3 0f       	add	r26, r19
    12cc:	b1 1d       	adc	r27, r1
    12ce:	13 96       	adiw	r26, 0x03	; 3
    12d0:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    12d2:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    12da:	08 95       	ret

000012dc <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    12e0:	fc 01       	movw	r30, r24
    12e2:	ea 5f       	subi	r30, 0xFA	; 250
    12e4:	fd 4f       	sbci	r31, 0xFD	; 253
    12e6:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    12e8:	31 97       	sbiw	r30, 0x01	; 1
    12ea:	20 81       	ld	r18, Z
    12ec:	32 13       	cpse	r19, r18
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    12f0:	dc 01       	movw	r26, r24
    12f2:	ed 91       	ld	r30, X+
    12f4:	fc 91       	ld	r31, X
    12f6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    12f8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    12fa:	83 83       	std	Z+3, r24	; 0x03
    12fc:	11 c0       	rjmp	.+34     	; 0x1320 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    12fe:	fc 01       	movw	r30, r24
    1300:	ea 5f       	subi	r30, 0xFA	; 250
    1302:	fd 4f       	sbci	r31, 0xFD	; 253
    1304:	20 81       	ld	r18, Z
    1306:	dc 01       	movw	r26, r24
    1308:	a2 0f       	add	r26, r18
    130a:	b1 1d       	adc	r27, r1
    130c:	ad 5f       	subi	r26, 0xFD	; 253
    130e:	be 4f       	sbci	r27, 0xFE	; 254
    1310:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    1312:	ec 01       	movw	r28, r24
    1314:	a8 81       	ld	r26, Y
    1316:	b9 81       	ldd	r27, Y+1	; 0x01
    1318:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    131a:	80 81       	ld	r24, Z
    131c:	8f 5f       	subi	r24, 0xFF	; 255
    131e:	80 83       	st	Z, r24
	}
}
    1320:	df 91       	pop	r29
    1322:	cf 91       	pop	r28
    1324:	08 95       	ret

00001326 <__subsf3>:
    1326:	50 58       	subi	r21, 0x80	; 128

00001328 <__addsf3>:
    1328:	bb 27       	eor	r27, r27
    132a:	aa 27       	eor	r26, r26
    132c:	0e 94 ab 09 	call	0x1356	; 0x1356 <__addsf3x>
    1330:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_round>
    1334:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__fp_pscA>
    1338:	38 f0       	brcs	.+14     	; 0x1348 <__addsf3+0x20>
    133a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_pscB>
    133e:	20 f0       	brcs	.+8      	; 0x1348 <__addsf3+0x20>
    1340:	39 f4       	brne	.+14     	; 0x1350 <__addsf3+0x28>
    1342:	9f 3f       	cpi	r25, 0xFF	; 255
    1344:	19 f4       	brne	.+6      	; 0x134c <__addsf3+0x24>
    1346:	26 f4       	brtc	.+8      	; 0x1350 <__addsf3+0x28>
    1348:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_nan>
    134c:	0e f4       	brtc	.+2      	; 0x1350 <__addsf3+0x28>
    134e:	e0 95       	com	r30
    1350:	e7 fb       	bst	r30, 7
    1352:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_inf>

00001356 <__addsf3x>:
    1356:	e9 2f       	mov	r30, r25
    1358:	0e 94 06 0b 	call	0x160c	; 0x160c <__fp_split3>
    135c:	58 f3       	brcs	.-42     	; 0x1334 <__addsf3+0xc>
    135e:	ba 17       	cp	r27, r26
    1360:	62 07       	cpc	r22, r18
    1362:	73 07       	cpc	r23, r19
    1364:	84 07       	cpc	r24, r20
    1366:	95 07       	cpc	r25, r21
    1368:	20 f0       	brcs	.+8      	; 0x1372 <__addsf3x+0x1c>
    136a:	79 f4       	brne	.+30     	; 0x138a <__addsf3x+0x34>
    136c:	a6 f5       	brtc	.+104    	; 0x13d6 <__addsf3x+0x80>
    136e:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_zero>
    1372:	0e f4       	brtc	.+2      	; 0x1376 <__addsf3x+0x20>
    1374:	e0 95       	com	r30
    1376:	0b 2e       	mov	r0, r27
    1378:	ba 2f       	mov	r27, r26
    137a:	a0 2d       	mov	r26, r0
    137c:	0b 01       	movw	r0, r22
    137e:	b9 01       	movw	r22, r18
    1380:	90 01       	movw	r18, r0
    1382:	0c 01       	movw	r0, r24
    1384:	ca 01       	movw	r24, r20
    1386:	a0 01       	movw	r20, r0
    1388:	11 24       	eor	r1, r1
    138a:	ff 27       	eor	r31, r31
    138c:	59 1b       	sub	r21, r25
    138e:	99 f0       	breq	.+38     	; 0x13b6 <__addsf3x+0x60>
    1390:	59 3f       	cpi	r21, 0xF9	; 249
    1392:	50 f4       	brcc	.+20     	; 0x13a8 <__addsf3x+0x52>
    1394:	50 3e       	cpi	r21, 0xE0	; 224
    1396:	68 f1       	brcs	.+90     	; 0x13f2 <__addsf3x+0x9c>
    1398:	1a 16       	cp	r1, r26
    139a:	f0 40       	sbci	r31, 0x00	; 0
    139c:	a2 2f       	mov	r26, r18
    139e:	23 2f       	mov	r18, r19
    13a0:	34 2f       	mov	r19, r20
    13a2:	44 27       	eor	r20, r20
    13a4:	58 5f       	subi	r21, 0xF8	; 248
    13a6:	f3 cf       	rjmp	.-26     	; 0x138e <__addsf3x+0x38>
    13a8:	46 95       	lsr	r20
    13aa:	37 95       	ror	r19
    13ac:	27 95       	ror	r18
    13ae:	a7 95       	ror	r26
    13b0:	f0 40       	sbci	r31, 0x00	; 0
    13b2:	53 95       	inc	r21
    13b4:	c9 f7       	brne	.-14     	; 0x13a8 <__addsf3x+0x52>
    13b6:	7e f4       	brtc	.+30     	; 0x13d6 <__addsf3x+0x80>
    13b8:	1f 16       	cp	r1, r31
    13ba:	ba 0b       	sbc	r27, r26
    13bc:	62 0b       	sbc	r22, r18
    13be:	73 0b       	sbc	r23, r19
    13c0:	84 0b       	sbc	r24, r20
    13c2:	ba f0       	brmi	.+46     	; 0x13f2 <__addsf3x+0x9c>
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <__addsf3x+0x9a>
    13c8:	ff 0f       	add	r31, r31
    13ca:	bb 1f       	adc	r27, r27
    13cc:	66 1f       	adc	r22, r22
    13ce:	77 1f       	adc	r23, r23
    13d0:	88 1f       	adc	r24, r24
    13d2:	c2 f7       	brpl	.-16     	; 0x13c4 <__addsf3x+0x6e>
    13d4:	0e c0       	rjmp	.+28     	; 0x13f2 <__addsf3x+0x9c>
    13d6:	ba 0f       	add	r27, r26
    13d8:	62 1f       	adc	r22, r18
    13da:	73 1f       	adc	r23, r19
    13dc:	84 1f       	adc	r24, r20
    13de:	48 f4       	brcc	.+18     	; 0x13f2 <__addsf3x+0x9c>
    13e0:	87 95       	ror	r24
    13e2:	77 95       	ror	r23
    13e4:	67 95       	ror	r22
    13e6:	b7 95       	ror	r27
    13e8:	f7 95       	ror	r31
    13ea:	9e 3f       	cpi	r25, 0xFE	; 254
    13ec:	08 f0       	brcs	.+2      	; 0x13f0 <__addsf3x+0x9a>
    13ee:	b0 cf       	rjmp	.-160    	; 0x1350 <__addsf3+0x28>
    13f0:	93 95       	inc	r25
    13f2:	88 0f       	add	r24, r24
    13f4:	08 f0       	brcs	.+2      	; 0x13f8 <__addsf3x+0xa2>
    13f6:	99 27       	eor	r25, r25
    13f8:	ee 0f       	add	r30, r30
    13fa:	97 95       	ror	r25
    13fc:	87 95       	ror	r24
    13fe:	08 95       	ret

00001400 <__divsf3>:
    1400:	0e 94 14 0a 	call	0x1428	; 0x1428 <__divsf3x>
    1404:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_round>
    1408:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_pscB>
    140c:	58 f0       	brcs	.+22     	; 0x1424 <__divsf3+0x24>
    140e:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__fp_pscA>
    1412:	40 f0       	brcs	.+16     	; 0x1424 <__divsf3+0x24>
    1414:	29 f4       	brne	.+10     	; 0x1420 <__divsf3+0x20>
    1416:	5f 3f       	cpi	r21, 0xFF	; 255
    1418:	29 f0       	breq	.+10     	; 0x1424 <__divsf3+0x24>
    141a:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_inf>
    141e:	51 11       	cpse	r21, r1
    1420:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_szero>
    1424:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_nan>

00001428 <__divsf3x>:
    1428:	0e 94 06 0b 	call	0x160c	; 0x160c <__fp_split3>
    142c:	68 f3       	brcs	.-38     	; 0x1408 <__divsf3+0x8>

0000142e <__divsf3_pse>:
    142e:	99 23       	and	r25, r25
    1430:	b1 f3       	breq	.-20     	; 0x141e <__divsf3+0x1e>
    1432:	55 23       	and	r21, r21
    1434:	91 f3       	breq	.-28     	; 0x141a <__divsf3+0x1a>
    1436:	95 1b       	sub	r25, r21
    1438:	55 0b       	sbc	r21, r21
    143a:	bb 27       	eor	r27, r27
    143c:	aa 27       	eor	r26, r26
    143e:	62 17       	cp	r22, r18
    1440:	73 07       	cpc	r23, r19
    1442:	84 07       	cpc	r24, r20
    1444:	38 f0       	brcs	.+14     	; 0x1454 <__divsf3_pse+0x26>
    1446:	9f 5f       	subi	r25, 0xFF	; 255
    1448:	5f 4f       	sbci	r21, 0xFF	; 255
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	44 1f       	adc	r20, r20
    1450:	aa 1f       	adc	r26, r26
    1452:	a9 f3       	breq	.-22     	; 0x143e <__divsf3_pse+0x10>
    1454:	35 d0       	rcall	.+106    	; 0x14c0 <__divsf3_pse+0x92>
    1456:	0e 2e       	mov	r0, r30
    1458:	3a f0       	brmi	.+14     	; 0x1468 <__divsf3_pse+0x3a>
    145a:	e0 e8       	ldi	r30, 0x80	; 128
    145c:	32 d0       	rcall	.+100    	; 0x14c2 <__divsf3_pse+0x94>
    145e:	91 50       	subi	r25, 0x01	; 1
    1460:	50 40       	sbci	r21, 0x00	; 0
    1462:	e6 95       	lsr	r30
    1464:	00 1c       	adc	r0, r0
    1466:	ca f7       	brpl	.-14     	; 0x145a <__divsf3_pse+0x2c>
    1468:	2b d0       	rcall	.+86     	; 0x14c0 <__divsf3_pse+0x92>
    146a:	fe 2f       	mov	r31, r30
    146c:	29 d0       	rcall	.+82     	; 0x14c0 <__divsf3_pse+0x92>
    146e:	66 0f       	add	r22, r22
    1470:	77 1f       	adc	r23, r23
    1472:	88 1f       	adc	r24, r24
    1474:	bb 1f       	adc	r27, r27
    1476:	26 17       	cp	r18, r22
    1478:	37 07       	cpc	r19, r23
    147a:	48 07       	cpc	r20, r24
    147c:	ab 07       	cpc	r26, r27
    147e:	b0 e8       	ldi	r27, 0x80	; 128
    1480:	09 f0       	breq	.+2      	; 0x1484 <__divsf3_pse+0x56>
    1482:	bb 0b       	sbc	r27, r27
    1484:	80 2d       	mov	r24, r0
    1486:	bf 01       	movw	r22, r30
    1488:	ff 27       	eor	r31, r31
    148a:	93 58       	subi	r25, 0x83	; 131
    148c:	5f 4f       	sbci	r21, 0xFF	; 255
    148e:	3a f0       	brmi	.+14     	; 0x149e <__divsf3_pse+0x70>
    1490:	9e 3f       	cpi	r25, 0xFE	; 254
    1492:	51 05       	cpc	r21, r1
    1494:	78 f0       	brcs	.+30     	; 0x14b4 <__divsf3_pse+0x86>
    1496:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_inf>
    149a:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_szero>
    149e:	5f 3f       	cpi	r21, 0xFF	; 255
    14a0:	e4 f3       	brlt	.-8      	; 0x149a <__divsf3_pse+0x6c>
    14a2:	98 3e       	cpi	r25, 0xE8	; 232
    14a4:	d4 f3       	brlt	.-12     	; 0x149a <__divsf3_pse+0x6c>
    14a6:	86 95       	lsr	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	b7 95       	ror	r27
    14ae:	f7 95       	ror	r31
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__divsf3_pse+0x78>
    14b4:	88 0f       	add	r24, r24
    14b6:	91 1d       	adc	r25, r1
    14b8:	96 95       	lsr	r25
    14ba:	87 95       	ror	r24
    14bc:	97 f9       	bld	r25, 7
    14be:	08 95       	ret
    14c0:	e1 e0       	ldi	r30, 0x01	; 1
    14c2:	66 0f       	add	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	bb 1f       	adc	r27, r27
    14ca:	62 17       	cp	r22, r18
    14cc:	73 07       	cpc	r23, r19
    14ce:	84 07       	cpc	r24, r20
    14d0:	ba 07       	cpc	r27, r26
    14d2:	20 f0       	brcs	.+8      	; 0x14dc <__divsf3_pse+0xae>
    14d4:	62 1b       	sub	r22, r18
    14d6:	73 0b       	sbc	r23, r19
    14d8:	84 0b       	sbc	r24, r20
    14da:	ba 0b       	sbc	r27, r26
    14dc:	ee 1f       	adc	r30, r30
    14de:	88 f7       	brcc	.-30     	; 0x14c2 <__divsf3_pse+0x94>
    14e0:	e0 95       	com	r30
    14e2:	08 95       	ret

000014e4 <__fixunssfsi>:
    14e4:	0e 94 0e 0b 	call	0x161c	; 0x161c <__fp_splitA>
    14e8:	88 f0       	brcs	.+34     	; 0x150c <__fixunssfsi+0x28>
    14ea:	9f 57       	subi	r25, 0x7F	; 127
    14ec:	98 f0       	brcs	.+38     	; 0x1514 <__fixunssfsi+0x30>
    14ee:	b9 2f       	mov	r27, r25
    14f0:	99 27       	eor	r25, r25
    14f2:	b7 51       	subi	r27, 0x17	; 23
    14f4:	b0 f0       	brcs	.+44     	; 0x1522 <__fixunssfsi+0x3e>
    14f6:	e1 f0       	breq	.+56     	; 0x1530 <__fixunssfsi+0x4c>
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	88 1f       	adc	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	1a f0       	brmi	.+6      	; 0x1508 <__fixunssfsi+0x24>
    1502:	ba 95       	dec	r27
    1504:	c9 f7       	brne	.-14     	; 0x14f8 <__fixunssfsi+0x14>
    1506:	14 c0       	rjmp	.+40     	; 0x1530 <__fixunssfsi+0x4c>
    1508:	b1 30       	cpi	r27, 0x01	; 1
    150a:	91 f0       	breq	.+36     	; 0x1530 <__fixunssfsi+0x4c>
    150c:	0e 94 28 0b 	call	0x1650	; 0x1650 <__fp_zero>
    1510:	b1 e0       	ldi	r27, 0x01	; 1
    1512:	08 95       	ret
    1514:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_zero>
    1518:	67 2f       	mov	r22, r23
    151a:	78 2f       	mov	r23, r24
    151c:	88 27       	eor	r24, r24
    151e:	b8 5f       	subi	r27, 0xF8	; 248
    1520:	39 f0       	breq	.+14     	; 0x1530 <__fixunssfsi+0x4c>
    1522:	b9 3f       	cpi	r27, 0xF9	; 249
    1524:	cc f3       	brlt	.-14     	; 0x1518 <__fixunssfsi+0x34>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b3 95       	inc	r27
    152e:	d9 f7       	brne	.-10     	; 0x1526 <__fixunssfsi+0x42>
    1530:	3e f4       	brtc	.+14     	; 0x1540 <__fixunssfsi+0x5c>
    1532:	90 95       	com	r25
    1534:	80 95       	com	r24
    1536:	70 95       	com	r23
    1538:	61 95       	neg	r22
    153a:	7f 4f       	sbci	r23, 0xFF	; 255
    153c:	8f 4f       	sbci	r24, 0xFF	; 255
    153e:	9f 4f       	sbci	r25, 0xFF	; 255
    1540:	08 95       	ret

00001542 <__floatunsisf>:
    1542:	e8 94       	clt
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <__floatsisf+0x12>

00001546 <__floatsisf>:
    1546:	97 fb       	bst	r25, 7
    1548:	3e f4       	brtc	.+14     	; 0x1558 <__floatsisf+0x12>
    154a:	90 95       	com	r25
    154c:	80 95       	com	r24
    154e:	70 95       	com	r23
    1550:	61 95       	neg	r22
    1552:	7f 4f       	sbci	r23, 0xFF	; 255
    1554:	8f 4f       	sbci	r24, 0xFF	; 255
    1556:	9f 4f       	sbci	r25, 0xFF	; 255
    1558:	99 23       	and	r25, r25
    155a:	a9 f0       	breq	.+42     	; 0x1586 <__floatsisf+0x40>
    155c:	f9 2f       	mov	r31, r25
    155e:	96 e9       	ldi	r25, 0x96	; 150
    1560:	bb 27       	eor	r27, r27
    1562:	93 95       	inc	r25
    1564:	f6 95       	lsr	r31
    1566:	87 95       	ror	r24
    1568:	77 95       	ror	r23
    156a:	67 95       	ror	r22
    156c:	b7 95       	ror	r27
    156e:	f1 11       	cpse	r31, r1
    1570:	f8 cf       	rjmp	.-16     	; 0x1562 <__floatsisf+0x1c>
    1572:	fa f4       	brpl	.+62     	; 0x15b2 <__floatsisf+0x6c>
    1574:	bb 0f       	add	r27, r27
    1576:	11 f4       	brne	.+4      	; 0x157c <__floatsisf+0x36>
    1578:	60 ff       	sbrs	r22, 0
    157a:	1b c0       	rjmp	.+54     	; 0x15b2 <__floatsisf+0x6c>
    157c:	6f 5f       	subi	r22, 0xFF	; 255
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	16 c0       	rjmp	.+44     	; 0x15b2 <__floatsisf+0x6c>
    1586:	88 23       	and	r24, r24
    1588:	11 f0       	breq	.+4      	; 0x158e <__floatsisf+0x48>
    158a:	96 e9       	ldi	r25, 0x96	; 150
    158c:	11 c0       	rjmp	.+34     	; 0x15b0 <__floatsisf+0x6a>
    158e:	77 23       	and	r23, r23
    1590:	21 f0       	breq	.+8      	; 0x159a <__floatsisf+0x54>
    1592:	9e e8       	ldi	r25, 0x8E	; 142
    1594:	87 2f       	mov	r24, r23
    1596:	76 2f       	mov	r23, r22
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <__floatsisf+0x5e>
    159a:	66 23       	and	r22, r22
    159c:	71 f0       	breq	.+28     	; 0x15ba <__floatsisf+0x74>
    159e:	96 e8       	ldi	r25, 0x86	; 134
    15a0:	86 2f       	mov	r24, r22
    15a2:	70 e0       	ldi	r23, 0x00	; 0
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	2a f0       	brmi	.+10     	; 0x15b2 <__floatsisf+0x6c>
    15a8:	9a 95       	dec	r25
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	88 1f       	adc	r24, r24
    15b0:	da f7       	brpl	.-10     	; 0x15a8 <__floatsisf+0x62>
    15b2:	88 0f       	add	r24, r24
    15b4:	96 95       	lsr	r25
    15b6:	87 95       	ror	r24
    15b8:	97 f9       	bld	r25, 7
    15ba:	08 95       	ret

000015bc <__fp_inf>:
    15bc:	97 f9       	bld	r25, 7
    15be:	9f 67       	ori	r25, 0x7F	; 127
    15c0:	80 e8       	ldi	r24, 0x80	; 128
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	08 95       	ret

000015c8 <__fp_nan>:
    15c8:	9f ef       	ldi	r25, 0xFF	; 255
    15ca:	80 ec       	ldi	r24, 0xC0	; 192
    15cc:	08 95       	ret

000015ce <__fp_pscA>:
    15ce:	00 24       	eor	r0, r0
    15d0:	0a 94       	dec	r0
    15d2:	16 16       	cp	r1, r22
    15d4:	17 06       	cpc	r1, r23
    15d6:	18 06       	cpc	r1, r24
    15d8:	09 06       	cpc	r0, r25
    15da:	08 95       	ret

000015dc <__fp_pscB>:
    15dc:	00 24       	eor	r0, r0
    15de:	0a 94       	dec	r0
    15e0:	12 16       	cp	r1, r18
    15e2:	13 06       	cpc	r1, r19
    15e4:	14 06       	cpc	r1, r20
    15e6:	05 06       	cpc	r0, r21
    15e8:	08 95       	ret

000015ea <__fp_round>:
    15ea:	09 2e       	mov	r0, r25
    15ec:	03 94       	inc	r0
    15ee:	00 0c       	add	r0, r0
    15f0:	11 f4       	brne	.+4      	; 0x15f6 <__fp_round+0xc>
    15f2:	88 23       	and	r24, r24
    15f4:	52 f0       	brmi	.+20     	; 0x160a <__fp_round+0x20>
    15f6:	bb 0f       	add	r27, r27
    15f8:	40 f4       	brcc	.+16     	; 0x160a <__fp_round+0x20>
    15fa:	bf 2b       	or	r27, r31
    15fc:	11 f4       	brne	.+4      	; 0x1602 <__fp_round+0x18>
    15fe:	60 ff       	sbrs	r22, 0
    1600:	04 c0       	rjmp	.+8      	; 0x160a <__fp_round+0x20>
    1602:	6f 5f       	subi	r22, 0xFF	; 255
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	8f 4f       	sbci	r24, 0xFF	; 255
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	08 95       	ret

0000160c <__fp_split3>:
    160c:	57 fd       	sbrc	r21, 7
    160e:	90 58       	subi	r25, 0x80	; 128
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	59 f0       	breq	.+22     	; 0x162c <__fp_splitA+0x10>
    1616:	5f 3f       	cpi	r21, 0xFF	; 255
    1618:	71 f0       	breq	.+28     	; 0x1636 <__fp_splitA+0x1a>
    161a:	47 95       	ror	r20

0000161c <__fp_splitA>:
    161c:	88 0f       	add	r24, r24
    161e:	97 fb       	bst	r25, 7
    1620:	99 1f       	adc	r25, r25
    1622:	61 f0       	breq	.+24     	; 0x163c <__fp_splitA+0x20>
    1624:	9f 3f       	cpi	r25, 0xFF	; 255
    1626:	79 f0       	breq	.+30     	; 0x1646 <__fp_splitA+0x2a>
    1628:	87 95       	ror	r24
    162a:	08 95       	ret
    162c:	12 16       	cp	r1, r18
    162e:	13 06       	cpc	r1, r19
    1630:	14 06       	cpc	r1, r20
    1632:	55 1f       	adc	r21, r21
    1634:	f2 cf       	rjmp	.-28     	; 0x161a <__fp_split3+0xe>
    1636:	46 95       	lsr	r20
    1638:	f1 df       	rcall	.-30     	; 0x161c <__fp_splitA>
    163a:	08 c0       	rjmp	.+16     	; 0x164c <__fp_splitA+0x30>
    163c:	16 16       	cp	r1, r22
    163e:	17 06       	cpc	r1, r23
    1640:	18 06       	cpc	r1, r24
    1642:	99 1f       	adc	r25, r25
    1644:	f1 cf       	rjmp	.-30     	; 0x1628 <__fp_splitA+0xc>
    1646:	86 95       	lsr	r24
    1648:	71 05       	cpc	r23, r1
    164a:	61 05       	cpc	r22, r1
    164c:	08 94       	sec
    164e:	08 95       	ret

00001650 <__fp_zero>:
    1650:	e8 94       	clt

00001652 <__fp_szero>:
    1652:	bb 27       	eor	r27, r27
    1654:	66 27       	eor	r22, r22
    1656:	77 27       	eor	r23, r23
    1658:	cb 01       	movw	r24, r22
    165a:	97 f9       	bld	r25, 7
    165c:	08 95       	ret

0000165e <__mulsf3>:
    165e:	0e 94 42 0b 	call	0x1684	; 0x1684 <__mulsf3x>
    1662:	0c 94 f5 0a 	jmp	0x15ea	; 0x15ea <__fp_round>
    1666:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__fp_pscA>
    166a:	38 f0       	brcs	.+14     	; 0x167a <__mulsf3+0x1c>
    166c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__fp_pscB>
    1670:	20 f0       	brcs	.+8      	; 0x167a <__mulsf3+0x1c>
    1672:	95 23       	and	r25, r21
    1674:	11 f0       	breq	.+4      	; 0x167a <__mulsf3+0x1c>
    1676:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_inf>
    167a:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__fp_nan>
    167e:	11 24       	eor	r1, r1
    1680:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_szero>

00001684 <__mulsf3x>:
    1684:	0e 94 06 0b 	call	0x160c	; 0x160c <__fp_split3>
    1688:	70 f3       	brcs	.-36     	; 0x1666 <__mulsf3+0x8>

0000168a <__mulsf3_pse>:
    168a:	95 9f       	mul	r25, r21
    168c:	c1 f3       	breq	.-16     	; 0x167e <__mulsf3+0x20>
    168e:	95 0f       	add	r25, r21
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	55 1f       	adc	r21, r21
    1694:	62 9f       	mul	r22, r18
    1696:	f0 01       	movw	r30, r0
    1698:	72 9f       	mul	r23, r18
    169a:	bb 27       	eor	r27, r27
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	63 9f       	mul	r22, r19
    16a2:	aa 27       	eor	r26, r26
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	aa 1f       	adc	r26, r26
    16aa:	64 9f       	mul	r22, r20
    16ac:	66 27       	eor	r22, r22
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	66 1f       	adc	r22, r22
    16b4:	82 9f       	mul	r24, r18
    16b6:	22 27       	eor	r18, r18
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	73 9f       	mul	r23, r19
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	83 9f       	mul	r24, r19
    16c8:	a0 0d       	add	r26, r0
    16ca:	61 1d       	adc	r22, r1
    16cc:	22 1f       	adc	r18, r18
    16ce:	74 9f       	mul	r23, r20
    16d0:	33 27       	eor	r19, r19
    16d2:	a0 0d       	add	r26, r0
    16d4:	61 1d       	adc	r22, r1
    16d6:	23 1f       	adc	r18, r19
    16d8:	84 9f       	mul	r24, r20
    16da:	60 0d       	add	r22, r0
    16dc:	21 1d       	adc	r18, r1
    16de:	82 2f       	mov	r24, r18
    16e0:	76 2f       	mov	r23, r22
    16e2:	6a 2f       	mov	r22, r26
    16e4:	11 24       	eor	r1, r1
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	9a f0       	brmi	.+38     	; 0x1712 <__mulsf3_pse+0x88>
    16ec:	f1 f0       	breq	.+60     	; 0x172a <__mulsf3_pse+0xa0>
    16ee:	88 23       	and	r24, r24
    16f0:	4a f0       	brmi	.+18     	; 0x1704 <__mulsf3_pse+0x7a>
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	bb 1f       	adc	r27, r27
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__mulsf3_pse+0x64>
    1704:	9e 3f       	cpi	r25, 0xFE	; 254
    1706:	51 05       	cpc	r21, r1
    1708:	80 f0       	brcs	.+32     	; 0x172a <__mulsf3_pse+0xa0>
    170a:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_inf>
    170e:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_szero>
    1712:	5f 3f       	cpi	r21, 0xFF	; 255
    1714:	e4 f3       	brlt	.-8      	; 0x170e <__mulsf3_pse+0x84>
    1716:	98 3e       	cpi	r25, 0xE8	; 232
    1718:	d4 f3       	brlt	.-12     	; 0x170e <__mulsf3_pse+0x84>
    171a:	86 95       	lsr	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b7 95       	ror	r27
    1722:	f7 95       	ror	r31
    1724:	e7 95       	ror	r30
    1726:	9f 5f       	subi	r25, 0xFF	; 255
    1728:	c1 f7       	brne	.-16     	; 0x171a <__mulsf3_pse+0x90>
    172a:	fe 2b       	or	r31, r30
    172c:	88 0f       	add	r24, r24
    172e:	91 1d       	adc	r25, r1
    1730:	96 95       	lsr	r25
    1732:	87 95       	ror	r24
    1734:	97 f9       	bld	r25, 7
    1736:	08 95       	ret

00001738 <round>:
    1738:	0e 94 0e 0b 	call	0x161c	; 0x161c <__fp_splitA>
    173c:	e8 f0       	brcs	.+58     	; 0x1778 <round+0x40>
    173e:	9e 37       	cpi	r25, 0x7E	; 126
    1740:	e8 f0       	brcs	.+58     	; 0x177c <round+0x44>
    1742:	96 39       	cpi	r25, 0x96	; 150
    1744:	b8 f4       	brcc	.+46     	; 0x1774 <round+0x3c>
    1746:	9e 38       	cpi	r25, 0x8E	; 142
    1748:	48 f4       	brcc	.+18     	; 0x175c <round+0x24>
    174a:	67 2f       	mov	r22, r23
    174c:	78 2f       	mov	r23, r24
    174e:	88 27       	eor	r24, r24
    1750:	98 5f       	subi	r25, 0xF8	; 248
    1752:	f9 cf       	rjmp	.-14     	; 0x1746 <round+0xe>
    1754:	86 95       	lsr	r24
    1756:	77 95       	ror	r23
    1758:	67 95       	ror	r22
    175a:	93 95       	inc	r25
    175c:	95 39       	cpi	r25, 0x95	; 149
    175e:	d0 f3       	brcs	.-12     	; 0x1754 <round+0x1c>
    1760:	b6 2f       	mov	r27, r22
    1762:	b1 70       	andi	r27, 0x01	; 1
    1764:	6b 0f       	add	r22, r27
    1766:	71 1d       	adc	r23, r1
    1768:	81 1d       	adc	r24, r1
    176a:	20 f4       	brcc	.+8      	; 0x1774 <round+0x3c>
    176c:	87 95       	ror	r24
    176e:	77 95       	ror	r23
    1770:	67 95       	ror	r22
    1772:	93 95       	inc	r25
    1774:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_mintl>
    1778:	0c 94 db 0b 	jmp	0x17b6	; 0x17b6 <__fp_mpack>
    177c:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_szero>

00001780 <__fp_mintl>:
    1780:	88 23       	and	r24, r24
    1782:	71 f4       	brne	.+28     	; 0x17a0 <__fp_mintl+0x20>
    1784:	77 23       	and	r23, r23
    1786:	21 f0       	breq	.+8      	; 0x1790 <__fp_mintl+0x10>
    1788:	98 50       	subi	r25, 0x08	; 8
    178a:	87 2b       	or	r24, r23
    178c:	76 2f       	mov	r23, r22
    178e:	07 c0       	rjmp	.+14     	; 0x179e <__fp_mintl+0x1e>
    1790:	66 23       	and	r22, r22
    1792:	11 f4       	brne	.+4      	; 0x1798 <__fp_mintl+0x18>
    1794:	99 27       	eor	r25, r25
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <__fp_mintl+0x32>
    1798:	90 51       	subi	r25, 0x10	; 16
    179a:	86 2b       	or	r24, r22
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	2a f0       	brmi	.+10     	; 0x17ac <__fp_mintl+0x2c>
    17a2:	9a 95       	dec	r25
    17a4:	66 0f       	add	r22, r22
    17a6:	77 1f       	adc	r23, r23
    17a8:	88 1f       	adc	r24, r24
    17aa:	da f7       	brpl	.-10     	; 0x17a2 <__fp_mintl+0x22>
    17ac:	88 0f       	add	r24, r24
    17ae:	96 95       	lsr	r25
    17b0:	87 95       	ror	r24
    17b2:	97 f9       	bld	r25, 7
    17b4:	08 95       	ret

000017b6 <__fp_mpack>:
    17b6:	9f 3f       	cpi	r25, 0xFF	; 255
    17b8:	31 f0       	breq	.+12     	; 0x17c6 <__fp_mpack_finite+0xc>

000017ba <__fp_mpack_finite>:
    17ba:	91 50       	subi	r25, 0x01	; 1
    17bc:	20 f4       	brcc	.+8      	; 0x17c6 <__fp_mpack_finite+0xc>
    17be:	87 95       	ror	r24
    17c0:	77 95       	ror	r23
    17c2:	67 95       	ror	r22
    17c4:	b7 95       	ror	r27
    17c6:	88 0f       	add	r24, r24
    17c8:	91 1d       	adc	r25, r1
    17ca:	96 95       	lsr	r25
    17cc:	87 95       	ror	r24
    17ce:	97 f9       	bld	r25, 7
    17d0:	08 95       	ret

000017d2 <__umulhisi3>:
    17d2:	a2 9f       	mul	r26, r18
    17d4:	b0 01       	movw	r22, r0
    17d6:	b3 9f       	mul	r27, r19
    17d8:	c0 01       	movw	r24, r0
    17da:	a3 9f       	mul	r26, r19
    17dc:	70 0d       	add	r23, r0
    17de:	81 1d       	adc	r24, r1
    17e0:	11 24       	eor	r1, r1
    17e2:	91 1d       	adc	r25, r1
    17e4:	b2 9f       	mul	r27, r18
    17e6:	70 0d       	add	r23, r0
    17e8:	81 1d       	adc	r24, r1
    17ea:	11 24       	eor	r1, r1
    17ec:	91 1d       	adc	r25, r1
    17ee:	08 95       	ret

000017f0 <malloc>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	82 30       	cpi	r24, 0x02	; 2
    17fa:	91 05       	cpc	r25, r1
    17fc:	10 f4       	brcc	.+4      	; 0x1802 <malloc+0x12>
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	e0 91 6b 23 	lds	r30, 0x236B	; 0x80236b <__flp>
    1806:	f0 91 6c 23 	lds	r31, 0x236C	; 0x80236c <__flp+0x1>
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	a0 e0       	ldi	r26, 0x00	; 0
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	30 97       	sbiw	r30, 0x00	; 0
    1814:	19 f1       	breq	.+70     	; 0x185c <malloc+0x6c>
    1816:	40 81       	ld	r20, Z
    1818:	51 81       	ldd	r21, Z+1	; 0x01
    181a:	02 81       	ldd	r16, Z+2	; 0x02
    181c:	13 81       	ldd	r17, Z+3	; 0x03
    181e:	48 17       	cp	r20, r24
    1820:	59 07       	cpc	r21, r25
    1822:	c8 f0       	brcs	.+50     	; 0x1856 <malloc+0x66>
    1824:	84 17       	cp	r24, r20
    1826:	95 07       	cpc	r25, r21
    1828:	69 f4       	brne	.+26     	; 0x1844 <malloc+0x54>
    182a:	10 97       	sbiw	r26, 0x00	; 0
    182c:	31 f0       	breq	.+12     	; 0x183a <malloc+0x4a>
    182e:	12 96       	adiw	r26, 0x02	; 2
    1830:	0c 93       	st	X, r16
    1832:	12 97       	sbiw	r26, 0x02	; 2
    1834:	13 96       	adiw	r26, 0x03	; 3
    1836:	1c 93       	st	X, r17
    1838:	27 c0       	rjmp	.+78     	; 0x1888 <malloc+0x98>
    183a:	00 93 6b 23 	sts	0x236B, r16	; 0x80236b <__flp>
    183e:	10 93 6c 23 	sts	0x236C, r17	; 0x80236c <__flp+0x1>
    1842:	22 c0       	rjmp	.+68     	; 0x1888 <malloc+0x98>
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	19 f0       	breq	.+6      	; 0x1850 <malloc+0x60>
    184a:	42 17       	cp	r20, r18
    184c:	53 07       	cpc	r21, r19
    184e:	18 f4       	brcc	.+6      	; 0x1856 <malloc+0x66>
    1850:	9a 01       	movw	r18, r20
    1852:	bd 01       	movw	r22, r26
    1854:	ef 01       	movw	r28, r30
    1856:	df 01       	movw	r26, r30
    1858:	f8 01       	movw	r30, r16
    185a:	db cf       	rjmp	.-74     	; 0x1812 <malloc+0x22>
    185c:	21 15       	cp	r18, r1
    185e:	31 05       	cpc	r19, r1
    1860:	f9 f0       	breq	.+62     	; 0x18a0 <malloc+0xb0>
    1862:	28 1b       	sub	r18, r24
    1864:	39 0b       	sbc	r19, r25
    1866:	24 30       	cpi	r18, 0x04	; 4
    1868:	31 05       	cpc	r19, r1
    186a:	80 f4       	brcc	.+32     	; 0x188c <malloc+0x9c>
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	9b 81       	ldd	r25, Y+3	; 0x03
    1870:	61 15       	cp	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	21 f0       	breq	.+8      	; 0x187e <malloc+0x8e>
    1876:	fb 01       	movw	r30, r22
    1878:	82 83       	std	Z+2, r24	; 0x02
    187a:	93 83       	std	Z+3, r25	; 0x03
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <malloc+0x96>
    187e:	80 93 6b 23 	sts	0x236B, r24	; 0x80236b <__flp>
    1882:	90 93 6c 23 	sts	0x236C, r25	; 0x80236c <__flp+0x1>
    1886:	fe 01       	movw	r30, r28
    1888:	32 96       	adiw	r30, 0x02	; 2
    188a:	44 c0       	rjmp	.+136    	; 0x1914 <malloc+0x124>
    188c:	fe 01       	movw	r30, r28
    188e:	e2 0f       	add	r30, r18
    1890:	f3 1f       	adc	r31, r19
    1892:	81 93       	st	Z+, r24
    1894:	91 93       	st	Z+, r25
    1896:	22 50       	subi	r18, 0x02	; 2
    1898:	31 09       	sbc	r19, r1
    189a:	28 83       	st	Y, r18
    189c:	39 83       	std	Y+1, r19	; 0x01
    189e:	3a c0       	rjmp	.+116    	; 0x1914 <malloc+0x124>
    18a0:	20 91 69 23 	lds	r18, 0x2369	; 0x802369 <__brkval>
    18a4:	30 91 6a 23 	lds	r19, 0x236A	; 0x80236a <__brkval+0x1>
    18a8:	23 2b       	or	r18, r19
    18aa:	41 f4       	brne	.+16     	; 0x18bc <malloc+0xcc>
    18ac:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    18b0:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    18b4:	20 93 69 23 	sts	0x2369, r18	; 0x802369 <__brkval>
    18b8:	30 93 6a 23 	sts	0x236A, r19	; 0x80236a <__brkval+0x1>
    18bc:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    18c0:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    18c4:	21 15       	cp	r18, r1
    18c6:	31 05       	cpc	r19, r1
    18c8:	41 f4       	brne	.+16     	; 0x18da <malloc+0xea>
    18ca:	2d b7       	in	r18, 0x3d	; 61
    18cc:	3e b7       	in	r19, 0x3e	; 62
    18ce:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    18d2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    18d6:	24 1b       	sub	r18, r20
    18d8:	35 0b       	sbc	r19, r21
    18da:	e0 91 69 23 	lds	r30, 0x2369	; 0x802369 <__brkval>
    18de:	f0 91 6a 23 	lds	r31, 0x236A	; 0x80236a <__brkval+0x1>
    18e2:	e2 17       	cp	r30, r18
    18e4:	f3 07       	cpc	r31, r19
    18e6:	a0 f4       	brcc	.+40     	; 0x1910 <malloc+0x120>
    18e8:	2e 1b       	sub	r18, r30
    18ea:	3f 0b       	sbc	r19, r31
    18ec:	28 17       	cp	r18, r24
    18ee:	39 07       	cpc	r19, r25
    18f0:	78 f0       	brcs	.+30     	; 0x1910 <malloc+0x120>
    18f2:	ac 01       	movw	r20, r24
    18f4:	4e 5f       	subi	r20, 0xFE	; 254
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	24 17       	cp	r18, r20
    18fa:	35 07       	cpc	r19, r21
    18fc:	48 f0       	brcs	.+18     	; 0x1910 <malloc+0x120>
    18fe:	4e 0f       	add	r20, r30
    1900:	5f 1f       	adc	r21, r31
    1902:	40 93 69 23 	sts	0x2369, r20	; 0x802369 <__brkval>
    1906:	50 93 6a 23 	sts	0x236A, r21	; 0x80236a <__brkval+0x1>
    190a:	81 93       	st	Z+, r24
    190c:	91 93       	st	Z+, r25
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <malloc+0x124>
    1910:	e0 e0       	ldi	r30, 0x00	; 0
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	cf 01       	movw	r24, r30
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	08 95       	ret

00001920 <free>:
    1920:	cf 93       	push	r28
    1922:	df 93       	push	r29
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	09 f4       	brne	.+2      	; 0x192a <free+0xa>
    1928:	81 c0       	rjmp	.+258    	; 0x1a2c <free+0x10c>
    192a:	fc 01       	movw	r30, r24
    192c:	32 97       	sbiw	r30, 0x02	; 2
    192e:	12 82       	std	Z+2, r1	; 0x02
    1930:	13 82       	std	Z+3, r1	; 0x03
    1932:	a0 91 6b 23 	lds	r26, 0x236B	; 0x80236b <__flp>
    1936:	b0 91 6c 23 	lds	r27, 0x236C	; 0x80236c <__flp+0x1>
    193a:	10 97       	sbiw	r26, 0x00	; 0
    193c:	81 f4       	brne	.+32     	; 0x195e <free+0x3e>
    193e:	20 81       	ld	r18, Z
    1940:	31 81       	ldd	r19, Z+1	; 0x01
    1942:	82 0f       	add	r24, r18
    1944:	93 1f       	adc	r25, r19
    1946:	20 91 69 23 	lds	r18, 0x2369	; 0x802369 <__brkval>
    194a:	30 91 6a 23 	lds	r19, 0x236A	; 0x80236a <__brkval+0x1>
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	51 f5       	brne	.+84     	; 0x19a8 <free+0x88>
    1954:	e0 93 69 23 	sts	0x2369, r30	; 0x802369 <__brkval>
    1958:	f0 93 6a 23 	sts	0x236A, r31	; 0x80236a <__brkval+0x1>
    195c:	67 c0       	rjmp	.+206    	; 0x1a2c <free+0x10c>
    195e:	ed 01       	movw	r28, r26
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	ce 17       	cp	r28, r30
    1966:	df 07       	cpc	r29, r31
    1968:	40 f4       	brcc	.+16     	; 0x197a <free+0x5a>
    196a:	4a 81       	ldd	r20, Y+2	; 0x02
    196c:	5b 81       	ldd	r21, Y+3	; 0x03
    196e:	9e 01       	movw	r18, r28
    1970:	41 15       	cp	r20, r1
    1972:	51 05       	cpc	r21, r1
    1974:	f1 f0       	breq	.+60     	; 0x19b2 <free+0x92>
    1976:	ea 01       	movw	r28, r20
    1978:	f5 cf       	rjmp	.-22     	; 0x1964 <free+0x44>
    197a:	c2 83       	std	Z+2, r28	; 0x02
    197c:	d3 83       	std	Z+3, r29	; 0x03
    197e:	40 81       	ld	r20, Z
    1980:	51 81       	ldd	r21, Z+1	; 0x01
    1982:	84 0f       	add	r24, r20
    1984:	95 1f       	adc	r25, r21
    1986:	c8 17       	cp	r28, r24
    1988:	d9 07       	cpc	r29, r25
    198a:	59 f4       	brne	.+22     	; 0x19a2 <free+0x82>
    198c:	88 81       	ld	r24, Y
    198e:	99 81       	ldd	r25, Y+1	; 0x01
    1990:	84 0f       	add	r24, r20
    1992:	95 1f       	adc	r25, r21
    1994:	02 96       	adiw	r24, 0x02	; 2
    1996:	80 83       	st	Z, r24
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	9b 81       	ldd	r25, Y+3	; 0x03
    199e:	82 83       	std	Z+2, r24	; 0x02
    19a0:	93 83       	std	Z+3, r25	; 0x03
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	29 f4       	brne	.+10     	; 0x19b2 <free+0x92>
    19a8:	e0 93 6b 23 	sts	0x236B, r30	; 0x80236b <__flp>
    19ac:	f0 93 6c 23 	sts	0x236C, r31	; 0x80236c <__flp+0x1>
    19b0:	3d c0       	rjmp	.+122    	; 0x1a2c <free+0x10c>
    19b2:	e9 01       	movw	r28, r18
    19b4:	ea 83       	std	Y+2, r30	; 0x02
    19b6:	fb 83       	std	Y+3, r31	; 0x03
    19b8:	49 91       	ld	r20, Y+
    19ba:	59 91       	ld	r21, Y+
    19bc:	c4 0f       	add	r28, r20
    19be:	d5 1f       	adc	r29, r21
    19c0:	ec 17       	cp	r30, r28
    19c2:	fd 07       	cpc	r31, r29
    19c4:	61 f4       	brne	.+24     	; 0x19de <free+0xbe>
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	84 0f       	add	r24, r20
    19cc:	95 1f       	adc	r25, r21
    19ce:	02 96       	adiw	r24, 0x02	; 2
    19d0:	e9 01       	movw	r28, r18
    19d2:	88 83       	st	Y, r24
    19d4:	99 83       	std	Y+1, r25	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	8a 83       	std	Y+2, r24	; 0x02
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	e0 e0       	ldi	r30, 0x00	; 0
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	12 96       	adiw	r26, 0x02	; 2
    19e4:	8d 91       	ld	r24, X+
    19e6:	9c 91       	ld	r25, X
    19e8:	13 97       	sbiw	r26, 0x03	; 3
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	19 f0       	breq	.+6      	; 0x19f4 <free+0xd4>
    19ee:	fd 01       	movw	r30, r26
    19f0:	dc 01       	movw	r26, r24
    19f2:	f7 cf       	rjmp	.-18     	; 0x19e2 <free+0xc2>
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	11 97       	sbiw	r26, 0x01	; 1
    19fa:	9d 01       	movw	r18, r26
    19fc:	2e 5f       	subi	r18, 0xFE	; 254
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	82 0f       	add	r24, r18
    1a02:	93 1f       	adc	r25, r19
    1a04:	20 91 69 23 	lds	r18, 0x2369	; 0x802369 <__brkval>
    1a08:	30 91 6a 23 	lds	r19, 0x236A	; 0x80236a <__brkval+0x1>
    1a0c:	28 17       	cp	r18, r24
    1a0e:	39 07       	cpc	r19, r25
    1a10:	69 f4       	brne	.+26     	; 0x1a2c <free+0x10c>
    1a12:	30 97       	sbiw	r30, 0x00	; 0
    1a14:	29 f4       	brne	.+10     	; 0x1a20 <free+0x100>
    1a16:	10 92 6b 23 	sts	0x236B, r1	; 0x80236b <__flp>
    1a1a:	10 92 6c 23 	sts	0x236C, r1	; 0x80236c <__flp+0x1>
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <free+0x104>
    1a20:	12 82       	std	Z+2, r1	; 0x02
    1a22:	13 82       	std	Z+3, r1	; 0x03
    1a24:	a0 93 69 23 	sts	0x2369, r26	; 0x802369 <__brkval>
    1a28:	b0 93 6a 23 	sts	0x236A, r27	; 0x80236a <__brkval+0x1>
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	08 95       	ret

00001a32 <atoi>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	88 27       	eor	r24, r24
    1a36:	99 27       	eor	r25, r25
    1a38:	e8 94       	clt
    1a3a:	21 91       	ld	r18, Z+
    1a3c:	20 32       	cpi	r18, 0x20	; 32
    1a3e:	e9 f3       	breq	.-6      	; 0x1a3a <atoi+0x8>
    1a40:	29 30       	cpi	r18, 0x09	; 9
    1a42:	10 f0       	brcs	.+4      	; 0x1a48 <atoi+0x16>
    1a44:	2e 30       	cpi	r18, 0x0E	; 14
    1a46:	c8 f3       	brcs	.-14     	; 0x1a3a <atoi+0x8>
    1a48:	2b 32       	cpi	r18, 0x2B	; 43
    1a4a:	41 f0       	breq	.+16     	; 0x1a5c <atoi+0x2a>
    1a4c:	2d 32       	cpi	r18, 0x2D	; 45
    1a4e:	39 f4       	brne	.+14     	; 0x1a5e <atoi+0x2c>
    1a50:	68 94       	set
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <atoi+0x2a>
    1a54:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__mulhi_const_10>
    1a58:	82 0f       	add	r24, r18
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	21 91       	ld	r18, Z+
    1a5e:	20 53       	subi	r18, 0x30	; 48
    1a60:	2a 30       	cpi	r18, 0x0A	; 10
    1a62:	c0 f3       	brcs	.-16     	; 0x1a54 <atoi+0x22>
    1a64:	1e f4       	brtc	.+6      	; 0x1a6c <atoi+0x3a>
    1a66:	90 95       	com	r25
    1a68:	81 95       	neg	r24
    1a6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a6c:	08 95       	ret

00001a6e <memcpy>:
    1a6e:	fb 01       	movw	r30, r22
    1a70:	dc 01       	movw	r26, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <memcpy+0xa>
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	41 50       	subi	r20, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	d8 f7       	brcc	.-10     	; 0x1a74 <memcpy+0x6>
    1a7e:	08 95       	ret

00001a80 <strcmp>:
    1a80:	fb 01       	movw	r30, r22
    1a82:	dc 01       	movw	r26, r24
    1a84:	8d 91       	ld	r24, X+
    1a86:	01 90       	ld	r0, Z+
    1a88:	80 19       	sub	r24, r0
    1a8a:	01 10       	cpse	r0, r1
    1a8c:	d9 f3       	breq	.-10     	; 0x1a84 <strcmp+0x4>
    1a8e:	99 0b       	sbc	r25, r25
    1a90:	08 95       	ret

00001a92 <__mulhi_const_10>:
    1a92:	7a e0       	ldi	r23, 0x0A	; 10
    1a94:	97 9f       	mul	r25, r23
    1a96:	90 2d       	mov	r25, r0
    1a98:	87 9f       	mul	r24, r23
    1a9a:	80 2d       	mov	r24, r0
    1a9c:	91 0d       	add	r25, r1
    1a9e:	11 24       	eor	r1, r1
    1aa0:	08 95       	ret

00001aa2 <fgetc>:
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	ec 01       	movw	r28, r24
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	20 ff       	sbrs	r18, 0
    1aac:	33 c0       	rjmp	.+102    	; 0x1b14 <fgetc+0x72>
    1aae:	26 ff       	sbrs	r18, 6
    1ab0:	0a c0       	rjmp	.+20     	; 0x1ac6 <fgetc+0x24>
    1ab2:	2f 7b       	andi	r18, 0xBF	; 191
    1ab4:	2b 83       	std	Y+3, r18	; 0x03
    1ab6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	8e 83       	std	Y+6, r24	; 0x06
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	29 c0       	rjmp	.+82     	; 0x1b18 <fgetc+0x76>
    1ac6:	22 ff       	sbrs	r18, 2
    1ac8:	0f c0       	rjmp	.+30     	; 0x1ae8 <fgetc+0x46>
    1aca:	e8 81       	ld	r30, Y
    1acc:	f9 81       	ldd	r31, Y+1	; 0x01
    1ace:	80 81       	ld	r24, Z
    1ad0:	08 2e       	mov	r0, r24
    1ad2:	00 0c       	add	r0, r0
    1ad4:	99 0b       	sbc	r25, r25
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <fgetc+0x3e>
    1ada:	20 62       	ori	r18, 0x20	; 32
    1adc:	2b 83       	std	Y+3, r18	; 0x03
    1ade:	1a c0       	rjmp	.+52     	; 0x1b14 <fgetc+0x72>
    1ae0:	31 96       	adiw	r30, 0x01	; 1
    1ae2:	e8 83       	st	Y, r30
    1ae4:	f9 83       	std	Y+1, r31	; 0x01
    1ae6:	0e c0       	rjmp	.+28     	; 0x1b04 <fgetc+0x62>
    1ae8:	ea 85       	ldd	r30, Y+10	; 0x0a
    1aea:	fb 85       	ldd	r31, Y+11	; 0x0b
    1aec:	19 95       	eicall
    1aee:	97 ff       	sbrs	r25, 7
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <fgetc+0x62>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	11 f0       	breq	.+4      	; 0x1afc <fgetc+0x5a>
    1af8:	80 e2       	ldi	r24, 0x20	; 32
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <fgetc+0x5c>
    1afc:	80 e1       	ldi	r24, 0x10	; 16
    1afe:	82 2b       	or	r24, r18
    1b00:	8b 83       	std	Y+3, r24	; 0x03
    1b02:	08 c0       	rjmp	.+16     	; 0x1b14 <fgetc+0x72>
    1b04:	2e 81       	ldd	r18, Y+6	; 0x06
    1b06:	3f 81       	ldd	r19, Y+7	; 0x07
    1b08:	2f 5f       	subi	r18, 0xFF	; 255
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	2e 83       	std	Y+6, r18	; 0x06
    1b0e:	3f 83       	std	Y+7, r19	; 0x07
    1b10:	99 27       	eor	r25, r25
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <fgetc+0x76>
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <printf>:
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	ae 01       	movw	r20, r28
    1b28:	4a 5f       	subi	r20, 0xFA	; 250
    1b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b2c:	fa 01       	movw	r30, r20
    1b2e:	61 91       	ld	r22, Z+
    1b30:	71 91       	ld	r23, Z+
    1b32:	af 01       	movw	r20, r30
    1b34:	80 91 6f 23 	lds	r24, 0x236F	; 0x80236f <__iob+0x2>
    1b38:	90 91 70 23 	lds	r25, 0x2370	; 0x802370 <__iob+0x3>
    1b3c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <vfprintf>
    1b40:	df 91       	pop	r29
    1b42:	cf 91       	pop	r28
    1b44:	08 95       	ret

00001b46 <puts>:
    1b46:	0f 93       	push	r16
    1b48:	1f 93       	push	r17
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	e0 91 6f 23 	lds	r30, 0x236F	; 0x80236f <__iob+0x2>
    1b52:	f0 91 70 23 	lds	r31, 0x2370	; 0x802370 <__iob+0x3>
    1b56:	23 81       	ldd	r18, Z+3	; 0x03
    1b58:	21 ff       	sbrs	r18, 1
    1b5a:	1b c0       	rjmp	.+54     	; 0x1b92 <puts+0x4c>
    1b5c:	8c 01       	movw	r16, r24
    1b5e:	d0 e0       	ldi	r29, 0x00	; 0
    1b60:	c0 e0       	ldi	r28, 0x00	; 0
    1b62:	f8 01       	movw	r30, r16
    1b64:	81 91       	ld	r24, Z+
    1b66:	8f 01       	movw	r16, r30
    1b68:	60 91 6f 23 	lds	r22, 0x236F	; 0x80236f <__iob+0x2>
    1b6c:	70 91 70 23 	lds	r23, 0x2370	; 0x802370 <__iob+0x3>
    1b70:	db 01       	movw	r26, r22
    1b72:	18 96       	adiw	r26, 0x08	; 8
    1b74:	ed 91       	ld	r30, X+
    1b76:	fc 91       	ld	r31, X
    1b78:	19 97       	sbiw	r26, 0x09	; 9
    1b7a:	88 23       	and	r24, r24
    1b7c:	31 f0       	breq	.+12     	; 0x1b8a <puts+0x44>
    1b7e:	19 95       	eicall
    1b80:	89 2b       	or	r24, r25
    1b82:	79 f3       	breq	.-34     	; 0x1b62 <puts+0x1c>
    1b84:	df ef       	ldi	r29, 0xFF	; 255
    1b86:	cf ef       	ldi	r28, 0xFF	; 255
    1b88:	ec cf       	rjmp	.-40     	; 0x1b62 <puts+0x1c>
    1b8a:	8a e0       	ldi	r24, 0x0A	; 10
    1b8c:	19 95       	eicall
    1b8e:	89 2b       	or	r24, r25
    1b90:	19 f0       	breq	.+6      	; 0x1b98 <puts+0x52>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	9f ef       	ldi	r25, 0xFF	; 255
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <puts+0x56>
    1b98:	8d 2f       	mov	r24, r29
    1b9a:	9c 2f       	mov	r25, r28
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	08 95       	ret

00001ba6 <vfprintf>:
    1ba6:	2f 92       	push	r2
    1ba8:	3f 92       	push	r3
    1baa:	4f 92       	push	r4
    1bac:	5f 92       	push	r5
    1bae:	6f 92       	push	r6
    1bb0:	7f 92       	push	r7
    1bb2:	8f 92       	push	r8
    1bb4:	9f 92       	push	r9
    1bb6:	af 92       	push	r10
    1bb8:	bf 92       	push	r11
    1bba:	cf 92       	push	r12
    1bbc:	df 92       	push	r13
    1bbe:	ef 92       	push	r14
    1bc0:	ff 92       	push	r15
    1bc2:	0f 93       	push	r16
    1bc4:	1f 93       	push	r17
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	2b 97       	sbiw	r28, 0x0b	; 11
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	6c 01       	movw	r12, r24
    1bd6:	7b 01       	movw	r14, r22
    1bd8:	8a 01       	movw	r16, r20
    1bda:	fc 01       	movw	r30, r24
    1bdc:	16 82       	std	Z+6, r1	; 0x06
    1bde:	17 82       	std	Z+7, r1	; 0x07
    1be0:	83 81       	ldd	r24, Z+3	; 0x03
    1be2:	81 ff       	sbrs	r24, 1
    1be4:	cc c1       	rjmp	.+920    	; 0x1f7e <vfprintf+0x3d8>
    1be6:	ce 01       	movw	r24, r28
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	3c 01       	movw	r6, r24
    1bec:	f6 01       	movw	r30, r12
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	f7 01       	movw	r30, r14
    1bf2:	93 fd       	sbrc	r25, 3
    1bf4:	85 91       	lpm	r24, Z+
    1bf6:	93 ff       	sbrs	r25, 3
    1bf8:	81 91       	ld	r24, Z+
    1bfa:	7f 01       	movw	r14, r30
    1bfc:	88 23       	and	r24, r24
    1bfe:	09 f4       	brne	.+2      	; 0x1c02 <vfprintf+0x5c>
    1c00:	ba c1       	rjmp	.+884    	; 0x1f76 <vfprintf+0x3d0>
    1c02:	85 32       	cpi	r24, 0x25	; 37
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <vfprintf+0x6e>
    1c06:	93 fd       	sbrc	r25, 3
    1c08:	85 91       	lpm	r24, Z+
    1c0a:	93 ff       	sbrs	r25, 3
    1c0c:	81 91       	ld	r24, Z+
    1c0e:	7f 01       	movw	r14, r30
    1c10:	85 32       	cpi	r24, 0x25	; 37
    1c12:	29 f4       	brne	.+10     	; 0x1c1e <vfprintf+0x78>
    1c14:	b6 01       	movw	r22, r12
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1c1c:	e7 cf       	rjmp	.-50     	; 0x1bec <vfprintf+0x46>
    1c1e:	91 2c       	mov	r9, r1
    1c20:	21 2c       	mov	r2, r1
    1c22:	31 2c       	mov	r3, r1
    1c24:	ff e1       	ldi	r31, 0x1F	; 31
    1c26:	f3 15       	cp	r31, r3
    1c28:	d8 f0       	brcs	.+54     	; 0x1c60 <vfprintf+0xba>
    1c2a:	8b 32       	cpi	r24, 0x2B	; 43
    1c2c:	79 f0       	breq	.+30     	; 0x1c4c <vfprintf+0xa6>
    1c2e:	38 f4       	brcc	.+14     	; 0x1c3e <vfprintf+0x98>
    1c30:	80 32       	cpi	r24, 0x20	; 32
    1c32:	79 f0       	breq	.+30     	; 0x1c52 <vfprintf+0xac>
    1c34:	83 32       	cpi	r24, 0x23	; 35
    1c36:	a1 f4       	brne	.+40     	; 0x1c60 <vfprintf+0xba>
    1c38:	23 2d       	mov	r18, r3
    1c3a:	20 61       	ori	r18, 0x10	; 16
    1c3c:	1d c0       	rjmp	.+58     	; 0x1c78 <vfprintf+0xd2>
    1c3e:	8d 32       	cpi	r24, 0x2D	; 45
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <vfprintf+0xb4>
    1c42:	80 33       	cpi	r24, 0x30	; 48
    1c44:	69 f4       	brne	.+26     	; 0x1c60 <vfprintf+0xba>
    1c46:	23 2d       	mov	r18, r3
    1c48:	21 60       	ori	r18, 0x01	; 1
    1c4a:	16 c0       	rjmp	.+44     	; 0x1c78 <vfprintf+0xd2>
    1c4c:	83 2d       	mov	r24, r3
    1c4e:	82 60       	ori	r24, 0x02	; 2
    1c50:	38 2e       	mov	r3, r24
    1c52:	e3 2d       	mov	r30, r3
    1c54:	e4 60       	ori	r30, 0x04	; 4
    1c56:	3e 2e       	mov	r3, r30
    1c58:	2a c0       	rjmp	.+84     	; 0x1cae <vfprintf+0x108>
    1c5a:	f3 2d       	mov	r31, r3
    1c5c:	f8 60       	ori	r31, 0x08	; 8
    1c5e:	1d c0       	rjmp	.+58     	; 0x1c9a <vfprintf+0xf4>
    1c60:	37 fc       	sbrc	r3, 7
    1c62:	2d c0       	rjmp	.+90     	; 0x1cbe <vfprintf+0x118>
    1c64:	20 ed       	ldi	r18, 0xD0	; 208
    1c66:	28 0f       	add	r18, r24
    1c68:	2a 30       	cpi	r18, 0x0A	; 10
    1c6a:	40 f0       	brcs	.+16     	; 0x1c7c <vfprintf+0xd6>
    1c6c:	8e 32       	cpi	r24, 0x2E	; 46
    1c6e:	b9 f4       	brne	.+46     	; 0x1c9e <vfprintf+0xf8>
    1c70:	36 fc       	sbrc	r3, 6
    1c72:	81 c1       	rjmp	.+770    	; 0x1f76 <vfprintf+0x3d0>
    1c74:	23 2d       	mov	r18, r3
    1c76:	20 64       	ori	r18, 0x40	; 64
    1c78:	32 2e       	mov	r3, r18
    1c7a:	19 c0       	rjmp	.+50     	; 0x1cae <vfprintf+0x108>
    1c7c:	36 fe       	sbrs	r3, 6
    1c7e:	06 c0       	rjmp	.+12     	; 0x1c8c <vfprintf+0xe6>
    1c80:	8a e0       	ldi	r24, 0x0A	; 10
    1c82:	98 9e       	mul	r9, r24
    1c84:	20 0d       	add	r18, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	92 2e       	mov	r9, r18
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <vfprintf+0x108>
    1c8c:	ea e0       	ldi	r30, 0x0A	; 10
    1c8e:	2e 9e       	mul	r2, r30
    1c90:	20 0d       	add	r18, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	22 2e       	mov	r2, r18
    1c96:	f3 2d       	mov	r31, r3
    1c98:	f0 62       	ori	r31, 0x20	; 32
    1c9a:	3f 2e       	mov	r3, r31
    1c9c:	08 c0       	rjmp	.+16     	; 0x1cae <vfprintf+0x108>
    1c9e:	8c 36       	cpi	r24, 0x6C	; 108
    1ca0:	21 f4       	brne	.+8      	; 0x1caa <vfprintf+0x104>
    1ca2:	83 2d       	mov	r24, r3
    1ca4:	80 68       	ori	r24, 0x80	; 128
    1ca6:	38 2e       	mov	r3, r24
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <vfprintf+0x108>
    1caa:	88 36       	cpi	r24, 0x68	; 104
    1cac:	41 f4       	brne	.+16     	; 0x1cbe <vfprintf+0x118>
    1cae:	f7 01       	movw	r30, r14
    1cb0:	93 fd       	sbrc	r25, 3
    1cb2:	85 91       	lpm	r24, Z+
    1cb4:	93 ff       	sbrs	r25, 3
    1cb6:	81 91       	ld	r24, Z+
    1cb8:	7f 01       	movw	r14, r30
    1cba:	81 11       	cpse	r24, r1
    1cbc:	b3 cf       	rjmp	.-154    	; 0x1c24 <vfprintf+0x7e>
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	9f 7d       	andi	r25, 0xDF	; 223
    1cc2:	95 54       	subi	r25, 0x45	; 69
    1cc4:	93 30       	cpi	r25, 0x03	; 3
    1cc6:	28 f4       	brcc	.+10     	; 0x1cd2 <vfprintf+0x12c>
    1cc8:	0c 5f       	subi	r16, 0xFC	; 252
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	9f e3       	ldi	r25, 0x3F	; 63
    1cce:	99 83       	std	Y+1, r25	; 0x01
    1cd0:	0d c0       	rjmp	.+26     	; 0x1cec <vfprintf+0x146>
    1cd2:	83 36       	cpi	r24, 0x63	; 99
    1cd4:	31 f0       	breq	.+12     	; 0x1ce2 <vfprintf+0x13c>
    1cd6:	83 37       	cpi	r24, 0x73	; 115
    1cd8:	71 f0       	breq	.+28     	; 0x1cf6 <vfprintf+0x150>
    1cda:	83 35       	cpi	r24, 0x53	; 83
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <vfprintf+0x13a>
    1cde:	59 c0       	rjmp	.+178    	; 0x1d92 <vfprintf+0x1ec>
    1ce0:	21 c0       	rjmp	.+66     	; 0x1d24 <vfprintf+0x17e>
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 81       	ld	r24, Z
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	0e 5f       	subi	r16, 0xFE	; 254
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	88 24       	eor	r8, r8
    1cee:	83 94       	inc	r8
    1cf0:	91 2c       	mov	r9, r1
    1cf2:	53 01       	movw	r10, r6
    1cf4:	13 c0       	rjmp	.+38     	; 0x1d1c <vfprintf+0x176>
    1cf6:	28 01       	movw	r4, r16
    1cf8:	f2 e0       	ldi	r31, 0x02	; 2
    1cfa:	4f 0e       	add	r4, r31
    1cfc:	51 1c       	adc	r5, r1
    1cfe:	f8 01       	movw	r30, r16
    1d00:	a0 80       	ld	r10, Z
    1d02:	b1 80       	ldd	r11, Z+1	; 0x01
    1d04:	36 fe       	sbrs	r3, 6
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <vfprintf+0x168>
    1d08:	69 2d       	mov	r22, r9
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <vfprintf+0x16c>
    1d0e:	6f ef       	ldi	r22, 0xFF	; 255
    1d10:	7f ef       	ldi	r23, 0xFF	; 255
    1d12:	c5 01       	movw	r24, r10
    1d14:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <strnlen>
    1d18:	4c 01       	movw	r8, r24
    1d1a:	82 01       	movw	r16, r4
    1d1c:	f3 2d       	mov	r31, r3
    1d1e:	ff 77       	andi	r31, 0x7F	; 127
    1d20:	3f 2e       	mov	r3, r31
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <vfprintf+0x1aa>
    1d24:	28 01       	movw	r4, r16
    1d26:	22 e0       	ldi	r18, 0x02	; 2
    1d28:	42 0e       	add	r4, r18
    1d2a:	51 1c       	adc	r5, r1
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	a0 80       	ld	r10, Z
    1d30:	b1 80       	ldd	r11, Z+1	; 0x01
    1d32:	36 fe       	sbrs	r3, 6
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <vfprintf+0x196>
    1d36:	69 2d       	mov	r22, r9
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <vfprintf+0x19a>
    1d3c:	6f ef       	ldi	r22, 0xFF	; 255
    1d3e:	7f ef       	ldi	r23, 0xFF	; 255
    1d40:	c5 01       	movw	r24, r10
    1d42:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <strnlen_P>
    1d46:	4c 01       	movw	r8, r24
    1d48:	f3 2d       	mov	r31, r3
    1d4a:	f0 68       	ori	r31, 0x80	; 128
    1d4c:	3f 2e       	mov	r3, r31
    1d4e:	82 01       	movw	r16, r4
    1d50:	33 fc       	sbrc	r3, 3
    1d52:	1b c0       	rjmp	.+54     	; 0x1d8a <vfprintf+0x1e4>
    1d54:	82 2d       	mov	r24, r2
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	88 16       	cp	r8, r24
    1d5a:	99 06       	cpc	r9, r25
    1d5c:	b0 f4       	brcc	.+44     	; 0x1d8a <vfprintf+0x1e4>
    1d5e:	b6 01       	movw	r22, r12
    1d60:	80 e2       	ldi	r24, 0x20	; 32
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1d68:	2a 94       	dec	r2
    1d6a:	f4 cf       	rjmp	.-24     	; 0x1d54 <vfprintf+0x1ae>
    1d6c:	f5 01       	movw	r30, r10
    1d6e:	37 fc       	sbrc	r3, 7
    1d70:	85 91       	lpm	r24, Z+
    1d72:	37 fe       	sbrs	r3, 7
    1d74:	81 91       	ld	r24, Z+
    1d76:	5f 01       	movw	r10, r30
    1d78:	b6 01       	movw	r22, r12
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1d80:	21 10       	cpse	r2, r1
    1d82:	2a 94       	dec	r2
    1d84:	21 e0       	ldi	r18, 0x01	; 1
    1d86:	82 1a       	sub	r8, r18
    1d88:	91 08       	sbc	r9, r1
    1d8a:	81 14       	cp	r8, r1
    1d8c:	91 04       	cpc	r9, r1
    1d8e:	71 f7       	brne	.-36     	; 0x1d6c <vfprintf+0x1c6>
    1d90:	e8 c0       	rjmp	.+464    	; 0x1f62 <vfprintf+0x3bc>
    1d92:	84 36       	cpi	r24, 0x64	; 100
    1d94:	11 f0       	breq	.+4      	; 0x1d9a <vfprintf+0x1f4>
    1d96:	89 36       	cpi	r24, 0x69	; 105
    1d98:	41 f5       	brne	.+80     	; 0x1dea <vfprintf+0x244>
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	37 fe       	sbrs	r3, 7
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <vfprintf+0x208>
    1da0:	60 81       	ld	r22, Z
    1da2:	71 81       	ldd	r23, Z+1	; 0x01
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	0c 5f       	subi	r16, 0xFC	; 252
    1daa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dac:	08 c0       	rjmp	.+16     	; 0x1dbe <vfprintf+0x218>
    1dae:	60 81       	ld	r22, Z
    1db0:	71 81       	ldd	r23, Z+1	; 0x01
    1db2:	07 2e       	mov	r0, r23
    1db4:	00 0c       	add	r0, r0
    1db6:	88 0b       	sbc	r24, r24
    1db8:	99 0b       	sbc	r25, r25
    1dba:	0e 5f       	subi	r16, 0xFE	; 254
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	f3 2d       	mov	r31, r3
    1dc0:	ff 76       	andi	r31, 0x6F	; 111
    1dc2:	3f 2e       	mov	r3, r31
    1dc4:	97 ff       	sbrs	r25, 7
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <vfprintf+0x234>
    1dc8:	90 95       	com	r25
    1dca:	80 95       	com	r24
    1dcc:	70 95       	com	r23
    1dce:	61 95       	neg	r22
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	f0 68       	ori	r31, 0x80	; 128
    1dd8:	3f 2e       	mov	r3, r31
    1dda:	2a e0       	ldi	r18, 0x0A	; 10
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	a3 01       	movw	r20, r6
    1de0:	0e 94 29 10 	call	0x2052	; 0x2052 <__ultoa_invert>
    1de4:	88 2e       	mov	r8, r24
    1de6:	86 18       	sub	r8, r6
    1de8:	45 c0       	rjmp	.+138    	; 0x1e74 <vfprintf+0x2ce>
    1dea:	85 37       	cpi	r24, 0x75	; 117
    1dec:	31 f4       	brne	.+12     	; 0x1dfa <vfprintf+0x254>
    1dee:	23 2d       	mov	r18, r3
    1df0:	2f 7e       	andi	r18, 0xEF	; 239
    1df2:	b2 2e       	mov	r11, r18
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	25 c0       	rjmp	.+74     	; 0x1e44 <vfprintf+0x29e>
    1dfa:	93 2d       	mov	r25, r3
    1dfc:	99 7f       	andi	r25, 0xF9	; 249
    1dfe:	b9 2e       	mov	r11, r25
    1e00:	8f 36       	cpi	r24, 0x6F	; 111
    1e02:	c1 f0       	breq	.+48     	; 0x1e34 <vfprintf+0x28e>
    1e04:	18 f4       	brcc	.+6      	; 0x1e0c <vfprintf+0x266>
    1e06:	88 35       	cpi	r24, 0x58	; 88
    1e08:	79 f0       	breq	.+30     	; 0x1e28 <vfprintf+0x282>
    1e0a:	b5 c0       	rjmp	.+362    	; 0x1f76 <vfprintf+0x3d0>
    1e0c:	80 37       	cpi	r24, 0x70	; 112
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <vfprintf+0x270>
    1e10:	88 37       	cpi	r24, 0x78	; 120
    1e12:	21 f0       	breq	.+8      	; 0x1e1c <vfprintf+0x276>
    1e14:	b0 c0       	rjmp	.+352    	; 0x1f76 <vfprintf+0x3d0>
    1e16:	e9 2f       	mov	r30, r25
    1e18:	e0 61       	ori	r30, 0x10	; 16
    1e1a:	be 2e       	mov	r11, r30
    1e1c:	b4 fe       	sbrs	r11, 4
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <vfprintf+0x294>
    1e20:	fb 2d       	mov	r31, r11
    1e22:	f4 60       	ori	r31, 0x04	; 4
    1e24:	bf 2e       	mov	r11, r31
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <vfprintf+0x294>
    1e28:	34 fe       	sbrs	r3, 4
    1e2a:	0a c0       	rjmp	.+20     	; 0x1e40 <vfprintf+0x29a>
    1e2c:	29 2f       	mov	r18, r25
    1e2e:	26 60       	ori	r18, 0x06	; 6
    1e30:	b2 2e       	mov	r11, r18
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <vfprintf+0x29a>
    1e34:	28 e0       	ldi	r18, 0x08	; 8
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <vfprintf+0x29e>
    1e3a:	20 e1       	ldi	r18, 0x10	; 16
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <vfprintf+0x29e>
    1e40:	20 e1       	ldi	r18, 0x10	; 16
    1e42:	32 e0       	ldi	r19, 0x02	; 2
    1e44:	f8 01       	movw	r30, r16
    1e46:	b7 fe       	sbrs	r11, 7
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <vfprintf+0x2b2>
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	0c 5f       	subi	r16, 0xFC	; 252
    1e54:	1f 4f       	sbci	r17, 0xFF	; 255
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <vfprintf+0x2be>
    1e58:	60 81       	ld	r22, Z
    1e5a:	71 81       	ldd	r23, Z+1	; 0x01
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 5f       	subi	r16, 0xFE	; 254
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	a3 01       	movw	r20, r6
    1e66:	0e 94 29 10 	call	0x2052	; 0x2052 <__ultoa_invert>
    1e6a:	88 2e       	mov	r8, r24
    1e6c:	86 18       	sub	r8, r6
    1e6e:	fb 2d       	mov	r31, r11
    1e70:	ff 77       	andi	r31, 0x7F	; 127
    1e72:	3f 2e       	mov	r3, r31
    1e74:	36 fe       	sbrs	r3, 6
    1e76:	0d c0       	rjmp	.+26     	; 0x1e92 <vfprintf+0x2ec>
    1e78:	23 2d       	mov	r18, r3
    1e7a:	2e 7f       	andi	r18, 0xFE	; 254
    1e7c:	a2 2e       	mov	r10, r18
    1e7e:	89 14       	cp	r8, r9
    1e80:	58 f4       	brcc	.+22     	; 0x1e98 <vfprintf+0x2f2>
    1e82:	34 fe       	sbrs	r3, 4
    1e84:	0b c0       	rjmp	.+22     	; 0x1e9c <vfprintf+0x2f6>
    1e86:	32 fc       	sbrc	r3, 2
    1e88:	09 c0       	rjmp	.+18     	; 0x1e9c <vfprintf+0x2f6>
    1e8a:	83 2d       	mov	r24, r3
    1e8c:	8e 7e       	andi	r24, 0xEE	; 238
    1e8e:	a8 2e       	mov	r10, r24
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x2f6>
    1e92:	b8 2c       	mov	r11, r8
    1e94:	a3 2c       	mov	r10, r3
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <vfprintf+0x2f8>
    1e98:	b8 2c       	mov	r11, r8
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <vfprintf+0x2f8>
    1e9c:	b9 2c       	mov	r11, r9
    1e9e:	a4 fe       	sbrs	r10, 4
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <vfprintf+0x31a>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e8 0d       	add	r30, r8
    1ea6:	f1 1d       	adc	r31, r1
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 33       	cpi	r24, 0x30	; 48
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <vfprintf+0x310>
    1eae:	9a 2d       	mov	r25, r10
    1eb0:	99 7e       	andi	r25, 0xE9	; 233
    1eb2:	a9 2e       	mov	r10, r25
    1eb4:	09 c0       	rjmp	.+18     	; 0x1ec8 <vfprintf+0x322>
    1eb6:	a2 fe       	sbrs	r10, 2
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <vfprintf+0x320>
    1eba:	b3 94       	inc	r11
    1ebc:	b3 94       	inc	r11
    1ebe:	04 c0       	rjmp	.+8      	; 0x1ec8 <vfprintf+0x322>
    1ec0:	8a 2d       	mov	r24, r10
    1ec2:	86 78       	andi	r24, 0x86	; 134
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <vfprintf+0x322>
    1ec6:	b3 94       	inc	r11
    1ec8:	a3 fc       	sbrc	r10, 3
    1eca:	11 c0       	rjmp	.+34     	; 0x1eee <vfprintf+0x348>
    1ecc:	a0 fe       	sbrs	r10, 0
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <vfprintf+0x336>
    1ed0:	b2 14       	cp	r11, r2
    1ed2:	88 f4       	brcc	.+34     	; 0x1ef6 <vfprintf+0x350>
    1ed4:	28 0c       	add	r2, r8
    1ed6:	92 2c       	mov	r9, r2
    1ed8:	9b 18       	sub	r9, r11
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <vfprintf+0x352>
    1edc:	b2 14       	cp	r11, r2
    1ede:	60 f4       	brcc	.+24     	; 0x1ef8 <vfprintf+0x352>
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	80 e2       	ldi	r24, 0x20	; 32
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1eea:	b3 94       	inc	r11
    1eec:	f7 cf       	rjmp	.-18     	; 0x1edc <vfprintf+0x336>
    1eee:	b2 14       	cp	r11, r2
    1ef0:	18 f4       	brcc	.+6      	; 0x1ef8 <vfprintf+0x352>
    1ef2:	2b 18       	sub	r2, r11
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <vfprintf+0x354>
    1ef6:	98 2c       	mov	r9, r8
    1ef8:	21 2c       	mov	r2, r1
    1efa:	a4 fe       	sbrs	r10, 4
    1efc:	10 c0       	rjmp	.+32     	; 0x1f1e <vfprintf+0x378>
    1efe:	b6 01       	movw	r22, r12
    1f00:	80 e3       	ldi	r24, 0x30	; 48
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f08:	a2 fe       	sbrs	r10, 2
    1f0a:	17 c0       	rjmp	.+46     	; 0x1f3a <vfprintf+0x394>
    1f0c:	a1 fc       	sbrc	r10, 1
    1f0e:	03 c0       	rjmp	.+6      	; 0x1f16 <vfprintf+0x370>
    1f10:	88 e7       	ldi	r24, 0x78	; 120
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <vfprintf+0x374>
    1f16:	88 e5       	ldi	r24, 0x58	; 88
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	b6 01       	movw	r22, r12
    1f1c:	0c c0       	rjmp	.+24     	; 0x1f36 <vfprintf+0x390>
    1f1e:	8a 2d       	mov	r24, r10
    1f20:	86 78       	andi	r24, 0x86	; 134
    1f22:	59 f0       	breq	.+22     	; 0x1f3a <vfprintf+0x394>
    1f24:	a1 fe       	sbrs	r10, 1
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <vfprintf+0x386>
    1f28:	8b e2       	ldi	r24, 0x2B	; 43
    1f2a:	01 c0       	rjmp	.+2      	; 0x1f2e <vfprintf+0x388>
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	a7 fc       	sbrc	r10, 7
    1f30:	8d e2       	ldi	r24, 0x2D	; 45
    1f32:	b6 01       	movw	r22, r12
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f3a:	89 14       	cp	r8, r9
    1f3c:	38 f4       	brcc	.+14     	; 0x1f4c <vfprintf+0x3a6>
    1f3e:	b6 01       	movw	r22, r12
    1f40:	80 e3       	ldi	r24, 0x30	; 48
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f48:	9a 94       	dec	r9
    1f4a:	f7 cf       	rjmp	.-18     	; 0x1f3a <vfprintf+0x394>
    1f4c:	8a 94       	dec	r8
    1f4e:	f3 01       	movw	r30, r6
    1f50:	e8 0d       	add	r30, r8
    1f52:	f1 1d       	adc	r31, r1
    1f54:	80 81       	ld	r24, Z
    1f56:	b6 01       	movw	r22, r12
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f5e:	81 10       	cpse	r8, r1
    1f60:	f5 cf       	rjmp	.-22     	; 0x1f4c <vfprintf+0x3a6>
    1f62:	22 20       	and	r2, r2
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <vfprintf+0x3c2>
    1f66:	42 ce       	rjmp	.-892    	; 0x1bec <vfprintf+0x46>
    1f68:	b6 01       	movw	r22, r12
    1f6a:	80 e2       	ldi	r24, 0x20	; 32
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <fputc>
    1f72:	2a 94       	dec	r2
    1f74:	f6 cf       	rjmp	.-20     	; 0x1f62 <vfprintf+0x3bc>
    1f76:	f6 01       	movw	r30, r12
    1f78:	86 81       	ldd	r24, Z+6	; 0x06
    1f7a:	97 81       	ldd	r25, Z+7	; 0x07
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <vfprintf+0x3dc>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	9f ef       	ldi	r25, 0xFF	; 255
    1f82:	2b 96       	adiw	r28, 0x0b	; 11
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	bf 90       	pop	r11
    1f9a:	af 90       	pop	r10
    1f9c:	9f 90       	pop	r9
    1f9e:	8f 90       	pop	r8
    1fa0:	7f 90       	pop	r7
    1fa2:	6f 90       	pop	r6
    1fa4:	5f 90       	pop	r5
    1fa6:	4f 90       	pop	r4
    1fa8:	3f 90       	pop	r3
    1faa:	2f 90       	pop	r2
    1fac:	08 95       	ret

00001fae <strnlen_P>:
    1fae:	fc 01       	movw	r30, r24
    1fb0:	05 90       	lpm	r0, Z+
    1fb2:	61 50       	subi	r22, 0x01	; 1
    1fb4:	70 40       	sbci	r23, 0x00	; 0
    1fb6:	01 10       	cpse	r0, r1
    1fb8:	d8 f7       	brcc	.-10     	; 0x1fb0 <strnlen_P+0x2>
    1fba:	80 95       	com	r24
    1fbc:	90 95       	com	r25
    1fbe:	8e 0f       	add	r24, r30
    1fc0:	9f 1f       	adc	r25, r31
    1fc2:	08 95       	ret

00001fc4 <strnlen>:
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	61 50       	subi	r22, 0x01	; 1
    1fc8:	70 40       	sbci	r23, 0x00	; 0
    1fca:	01 90       	ld	r0, Z+
    1fcc:	01 10       	cpse	r0, r1
    1fce:	d8 f7       	brcc	.-10     	; 0x1fc6 <strnlen+0x2>
    1fd0:	80 95       	com	r24
    1fd2:	90 95       	com	r25
    1fd4:	8e 0f       	add	r24, r30
    1fd6:	9f 1f       	adc	r25, r31
    1fd8:	08 95       	ret

00001fda <fputc>:
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	fb 01       	movw	r30, r22
    1fe4:	23 81       	ldd	r18, Z+3	; 0x03
    1fe6:	21 fd       	sbrc	r18, 1
    1fe8:	03 c0       	rjmp	.+6      	; 0x1ff0 <fputc+0x16>
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	9f ef       	ldi	r25, 0xFF	; 255
    1fee:	2c c0       	rjmp	.+88     	; 0x2048 <fputc+0x6e>
    1ff0:	22 ff       	sbrs	r18, 2
    1ff2:	16 c0       	rjmp	.+44     	; 0x2020 <fputc+0x46>
    1ff4:	46 81       	ldd	r20, Z+6	; 0x06
    1ff6:	57 81       	ldd	r21, Z+7	; 0x07
    1ff8:	24 81       	ldd	r18, Z+4	; 0x04
    1ffa:	35 81       	ldd	r19, Z+5	; 0x05
    1ffc:	42 17       	cp	r20, r18
    1ffe:	53 07       	cpc	r21, r19
    2000:	44 f4       	brge	.+16     	; 0x2012 <fputc+0x38>
    2002:	a0 81       	ld	r26, Z
    2004:	b1 81       	ldd	r27, Z+1	; 0x01
    2006:	9d 01       	movw	r18, r26
    2008:	2f 5f       	subi	r18, 0xFF	; 255
    200a:	3f 4f       	sbci	r19, 0xFF	; 255
    200c:	20 83       	st	Z, r18
    200e:	31 83       	std	Z+1, r19	; 0x01
    2010:	8c 93       	st	X, r24
    2012:	26 81       	ldd	r18, Z+6	; 0x06
    2014:	37 81       	ldd	r19, Z+7	; 0x07
    2016:	2f 5f       	subi	r18, 0xFF	; 255
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	26 83       	std	Z+6, r18	; 0x06
    201c:	37 83       	std	Z+7, r19	; 0x07
    201e:	14 c0       	rjmp	.+40     	; 0x2048 <fputc+0x6e>
    2020:	8b 01       	movw	r16, r22
    2022:	ec 01       	movw	r28, r24
    2024:	fb 01       	movw	r30, r22
    2026:	00 84       	ldd	r0, Z+8	; 0x08
    2028:	f1 85       	ldd	r31, Z+9	; 0x09
    202a:	e0 2d       	mov	r30, r0
    202c:	19 95       	eicall
    202e:	89 2b       	or	r24, r25
    2030:	e1 f6       	brne	.-72     	; 0x1fea <fputc+0x10>
    2032:	d8 01       	movw	r26, r16
    2034:	16 96       	adiw	r26, 0x06	; 6
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	17 97       	sbiw	r26, 0x07	; 7
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	16 96       	adiw	r26, 0x06	; 6
    2040:	8d 93       	st	X+, r24
    2042:	9c 93       	st	X, r25
    2044:	17 97       	sbiw	r26, 0x07	; 7
    2046:	ce 01       	movw	r24, r28
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	08 95       	ret

00002052 <__ultoa_invert>:
    2052:	fa 01       	movw	r30, r20
    2054:	aa 27       	eor	r26, r26
    2056:	28 30       	cpi	r18, 0x08	; 8
    2058:	51 f1       	breq	.+84     	; 0x20ae <__ultoa_invert+0x5c>
    205a:	20 31       	cpi	r18, 0x10	; 16
    205c:	81 f1       	breq	.+96     	; 0x20be <__ultoa_invert+0x6c>
    205e:	e8 94       	clt
    2060:	6f 93       	push	r22
    2062:	6e 7f       	andi	r22, 0xFE	; 254
    2064:	6e 5f       	subi	r22, 0xFE	; 254
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	8f 4f       	sbci	r24, 0xFF	; 255
    206a:	9f 4f       	sbci	r25, 0xFF	; 255
    206c:	af 4f       	sbci	r26, 0xFF	; 255
    206e:	b1 e0       	ldi	r27, 0x01	; 1
    2070:	3e d0       	rcall	.+124    	; 0x20ee <__ultoa_invert+0x9c>
    2072:	b4 e0       	ldi	r27, 0x04	; 4
    2074:	3c d0       	rcall	.+120    	; 0x20ee <__ultoa_invert+0x9c>
    2076:	67 0f       	add	r22, r23
    2078:	78 1f       	adc	r23, r24
    207a:	89 1f       	adc	r24, r25
    207c:	9a 1f       	adc	r25, r26
    207e:	a1 1d       	adc	r26, r1
    2080:	68 0f       	add	r22, r24
    2082:	79 1f       	adc	r23, r25
    2084:	8a 1f       	adc	r24, r26
    2086:	91 1d       	adc	r25, r1
    2088:	a1 1d       	adc	r26, r1
    208a:	6a 0f       	add	r22, r26
    208c:	71 1d       	adc	r23, r1
    208e:	81 1d       	adc	r24, r1
    2090:	91 1d       	adc	r25, r1
    2092:	a1 1d       	adc	r26, r1
    2094:	20 d0       	rcall	.+64     	; 0x20d6 <__ultoa_invert+0x84>
    2096:	09 f4       	brne	.+2      	; 0x209a <__ultoa_invert+0x48>
    2098:	68 94       	set
    209a:	3f 91       	pop	r19
    209c:	2a e0       	ldi	r18, 0x0A	; 10
    209e:	26 9f       	mul	r18, r22
    20a0:	11 24       	eor	r1, r1
    20a2:	30 19       	sub	r19, r0
    20a4:	30 5d       	subi	r19, 0xD0	; 208
    20a6:	31 93       	st	Z+, r19
    20a8:	de f6       	brtc	.-74     	; 0x2060 <__ultoa_invert+0xe>
    20aa:	cf 01       	movw	r24, r30
    20ac:	08 95       	ret
    20ae:	46 2f       	mov	r20, r22
    20b0:	47 70       	andi	r20, 0x07	; 7
    20b2:	40 5d       	subi	r20, 0xD0	; 208
    20b4:	41 93       	st	Z+, r20
    20b6:	b3 e0       	ldi	r27, 0x03	; 3
    20b8:	0f d0       	rcall	.+30     	; 0x20d8 <__ultoa_invert+0x86>
    20ba:	c9 f7       	brne	.-14     	; 0x20ae <__ultoa_invert+0x5c>
    20bc:	f6 cf       	rjmp	.-20     	; 0x20aa <__ultoa_invert+0x58>
    20be:	46 2f       	mov	r20, r22
    20c0:	4f 70       	andi	r20, 0x0F	; 15
    20c2:	40 5d       	subi	r20, 0xD0	; 208
    20c4:	4a 33       	cpi	r20, 0x3A	; 58
    20c6:	18 f0       	brcs	.+6      	; 0x20ce <__ultoa_invert+0x7c>
    20c8:	49 5d       	subi	r20, 0xD9	; 217
    20ca:	31 fd       	sbrc	r19, 1
    20cc:	40 52       	subi	r20, 0x20	; 32
    20ce:	41 93       	st	Z+, r20
    20d0:	02 d0       	rcall	.+4      	; 0x20d6 <__ultoa_invert+0x84>
    20d2:	a9 f7       	brne	.-22     	; 0x20be <__ultoa_invert+0x6c>
    20d4:	ea cf       	rjmp	.-44     	; 0x20aa <__ultoa_invert+0x58>
    20d6:	b4 e0       	ldi	r27, 0x04	; 4
    20d8:	a6 95       	lsr	r26
    20da:	97 95       	ror	r25
    20dc:	87 95       	ror	r24
    20de:	77 95       	ror	r23
    20e0:	67 95       	ror	r22
    20e2:	ba 95       	dec	r27
    20e4:	c9 f7       	brne	.-14     	; 0x20d8 <__ultoa_invert+0x86>
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	61 05       	cpc	r22, r1
    20ea:	71 05       	cpc	r23, r1
    20ec:	08 95       	ret
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	0a 2e       	mov	r0, r26
    20f4:	06 94       	lsr	r0
    20f6:	57 95       	ror	r21
    20f8:	47 95       	ror	r20
    20fa:	37 95       	ror	r19
    20fc:	27 95       	ror	r18
    20fe:	ba 95       	dec	r27
    2100:	c9 f7       	brne	.-14     	; 0x20f4 <__ultoa_invert+0xa2>
    2102:	62 0f       	add	r22, r18
    2104:	73 1f       	adc	r23, r19
    2106:	84 1f       	adc	r24, r20
    2108:	95 1f       	adc	r25, r21
    210a:	a0 1d       	adc	r26, r0
    210c:	08 95       	ret

0000210e <_exit>:
    210e:	f8 94       	cli

00002110 <__stop_program>:
    2110:	ff cf       	rjmp	.-2      	; 0x2110 <__stop_program>
