
20180702 - 2 Slave 1 Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00802000  00001c8c  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b7  0080206e  0080206e  00001d8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001dec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d59  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fa9  00000000  00000000  00009ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f7c  00000000  00000000  0000de9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b44  00000000  00000000  0000fe1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003a5c  00000000  00000000  00010960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003128  00000000  00000000  000143bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000330  00000000  00000000  000174e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__vector_119>
     1e0:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <uart_fputc>
     200:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <uart_fgetc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ec e8       	ldi	r30, 0x8C	; 140
     21c:	fc e1       	ldi	r31, 0x1C	; 28
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	ae 36       	cpi	r26, 0x6E	; 110
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	23 e2       	ldi	r18, 0x23	; 35
     230:	ae e6       	ldi	r26, 0x6E	; 110
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a5 32       	cpi	r26, 0x25	; 37
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 2b 02 	call	0x456	; 0x456 <main>
     242:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |
     24a:	e0 e5       	ldi	r30, 0x50	; 80
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	82 83       	std	Z+2, r24	; 0x02
  OSC_XOSCSEL_XTAL_16KCLK_gc;
  OSC.CTRL |= OSC_XOSCEN_bm;
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	83 ff       	sbrs	r24, 3
     25c:	fd cf       	rjmp	.-6      	; 0x258 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc |
     25e:	e0 e5       	ldi	r30, 0x50	; 80
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	82 ec       	ldi	r24, 0xC2	; 194
     264:	85 83       	std	Z+5, r24	; 0x05
  (OSC_PLLFAC_gm & 2);
  OSC.CTRL |= OSC_PLLEN_bm;
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	84 ff       	sbrs	r24, 4
     270:	fd cf       	rjmp	.-6      	; 0x26c <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;
     272:	88 ed       	ldi	r24, 0xD8	; 216
     274:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret

0000028e <__vector_104>:
		_delay_ms(5);
	}
}

void init_pwm(void)
{ }
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	0b b6       	in	r0, 0x3b	; 59
     29a:	0f 92       	push	r0
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <__vector_104+0x3c>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	ae 01       	movw	r20, r28
     2d0:	4d 5f       	subi	r20, 0xFD	; 253
     2d2:	5f 4f       	sbci	r21, 0xFF	; 255
     2d4:	be 01       	movw	r22, r28
     2d6:	6e 5f       	subi	r22, 0xFE	; 254
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWhatHappened>
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	88 23       	and	r24, r24
     2e6:	09 f4       	brne	.+2      	; 0x2ea <__vector_104+0x5c>
     2e8:	57 c0       	rjmp	.+174    	; 0x398 <__vector_104+0x10a>
     2ea:	0e 94 0a 04 	call	0x814	; 0x814 <nrfGetDynamicPayloadSize>
     2ee:	08 2f       	mov	r16, r24
     2f0:	68 2f       	mov	r22, r24
     2f2:	84 e7       	ldi	r24, 0x74	; 116
     2f4:	90 e2       	ldi	r25, 0x20	; 32
     2f6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <nrfRead>
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	f8 01       	movw	r30, r16
     2fe:	ec 58       	subi	r30, 0x8C	; 140
     300:	ff 4d       	sbci	r31, 0xDF	; 223
     302:	10 82       	st	Z, r1
     304:	84 e7       	ldi	r24, 0x74	; 116
     306:	90 e2       	ldi	r25, 0x20	; 32
     308:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 19 0a 	call	0x1432	; 0x1432 <malloc>
     314:	5c 01       	movw	r10, r24
     316:	80 91 74 20 	lds	r24, 0x2074	; 0x802074 <packet>
     31a:	90 91 75 20 	lds	r25, 0x2075	; 0x802075 <packet+0x1>
     31e:	f5 01       	movw	r30, r10
     320:	80 83       	st	Z, r24
     322:	91 83       	std	Z+1, r25	; 0x01
     324:	12 82       	std	Z+2, r1	; 0x02
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 19 0a 	call	0x1432	; 0x1432 <malloc>
     32e:	7c 01       	movw	r14, r24
     330:	80 91 76 20 	lds	r24, 0x2076	; 0x802076 <packet+0x2>
     334:	90 91 77 20 	lds	r25, 0x2077	; 0x802077 <packet+0x3>
     338:	f7 01       	movw	r30, r14
     33a:	80 83       	st	Z, r24
     33c:	91 83       	std	Z+1, r25	; 0x01
     33e:	12 82       	std	Z+2, r1	; 0x02
     340:	c8 01       	movw	r24, r16
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	0e 94 19 0a 	call	0x1432	; 0x1432 <malloc>
     348:	6c 01       	movw	r12, r24
     34a:	a8 01       	movw	r20, r16
     34c:	68 e7       	ldi	r22, 0x78	; 120
     34e:	70 e2       	ldi	r23, 0x20	; 32
     350:	0e 94 3a 0b 	call	0x1674	; 0x1674 <memcpy>
     354:	f6 01       	movw	r30, r12
     356:	e0 0f       	add	r30, r16
     358:	f1 1f       	adc	r31, r17
     35a:	10 82       	st	Z, r1
     35c:	df 92       	push	r13
     35e:	cf 92       	push	r12
     360:	ff 92       	push	r15
     362:	ef 92       	push	r14
     364:	bf 92       	push	r11
     366:	af 92       	push	r10
     368:	83 e2       	ldi	r24, 0x23	; 35
     36a:	90 e2       	ldi	r25, 0x20	; 32
     36c:	9f 93       	push	r25
     36e:	8f 93       	push	r24
     370:	0e 94 4c 0b 	call	0x1698	; 0x1698 <printf>
     374:	6c e3       	ldi	r22, 0x3C	; 60
     376:	70 e2       	ldi	r23, 0x20	; 32
     378:	c7 01       	movw	r24, r14
     37a:	0e 94 43 0b 	call	0x1686	; 0x1686 <strcmp>
     37e:	cd bf       	out	0x3d, r28	; 61
     380:	de bf       	out	0x3e, r29	; 62
     382:	89 2b       	or	r24, r25
     384:	19 f4       	brne	.+6      	; 0x38c <__vector_104+0xfe>
     386:	c6 01       	movw	r24, r12
     388:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>
     38c:	8f e3       	ldi	r24, 0x3F	; 63
     38e:	9c e9       	ldi	r25, 0x9C	; 156
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <__vector_104+0x102>
     394:	00 c0       	rjmp	.+0      	; 0x396 <__vector_104+0x108>
     396:	00 00       	nop
     398:	23 96       	adiw	r28, 0x03	; 3
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	df 91       	pop	r29
     3a0:	cf 91       	pop	r28
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	df 90       	pop	r13
     3c4:	cf 90       	pop	r12
     3c6:	bf 90       	pop	r11
     3c8:	af 90       	pop	r10
     3ca:	0f 90       	pop	r0
     3cc:	0b be       	out	0x3b, r0	; 59
     3ce:	0f 90       	pop	r0
     3d0:	0f be       	out	0x3f, r0	; 63
     3d2:	0f 90       	pop	r0
     3d4:	1f 90       	pop	r1
     3d6:	18 95       	reti

000003d8 <init_nrf>:

void init_nrf(void)
{
	nrfspiInit();
     3d8:	0e 94 b8 04 	call	0x970	; 0x970 <nrfspiInit>
	// Check SPI Connection
	if (nrfVerifySPIConnection())   PORTF.OUTSET = PIN0_bm;
     3dc:	0e 94 99 04 	call	0x932	; 0x932 <nrfVerifySPIConnection>
     3e0:	88 23       	and	r24, r24
     3e2:	21 f0       	breq	.+8      	; 0x3ec <init_nrf+0x14>
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <init_nrf+0x1a>
	else                             PORTF.OUTSET = PIN1_bm;
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

	nrfBegin();
     3f2:	0e 94 70 04 	call	0x8e0	; 0x8e0 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc, NRF_SETUP_ARC_8RETRANSMIT_gc);
     3f6:	68 e0       	ldi	r22, 0x08	; 8
     3f8:	80 e3       	ldi	r24, 0x30	; 48
     3fa:	0e 94 66 04 	call	0x8cc	; 0x8cc <nrfSetRetries>
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);
     3fe:	84 e0       	ldi	r24, 0x04	; 4
     400:	0e 94 34 04 	call	0x868	; 0x868 <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);
     404:	80 e2       	ldi	r24, 0x20	; 32
     406:	0e 94 42 04 	call	0x884	; 0x884 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);
     40a:	8c e0       	ldi	r24, 0x0C	; 12
     40c:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrfSetCRCLength>
	nrfSetChannel(48);
     410:	80 e3       	ldi	r24, 0x30	; 48
     412:	0e 94 1c 04 	call	0x838	; 0x838 <nrfSetChannel>
	nrfSetAutoAck(1);
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 28 04 	call	0x850	; 0x850 <nrfSetAutoAck>
	nrfEnableDynamicPayloads();
     41c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();
     420:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <nrfClearInterruptBits>
	nrfFlushRx();
     424:	0e 94 00 03 	call	0x600	; 0x600 <nrfFlushRx>
	nrfFlushTx();
     428:	0e 94 0f 03 	call	0x61e	; 0x61e <nrfFlushTx>

	// Interrupt Pin
	PORTF.INT0MASK |= PIN6_bm;
     42c:	e0 ea       	ldi	r30, 0xA0	; 160
     42e:	f6 e0       	ldi	r31, 0x06	; 6
     430:	82 85       	ldd	r24, Z+10	; 0x0a
     432:	80 64       	ori	r24, 0x40	; 64
     434:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.INTCTRL   = (PORTF.INTCTRL & ~PORT_INT0LVL_gm) |
     43a:	81 85       	ldd	r24, Z+9	; 0x09
     43c:	8c 7f       	andi	r24, 0xFC	; 252
     43e:	81 60       	ori	r24, 0x01	; 1
     440:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT0LVL_LO_gc;

	nrfOpenWritingPipe(pipes[0]);
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	90 e2       	ldi	r25, 0x20	; 32
     446:	0e 94 71 03 	call	0x6e2	; 0x6e2 <nrfOpenWritingPipe>
	nrfOpenReadingPipe(1,pipes[1]);
     44a:	6c e0       	ldi	r22, 0x0C	; 12
     44c:	70 e2       	ldi	r23, 0x20	; 32
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 8f 03 	call	0x71e	; 0x71e <nrfOpenReadingPipe>
     454:	08 95       	ret

00000456 <main>:

int main(void)
{
	uint16_t length;

	Config32MHzClock_Ext16M();
     456:	0e 94 25 01 	call	0x24a	; 0x24a <Config32MHzClock_Ext16M>

	init_pwm();
	init_nrf();
     45a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <init_nrf>

	init_stream(F_CPU);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	78 e4       	ldi	r23, 0x48	; 72
     462:	88 ee       	ldi	r24, 0xE8	; 232
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 55 05 	call	0xaaa	; 0xaaa <init_stream>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     46a:	e0 ea       	ldi	r30, 0xA0	; 160
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	82 81       	ldd	r24, Z+2	; 0x02
     470:	81 60       	ori	r24, 0x01	; 1
     472:	82 83       	std	Z+2, r24	; 0x02
	sei();
     474:	78 94       	sei

	clear_screen();
     476:	8f e3       	ldi	r24, 0x3F	; 63
     478:	90 e2       	ldi	r25, 0x20	; 32
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <printf>
	printf("Master\n");
     482:	8b e4       	ldi	r24, 0x4B	; 75
     484:	90 e2       	ldi	r25, 0x20	; 32
     486:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <puts>

	nrfStartListening();
     48a:	0e 94 1e 03 	call	0x63c	; 0x63c <nrfStartListening>
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	ff cf       	rjmp	.-2      	; 0x492 <main+0x3c>

00000494 <nrfReadRegister>:
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	c0 ea       	ldi	r28, 0xA0	; 160
     49c:	d6 e0       	ldi	r29, 0x06	; 6
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	1e 83       	std	Y+6, r17	; 0x06
     4a2:	8f 71       	andi	r24, 0x1F	; 31
     4a4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     4a8:	8f ef       	ldi	r24, 0xFF	; 255
     4aa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     4ae:	1d 83       	std	Y+5, r17	; 0x05
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <nrfWriteRegisterMulti>:
     4b8:	df 92       	push	r13
     4ba:	ef 92       	push	r14
     4bc:	ff 92       	push	r15
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	7b 01       	movw	r14, r22
     4c8:	c4 2f       	mov	r28, r20
     4ca:	90 e2       	ldi	r25, 0x20	; 32
     4cc:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     4d0:	8f 71       	andi	r24, 0x1F	; 31
     4d2:	80 62       	ori	r24, 0x20	; 32
     4d4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     4d8:	d8 2e       	mov	r13, r24
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	8c 0f       	add	r24, r28
     4de:	cc 23       	and	r28, r28
     4e0:	69 f0       	breq	.+26     	; 0x4fc <nrfWriteRegisterMulti+0x44>
     4e2:	e7 01       	movw	r28, r14
     4e4:	08 2f       	mov	r16, r24
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	0f 5f       	subi	r16, 0xFF	; 255
     4ea:	1f 4f       	sbci	r17, 0xFF	; 255
     4ec:	0e 0d       	add	r16, r14
     4ee:	1f 1d       	adc	r17, r15
     4f0:	89 91       	ld	r24, Y+
     4f2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     4f6:	c0 17       	cp	r28, r16
     4f8:	d1 07       	cpc	r29, r17
     4fa:	d1 f7       	brne	.-12     	; 0x4f0 <nrfWriteRegisterMulti+0x38>
     4fc:	80 e2       	ldi	r24, 0x20	; 32
     4fe:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     502:	8d 2d       	mov	r24, r13
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	df 90       	pop	r13
     512:	08 95       	ret

00000514 <nrfWriteRegister>:
     514:	ff 92       	push	r15
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	f6 2e       	mov	r15, r22
     520:	c0 ea       	ldi	r28, 0xA0	; 160
     522:	d6 e0       	ldi	r29, 0x06	; 6
     524:	10 e2       	ldi	r17, 0x20	; 32
     526:	1e 83       	std	Y+6, r17	; 0x06
     528:	8f 71       	andi	r24, 0x1F	; 31
     52a:	80 62       	ori	r24, 0x20	; 32
     52c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     530:	08 2f       	mov	r16, r24
     532:	8f 2d       	mov	r24, r15
     534:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     538:	1d 83       	std	Y+5, r17	; 0x05
     53a:	80 2f       	mov	r24, r16
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	08 95       	ret

00000548 <nrfReadPayload>:
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	6c 01       	movw	r12, r24
     55c:	c0 91 13 20 	lds	r28, 0x2013	; 0x802013 <fixed_payload_size>
     560:	1c 2f       	mov	r17, r28
     562:	6c 17       	cp	r22, r28
     564:	08 f4       	brcc	.+2      	; 0x568 <nrfReadPayload+0x20>
     566:	16 2f       	mov	r17, r22
     568:	80 91 73 20 	lds	r24, 0x2073	; 0x802073 <dynamic_payloads_enabled>
     56c:	81 11       	cpse	r24, r1
     56e:	27 c0       	rjmp	.+78     	; 0x5be <nrfReadPayload+0x76>
     570:	0c 2f       	mov	r16, r28
     572:	01 1b       	sub	r16, r17
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     57a:	81 e6       	ldi	r24, 0x61	; 97
     57c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     580:	b8 2e       	mov	r11, r24
     582:	ee 24       	eor	r14, r14
     584:	ea 94       	dec	r14
     586:	e1 0e       	add	r14, r17
     588:	11 11       	cpse	r17, r1
     58a:	02 c0       	rjmp	.+4      	; 0x590 <nrfReadPayload+0x48>
     58c:	0f c0       	rjmp	.+30     	; 0x5ac <nrfReadPayload+0x64>
     58e:	00 e0       	ldi	r16, 0x00	; 0
     590:	e6 01       	movw	r28, r12
     592:	f1 2c       	mov	r15, r1
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	e8 1a       	sub	r14, r24
     598:	f8 0a       	sbc	r15, r24
     59a:	ec 0c       	add	r14, r12
     59c:	fd 1c       	adc	r15, r13
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     5a4:	89 93       	st	Y+, r24
     5a6:	ec 16       	cp	r14, r28
     5a8:	fd 06       	cpc	r15, r29
     5aa:	c9 f7       	brne	.-14     	; 0x59e <nrfReadPayload+0x56>
     5ac:	00 23       	and	r16, r16
     5ae:	99 f0       	breq	.+38     	; 0x5d6 <nrfReadPayload+0x8e>
     5b0:	c0 2f       	mov	r28, r16
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     5b8:	c1 50       	subi	r28, 0x01	; 1
     5ba:	d9 f7       	brne	.-10     	; 0x5b2 <nrfReadPayload+0x6a>
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <nrfReadPayload+0x8e>
     5be:	80 e2       	ldi	r24, 0x20	; 32
     5c0:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     5c4:	81 e6       	ldi	r24, 0x61	; 97
     5c6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     5ca:	b8 2e       	mov	r11, r24
     5cc:	ee 24       	eor	r14, r14
     5ce:	ea 94       	dec	r14
     5d0:	e1 0e       	add	r14, r17
     5d2:	11 11       	cpse	r17, r1
     5d4:	dc cf       	rjmp	.-72     	; 0x58e <nrfReadPayload+0x46>
     5d6:	80 e2       	ldi	r24, 0x20	; 32
     5d8:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     5dc:	8b 2d       	mov	r24, r11
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	df 90       	pop	r13
     5ec:	cf 90       	pop	r12
     5ee:	bf 90       	pop	r11
     5f0:	08 95       	ret

000005f2 <nrfRead>:
     5f2:	0e 94 a4 02 	call	0x548	; 0x548 <nrfReadPayload>
     5f6:	87 e1       	ldi	r24, 0x17	; 23
     5f8:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	08 95       	ret

00000600 <nrfFlushRx>:
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	c0 ea       	ldi	r28, 0xA0	; 160
     608:	d6 e0       	ldi	r29, 0x06	; 6
     60a:	10 e2       	ldi	r17, 0x20	; 32
     60c:	1e 83       	std	Y+6, r17	; 0x06
     60e:	82 ee       	ldi	r24, 0xE2	; 226
     610:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     614:	1d 83       	std	Y+5, r17	; 0x05
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	08 95       	ret

0000061e <nrfFlushTx>:
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	c0 ea       	ldi	r28, 0xA0	; 160
     626:	d6 e0       	ldi	r29, 0x06	; 6
     628:	10 e2       	ldi	r17, 0x20	; 32
     62a:	1e 83       	std	Y+6, r17	; 0x06
     62c:	81 ee       	ldi	r24, 0xE1	; 225
     62e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     632:	1d 83       	std	Y+5, r17	; 0x05
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	08 95       	ret

0000063c <nrfStartListening>:
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     642:	81 fd       	sbrc	r24, 1
     644:	0c c0       	rjmp	.+24     	; 0x65e <nrfStartListening+0x22>
     646:	68 2f       	mov	r22, r24
     648:	63 60       	ori	r22, 0x03	; 3
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     650:	8f e7       	ldi	r24, 0x7F	; 127
     652:	9e e3       	ldi	r25, 0x3E	; 62
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <nrfStartListening+0x18>
     658:	00 c0       	rjmp	.+0      	; 0x65a <nrfStartListening+0x1e>
     65a:	00 00       	nop
     65c:	05 c0       	rjmp	.+10     	; 0x668 <nrfStartListening+0x2c>
     65e:	68 2f       	mov	r22, r24
     660:	61 60       	ori	r22, 0x01	; 1
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	94 e0       	ldi	r25, 0x04	; 4
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <nrfStartListening+0x30>
     670:	00 c0       	rjmp	.+0      	; 0x672 <nrfStartListening+0x36>
     672:	00 00       	nop
     674:	60 e7       	ldi	r22, 0x70	; 112
     676:	87 e0       	ldi	r24, 0x07	; 7
     678:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     67c:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <addr_width>
     680:	6e e6       	ldi	r22, 0x6E	; 110
     682:	70 e2       	ldi	r23, 0x20	; 32
     684:	8a e0       	ldi	r24, 0x0A	; 10
     686:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nrfWriteRegisterMulti>
     68a:	0e 94 00 03 	call	0x600	; 0x600 <nrfFlushRx>
     68e:	0e 94 0f 03 	call	0x61e	; 0x61e <nrfFlushTx>
     692:	80 e8       	ldi	r24, 0x80	; 128
     694:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     698:	8f e0       	ldi	r24, 0x0F	; 15
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <nrfStartListening+0x60>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <nrfStartListening+0x66>
     6a2:	00 00       	nop
     6a4:	08 95       	ret

000006a6 <nrfWhatHappened>:
     6a6:	ef 92       	push	r14
     6a8:	ff 92       	push	r15
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	7c 01       	movw	r14, r24
     6b4:	8b 01       	movw	r16, r22
     6b6:	ea 01       	movw	r28, r20
     6b8:	60 e7       	ldi	r22, 0x70	; 112
     6ba:	87 e0       	ldi	r24, 0x07	; 7
     6bc:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     6c0:	98 2f       	mov	r25, r24
     6c2:	90 72       	andi	r25, 0x20	; 32
     6c4:	f7 01       	movw	r30, r14
     6c6:	90 83       	st	Z, r25
     6c8:	98 2f       	mov	r25, r24
     6ca:	90 71       	andi	r25, 0x10	; 16
     6cc:	f8 01       	movw	r30, r16
     6ce:	90 83       	st	Z, r25
     6d0:	80 74       	andi	r24, 0x40	; 64
     6d2:	88 83       	st	Y, r24
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	08 95       	ret

000006e2 <nrfOpenWritingPipe>:
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	ec 01       	movw	r28, r24
     6e8:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <addr_width>
     6ec:	bc 01       	movw	r22, r24
     6ee:	8a e0       	ldi	r24, 0x0A	; 10
     6f0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nrfWriteRegisterMulti>
     6f4:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <addr_width>
     6f8:	be 01       	movw	r22, r28
     6fa:	80 e1       	ldi	r24, 0x10	; 16
     6fc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nrfWriteRegisterMulti>
     700:	60 91 13 20 	lds	r22, 0x2013	; 0x802013 <fixed_payload_size>
     704:	60 32       	cpi	r22, 0x20	; 32
     706:	20 f4       	brcc	.+8      	; 0x710 <nrfOpenWritingPipe+0x2e>
     708:	81 e1       	ldi	r24, 0x11	; 17
     70a:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     70e:	04 c0       	rjmp	.+8      	; 0x718 <nrfOpenWritingPipe+0x36>
     710:	60 e2       	ldi	r22, 0x20	; 32
     712:	81 e1       	ldi	r24, 0x11	; 17
     714:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <nrfOpenReadingPipe>:
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	c8 2f       	mov	r28, r24
     728:	8b 01       	movw	r16, r22
     72a:	81 11       	cpse	r24, r1
     72c:	08 c0       	rjmp	.+16     	; 0x73e <nrfOpenReadingPipe+0x20>
     72e:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <addr_width>
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	8e e6       	ldi	r24, 0x6E	; 110
     736:	90 e2       	ldi	r25, 0x20	; 32
     738:	0e 94 3a 0b 	call	0x1674	; 0x1674 <memcpy>
     73c:	04 c0       	rjmp	.+8      	; 0x746 <nrfOpenReadingPipe+0x28>
     73e:	87 30       	cpi	r24, 0x07	; 7
     740:	78 f5       	brcc	.+94     	; 0x7a0 <nrfOpenReadingPipe+0x82>
     742:	82 30       	cpi	r24, 0x02	; 2
     744:	58 f4       	brcc	.+22     	; 0x75c <nrfOpenReadingPipe+0x3e>
     746:	ec 2f       	mov	r30, r28
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	e8 59       	subi	r30, 0x98	; 152
     74c:	ff 4d       	sbci	r31, 0xDF	; 223
     74e:	40 91 12 20 	lds	r20, 0x2012	; 0x802012 <addr_width>
     752:	b8 01       	movw	r22, r16
     754:	80 81       	ld	r24, Z
     756:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nrfWriteRegisterMulti>
     75a:	08 c0       	rjmp	.+16     	; 0x76c <nrfOpenReadingPipe+0x4e>
     75c:	e8 2f       	mov	r30, r24
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	e8 59       	subi	r30, 0x98	; 152
     762:	ff 4d       	sbci	r31, 0xDF	; 223
     764:	41 e0       	ldi	r20, 0x01	; 1
     766:	80 81       	ld	r24, Z
     768:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <nrfWriteRegisterMulti>
     76c:	d0 e0       	ldi	r29, 0x00	; 0
     76e:	fe 01       	movw	r30, r28
     770:	ee 59       	subi	r30, 0x9E	; 158
     772:	ff 4d       	sbci	r31, 0xDF	; 223
     774:	60 91 13 20 	lds	r22, 0x2013	; 0x802013 <fixed_payload_size>
     778:	80 81       	ld	r24, Z
     77a:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     784:	c4 5a       	subi	r28, 0xA4	; 164
     786:	df 4d       	sbci	r29, 0xDF	; 223
     788:	61 e0       	ldi	r22, 0x01	; 1
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	08 80       	ld	r0, Y
     78e:	02 c0       	rjmp	.+4      	; 0x794 <nrfOpenReadingPipe+0x76>
     790:	66 0f       	add	r22, r22
     792:	77 1f       	adc	r23, r23
     794:	0a 94       	dec	r0
     796:	e2 f7       	brpl	.-8      	; 0x790 <nrfOpenReadingPipe+0x72>
     798:	68 2b       	or	r22, r24
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	08 95       	ret

000007aa <nrfToggleFeatures>:
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	c0 ea       	ldi	r28, 0xA0	; 160
     7b2:	d6 e0       	ldi	r29, 0x06	; 6
     7b4:	10 e2       	ldi	r17, 0x20	; 32
     7b6:	1e 83       	std	Y+6, r17	; 0x06
     7b8:	80 e5       	ldi	r24, 0x50	; 80
     7ba:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     7be:	83 e7       	ldi	r24, 0x73	; 115
     7c0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     7c4:	1d 83       	std	Y+5, r17	; 0x05
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	08 95       	ret

000007ce <nrfEnableDynamicPayloads>:
     7ce:	8d e1       	ldi	r24, 0x1D	; 29
     7d0:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     7d4:	68 2f       	mov	r22, r24
     7d6:	64 60       	ori	r22, 0x04	; 4
     7d8:	8d e1       	ldi	r24, 0x1D	; 29
     7da:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     7de:	8d e1       	ldi	r24, 0x1D	; 29
     7e0:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     7e4:	81 11       	cpse	r24, r1
     7e6:	0a c0       	rjmp	.+20     	; 0x7fc <nrfEnableDynamicPayloads+0x2e>
     7e8:	0e 94 d5 03 	call	0x7aa	; 0x7aa <nrfToggleFeatures>
     7ec:	8d e1       	ldi	r24, 0x1D	; 29
     7ee:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     7f2:	68 2f       	mov	r22, r24
     7f4:	64 60       	ori	r22, 0x04	; 4
     7f6:	8d e1       	ldi	r24, 0x1D	; 29
     7f8:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     7fc:	8c e1       	ldi	r24, 0x1C	; 28
     7fe:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     802:	68 2f       	mov	r22, r24
     804:	6f 63       	ori	r22, 0x3F	; 63
     806:	8c e1       	ldi	r24, 0x1C	; 28
     808:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	80 93 73 20 	sts	0x2073, r24	; 0x802073 <dynamic_payloads_enabled>
     812:	08 95       	ret

00000814 <nrfGetDynamicPayloadSize>:
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	c0 ea       	ldi	r28, 0xA0	; 160
     81c:	d6 e0       	ldi	r29, 0x06	; 6
     81e:	10 e2       	ldi	r17, 0x20	; 32
     820:	1e 83       	std	Y+6, r17	; 0x06
     822:	80 e6       	ldi	r24, 0x60	; 96
     824:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <nrfspiTransfer>
     82e:	1d 83       	std	Y+5, r17	; 0x05
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	08 95       	ret

00000838 <nrfSetChannel>:
     838:	88 23       	and	r24, r24
     83a:	2c f0       	brlt	.+10     	; 0x846 <nrfSetChannel+0xe>
     83c:	68 2f       	mov	r22, r24
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     844:	08 95       	ret
     846:	6f e7       	ldi	r22, 0x7F	; 127
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     84e:	08 95       	ret

00000850 <nrfSetAutoAck>:
     850:	88 23       	and	r24, r24
     852:	29 f0       	breq	.+10     	; 0x85e <nrfSetAutoAck+0xe>
     854:	6f e3       	ldi	r22, 0x3F	; 63
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     85c:	08 95       	ret
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     866:	08 95       	ret

00000868 <nrfSetPALevel>:
     868:	cf 93       	push	r28
     86a:	c8 2f       	mov	r28, r24
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     872:	89 7f       	andi	r24, 0xF9	; 249
     874:	c6 70       	andi	r28, 0x06	; 6
     876:	68 2f       	mov	r22, r24
     878:	6c 2b       	or	r22, r28
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <nrfSetDataRate>:
     884:	cf 93       	push	r28
     886:	c8 2f       	mov	r28, r24
     888:	86 e0       	ldi	r24, 0x06	; 6
     88a:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     88e:	87 7d       	andi	r24, 0xD7	; 215
     890:	9c 2f       	mov	r25, r28
     892:	98 72       	andi	r25, 0x28	; 40
     894:	68 2f       	mov	r22, r24
     896:	69 2b       	or	r22, r25
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     89e:	86 e0       	ldi	r24, 0x06	; 6
     8a0:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	c8 13       	cpse	r28, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	89 2f       	mov	r24, r25
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <nrfSetCRCLength>:
     8b0:	cf 93       	push	r28
     8b2:	c8 2f       	mov	r28, r24
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     8ba:	83 7f       	andi	r24, 0xF3	; 243
     8bc:	cc 70       	andi	r28, 0x0C	; 12
     8be:	68 2f       	mov	r22, r24
     8c0:	6c 2b       	or	r22, r28
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <nrfSetRetries>:
     8cc:	68 2b       	or	r22, r24
     8ce:	84 e0       	ldi	r24, 0x04	; 4
     8d0:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     8d4:	08 95       	ret

000008d6 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     8d6:	60 e7       	ldi	r22, 0x70	; 112
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     8de:	08 95       	ret

000008e0 <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e0:	8f e3       	ldi	r24, 0x3F	; 63
     8e2:	9c e9       	ldi	r25, 0x9C	; 156
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <nrfBegin+0x4>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <nrfBegin+0xa>
     8ea:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     8ec:	6f e5       	ldi	r22, 0x5F	; 95
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	0e 94 34 04 	call	0x868	; 0x868 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     8fa:	80 e2       	ldi	r24, 0x20	; 32
     8fc:	0e 94 42 04 	call	0x884	; 0x884 <nrfSetDataRate>
     900:	88 23       	and	r24, r24
     902:	19 f0       	breq	.+6      	; 0x90a <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 42 04 	call	0x884	; 0x884 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	0e 94 58 04 	call	0x8b0	; 0x8b0 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	8c e1       	ldi	r24, 0x1C	; 28
     91a:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     91e:	8c e4       	ldi	r24, 0x4C	; 76
     920:	0e 94 1c 04 	call	0x838	; 0x838 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     924:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <nrfClearInterruptBits>
  nrfFlushRx();
     928:	0e 94 00 03 	call	0x600	; 0x600 <nrfFlushRx>
  nrfFlushTx();
     92c:	0e 94 0f 03 	call	0x61e	; 0x61e <nrfFlushTx>
     930:	08 95       	ret

00000932 <nrfVerifySPIConnection>:
 *          0 (false) if not
 */

// from Wouter
uint8_t nrfVerifySPIConnection(void)
{
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
  uint8_t iBuffer = 0;
  uint8_t iDataBuffer = 0;

  iDataBuffer = nrfReadRegister(REG_SETUP_RETR);  // Buffer old value
     936:	84 e0       	ldi	r24, 0x04	; 4
     938:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     93c:	d8 2f       	mov	r29, r24
  nrfWriteRegister(REG_SETUP_RETR, 0x48);         // Write random value
     93e:	68 e4       	ldi	r22, 0x48	; 72
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     946:	8f e3       	ldi	r24, 0x3F	; 63
     948:	9f e1       	ldi	r25, 0x1F	; 31
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	f1 f7       	brne	.-4      	; 0x94a <nrfVerifySPIConnection+0x18>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <nrfVerifySPIConnection+0x1e>
     950:	00 00       	nop
  _delay_ms(1);
  iBuffer = nrfReadRegister(REG_SETUP_RETR);      // Read value from SPI
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	0e 94 4a 02 	call	0x494	; 0x494 <nrfReadRegister>
     958:	c8 2f       	mov	r28, r24
  nrfWriteRegister(REG_SETUP_RETR, iDataBuffer);  // Restore old value
     95a:	6d 2f       	mov	r22, r29
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	0e 94 8a 02 	call	0x514	; 0x514 <nrfWriteRegister>
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	c8 34       	cpi	r28, 0x48	; 72
     966:	09 f0       	breq	.+2      	; 0x96a <nrfVerifySPIConnection+0x38>
     968:	80 e0       	ldi	r24, 0x00	; 0

  if (iBuffer == 0x48) return(1);                  // 1 - Value is as expected
  else                 return(0);                  // 0 - Value is different
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     970:	e0 e4       	ldi	r30, 0x40	; 64
     972:	f6 e0       	ldi	r31, 0x06	; 6
     974:	88 e0       	ldi	r24, 0x08	; 8
     976:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     980:	e0 ea       	ldi	r30, 0xA0	; 160
     982:	f6 e0       	ldi	r31, 0x06	; 6
     984:	80 e2       	ldi	r24, 0x20	; 32
     986:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     988:	80 e4       	ldi	r24, 0x40	; 64
     98a:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     98c:	80 e8       	ldi	r24, 0x80	; 128
     98e:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     990:	e0 ea       	ldi	r30, 0xA0	; 160
     992:	f8 e0       	ldi	r31, 0x08	; 8
     994:	88 e1       	ldi	r24, 0x18	; 24
     996:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     998:	80 ec       	ldi	r24, 0xC0	; 192
     99a:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     99c:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	86 83       	std	Z+6, r24	; 0x06
     9a2:	08 95       	ret

000009a4 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     9a4:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     9a8:	e0 ea       	ldi	r30, 0xA0	; 160
     9aa:	f8 e0       	ldi	r31, 0x08	; 8
     9ac:	81 81       	ldd	r24, Z+1	; 0x01
     9ae:	86 ff       	sbrs	r24, 6
     9b0:	fd cf       	rjmp	.-6      	; 0x9ac <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     9b2:	e0 ea       	ldi	r30, 0xA0	; 160
     9b4:	f8 e0       	ldi	r31, 0x08	; 8
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
     9b8:	80 64       	ori	r24, 0x40	; 64
     9ba:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     9bc:	80 81       	ld	r24, Z
}
     9be:	08 95       	ret

000009c0 <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     9c0:	cf 93       	push	r28
     9c2:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     9c4:	84 e1       	ldi	r24, 0x14	; 20
     9c6:	91 e2       	ldi	r25, 0x21	; 33
     9c8:	0e 94 35 07 	call	0xe6a	; 0xe6a <USART_TXBuffer_FreeSpace>
     9cc:	88 23       	and	r24, r24
     9ce:	d1 f3       	breq	.-12     	; 0x9c4 <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     9d0:	ca 30       	cpi	r28, 0x0A	; 10
     9d2:	29 f4       	brne	.+10     	; 0x9de <uart_fputc+0x1e>
     9d4:	6d e0       	ldi	r22, 0x0D	; 13
     9d6:	84 e1       	ldi	r24, 0x14	; 20
     9d8:	91 e2       	ldi	r25, 0x21	; 33
     9da:	0e 94 8c 05 	call	0xb18	; 0xb18 <uart_putc>
  uart_putc(&uartF0, c);
     9de:	6c 2f       	mov	r22, r28
     9e0:	84 e1       	ldi	r24, 0x14	; 20
     9e2:	91 e2       	ldi	r25, 0x21	; 33
     9e4:	0e 94 8c 05 	call	0xb18	; 0xb18 <uart_putc>

  return 0;
}
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     9f0:	84 e1       	ldi	r24, 0x14	; 20
     9f2:	91 e2       	ldi	r25, 0x21	; 33
     9f4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <uart_getc>
     9f8:	81 15       	cp	r24, r1
     9fa:	21 e0       	ldi	r18, 0x01	; 1
     9fc:	92 07       	cpc	r25, r18
     9fe:	c1 f3       	breq	.-16     	; 0x9f0 <uart_fgetc>

  return c;
}
     a00:	08 95       	ret

00000a02 <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     a02:	1f 92       	push	r1
     a04:	0f 92       	push	r0
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	0f 92       	push	r0
     a0a:	11 24       	eor	r1, r1
     a0c:	0b b6       	in	r0, 0x3b	; 59
     a0e:	0f 92       	push	r0
     a10:	2f 93       	push	r18
     a12:	3f 93       	push	r19
     a14:	4f 93       	push	r20
     a16:	5f 93       	push	r21
     a18:	6f 93       	push	r22
     a1a:	7f 93       	push	r23
     a1c:	8f 93       	push	r24
     a1e:	9f 93       	push	r25
     a20:	af 93       	push	r26
     a22:	bf 93       	push	r27
     a24:	ef 93       	push	r30
     a26:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     a28:	84 e1       	ldi	r24, 0x14	; 20
     a2a:	91 e2       	ldi	r25, 0x21	; 33
     a2c:	0e 94 83 07 	call	0xf06	; 0xf06 <USART_RXComplete>
}
     a30:	ff 91       	pop	r31
     a32:	ef 91       	pop	r30
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0b be       	out	0x3b, r0	; 59
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	0b b6       	in	r0, 0x3b	; 59
     a62:	0f 92       	push	r0
     a64:	2f 93       	push	r18
     a66:	3f 93       	push	r19
     a68:	4f 93       	push	r20
     a6a:	5f 93       	push	r21
     a6c:	6f 93       	push	r22
     a6e:	7f 93       	push	r23
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	af 93       	push	r26
     a76:	bf 93       	push	r27
     a78:	ef 93       	push	r30
     a7a:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     a7c:	84 e1       	ldi	r24, 0x14	; 20
     a7e:	91 e2       	ldi	r25, 0x21	; 33
     a80:	0e 94 9e 07 	call	0xf3c	; 0xf3c <USART_DataRegEmpty>
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0b be       	out	0x3b, r0	; 59
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     aaa:	cf 92       	push	r12
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     ab8:	c1 2c       	mov	r12, r1
     aba:	e1 2c       	mov	r14, r1
     abc:	12 ec       	ldi	r17, 0xC2	; 194
     abe:	f1 2e       	mov	r15, r17
     ac0:	01 e0       	ldi	r16, 0x01	; 1
     ac2:	10 e0       	ldi	r17, 0x00	; 0
     ac4:	60 ea       	ldi	r22, 0xA0	; 160
     ac6:	7b e0       	ldi	r23, 0x0B	; 11
     ac8:	84 e1       	ldi	r24, 0x14	; 20
     aca:	91 e2       	ldi	r25, 0x21	; 33
     acc:	0e 94 c6 06 	call	0xd8c	; 0xd8c <init_uart>
  stdout = stdin = &uart_stdinout;
     ad0:	ef e1       	ldi	r30, 0x1F	; 31
     ad2:	f3 e2       	ldi	r31, 0x23	; 35
     ad4:	85 e1       	ldi	r24, 0x15	; 21
     ad6:	90 e2       	ldi	r25, 0x20	; 32
     ad8:	80 83       	st	Z, r24
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	82 83       	std	Z+2, r24	; 0x02
     ade:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     ae0:	e0 ea       	ldi	r30, 0xA0	; 160
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	81 60       	ori	r24, 0x01	; 1
     ae8:	82 83       	std	Z+2, r24	; 0x02
}
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	ff 90       	pop	r15
     af0:	ef 90       	pop	r14
     af2:	cf 90       	pop	r12
     af4:	08 95       	ret

00000af6 <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ec 01       	movw	r28, r24
     afc:	0e 94 6b 07 	call	0xed6	; 0xed6 <USART_RXBufferData_Available>
     b00:	88 23       	and	r24, r24
     b02:	29 f0       	breq	.+10     	; 0xb0e <uart_getc+0x18>
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 76 07 	call	0xeec	; 0xeec <USART_RXBuffer_GetByte>
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <uart_getc+0x1c>
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <uart_putc>:
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	ec 01       	movw	r28, r24
     b20:	16 2f       	mov	r17, r22
     b22:	0e 94 35 07 	call	0xe6a	; 0xe6a <USART_TXBuffer_FreeSpace>
     b26:	88 23       	and	r24, r24
     b28:	21 f0       	breq	.+8      	; 0xb32 <uart_putc+0x1a>
     b2a:	61 2f       	mov	r22, r17
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 42 07 	call	0xe84	; 0xe84 <USART_TXBuffer_PutByte>
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	08 95       	ret

00000b3a <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     b3a:	80 3a       	cpi	r24, 0xA0	; 160
     b3c:	28 e0       	ldi	r18, 0x08	; 8
     b3e:	92 07       	cpc	r25, r18
     b40:	39 f4       	brne	.+14     	; 0xb50 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     b42:	e0 e4       	ldi	r30, 0x40	; 64
     b44:	f6 e0       	ldi	r31, 0x06	; 6
     b46:	88 e0       	ldi	r24, 0x08	; 8
     b48:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	82 83       	std	Z+2, r24	; 0x02
     return;
     b4e:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     b50:	80 3b       	cpi	r24, 0xB0	; 176
     b52:	28 e0       	ldi	r18, 0x08	; 8
     b54:	92 07       	cpc	r25, r18
     b56:	39 f4       	brne	.+14     	; 0xb66 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     b58:	e0 e4       	ldi	r30, 0x40	; 64
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     b60:	80 e4       	ldi	r24, 0x40	; 64
     b62:	82 83       	std	Z+2, r24	; 0x02
     return;
     b64:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     b66:	80 3a       	cpi	r24, 0xA0	; 160
     b68:	29 e0       	ldi	r18, 0x09	; 9
     b6a:	92 07       	cpc	r25, r18
     b6c:	39 f4       	brne	.+14     	; 0xb7c <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     b6e:	e0 e6       	ldi	r30, 0x60	; 96
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	88 e0       	ldi	r24, 0x08	; 8
     b74:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     b76:	84 e0       	ldi	r24, 0x04	; 4
     b78:	82 83       	std	Z+2, r24	; 0x02
     return;
     b7a:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     b7c:	80 3b       	cpi	r24, 0xB0	; 176
     b7e:	29 e0       	ldi	r18, 0x09	; 9
     b80:	92 07       	cpc	r25, r18
     b82:	39 f4       	brne	.+14     	; 0xb92 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     b84:	e0 e6       	ldi	r30, 0x60	; 96
     b86:	f6 e0       	ldi	r31, 0x06	; 6
     b88:	80 e8       	ldi	r24, 0x80	; 128
     b8a:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     b8c:	80 e4       	ldi	r24, 0x40	; 64
     b8e:	82 83       	std	Z+2, r24	; 0x02
     return;
     b90:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     b92:	80 3a       	cpi	r24, 0xA0	; 160
     b94:	2a e0       	ldi	r18, 0x0A	; 10
     b96:	92 07       	cpc	r25, r18
     b98:	39 f4       	brne	.+14     	; 0xba8 <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
     b9a:	e0 e8       	ldi	r30, 0x80	; 128
     b9c:	f6 e0       	ldi	r31, 0x06	; 6
     b9e:	88 e0       	ldi	r24, 0x08	; 8
     ba0:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     ba2:	84 e0       	ldi	r24, 0x04	; 4
     ba4:	82 83       	std	Z+2, r24	; 0x02
     return;
     ba6:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
     ba8:	80 3b       	cpi	r24, 0xB0	; 176
     baa:	2a e0       	ldi	r18, 0x0A	; 10
     bac:	92 07       	cpc	r25, r18
     bae:	39 f4       	brne	.+14     	; 0xbbe <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
     bb0:	e0 e8       	ldi	r30, 0x80	; 128
     bb2:	f6 e0       	ldi	r31, 0x06	; 6
     bb4:	80 e8       	ldi	r24, 0x80	; 128
     bb6:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
     bb8:	80 e4       	ldi	r24, 0x40	; 64
     bba:	82 83       	std	Z+2, r24	; 0x02
     return;
     bbc:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
     bbe:	80 3a       	cpi	r24, 0xA0	; 160
     bc0:	9b 40       	sbci	r25, 0x0B	; 11
     bc2:	31 f4       	brne	.+12     	; 0xbd0 <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
     bc4:	e0 ea       	ldi	r30, 0xA0	; 160
     bc6:	f6 e0       	ldi	r31, 0x06	; 6
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
     bcc:	84 e0       	ldi	r24, 0x04	; 4
     bce:	82 83       	std	Z+2, r24	; 0x02
     bd0:	08 95       	ret

00000bd2 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     bd2:	4f 92       	push	r4
     bd4:	5f 92       	push	r5
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	49 01       	movw	r8, r18
     bf4:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     bf6:	2e 2d       	mov	r18, r14
     bf8:	21 70       	andi	r18, 0x01	; 1
     bfa:	c0 e1       	ldi	r28, 0x10	; 16
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <calc_bsel+0x32>
     c00:	d5 95       	asr	r29
     c02:	c7 95       	ror	r28
     c04:	2a 95       	dec	r18
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     c08:	00 23       	and	r16, r16
     c0a:	0c f0       	brlt	.+2      	; 0xc0e <calc_bsel+0x3c>
     c0c:	42 c0       	rjmp	.+132    	; 0xc92 <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     c0e:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
     c16:	dd 27       	eor	r29, r29
     c18:	be 01       	movw	r22, r28
     c1a:	dd 0f       	add	r29, r29
     c1c:	88 0b       	sbc	r24, r24
     c1e:	99 0b       	sbc	r25, r25
     c20:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     c24:	2b 01       	movw	r4, r22
     c26:	3c 01       	movw	r6, r24
     c28:	c5 01       	movw	r24, r10
     c2a:	b4 01       	movw	r22, r8
     c2c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
     c30:	9b 01       	movw	r18, r22
     c32:	ac 01       	movw	r20, r24
     c34:	c3 01       	movw	r24, r6
     c36:	b2 01       	movw	r22, r4
     c38:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsf3>
     c3c:	9b 01       	movw	r18, r22
     c3e:	ac 01       	movw	r20, r24
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e8       	ldi	r20, 0x80	; 128
     c4e:	5f e3       	ldi	r21, 0x3F	; 63
     c50:	0e 94 c3 07 	call	0xf86	; 0xf86 <__subsf3>
     c54:	6b 01       	movw	r12, r22
     c56:	7c 01       	movw	r14, r24
     c58:	11 27       	eor	r17, r17
     c5a:	01 95       	neg	r16
     c5c:	0c f4       	brge	.+2      	; 0xc60 <calc_bsel+0x8e>
     c5e:	10 95       	com	r17
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <calc_bsel+0x98>
     c66:	66 0f       	add	r22, r22
     c68:	77 1f       	adc	r23, r23
     c6a:	0a 95       	dec	r16
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <calc_bsel+0x94>
     c6e:	07 2e       	mov	r0, r23
     c70:	00 0c       	add	r0, r0
     c72:	88 0b       	sbc	r24, r24
     c74:	99 0b       	sbc	r25, r25
     c76:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     c7a:	9b 01       	movw	r18, r22
     c7c:	ac 01       	movw	r20, r24
     c7e:	c7 01       	movw	r24, r14
     c80:	b6 01       	movw	r22, r12
     c82:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsf3>
     c86:	0e 94 cc 09 	call	0x1398	; 0x1398 <round>
     c8a:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixunssfsi>
     c8e:	cb 01       	movw	r24, r22
     c90:	3e c0       	rjmp	.+124    	; 0xd0e <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
     c92:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
     c9a:	be 01       	movw	r22, r28
     c9c:	77 27       	eor	r23, r23
     c9e:	07 2e       	mov	r0, r23
     ca0:	00 0c       	add	r0, r0
     ca2:	88 0b       	sbc	r24, r24
     ca4:	99 0b       	sbc	r25, r25
     ca6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     caa:	2b 01       	movw	r4, r22
     cac:	3c 01       	movw	r6, r24
     cae:	c5 01       	movw	r24, r10
     cb0:	b4 01       	movw	r22, r8
     cb2:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__floatunsisf>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c3 01       	movw	r24, r6
     cbc:	b2 01       	movw	r22, r4
     cbe:	0e 94 5f 09 	call	0x12be	; 0x12be <__mulsf3>
     cc2:	9b 01       	movw	r18, r22
     cc4:	ac 01       	movw	r20, r24
     cc6:	c7 01       	movw	r24, r14
     cc8:	b6 01       	movw	r22, r12
     cca:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	61 e0       	ldi	r22, 0x01	; 1
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <calc_bsel+0x10a>
     cd8:	66 0f       	add	r22, r22
     cda:	77 1f       	adc	r23, r23
     cdc:	0a 95       	dec	r16
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <calc_bsel+0x106>
     ce0:	07 2e       	mov	r0, r23
     ce2:	00 0c       	add	r0, r0
     ce4:	88 0b       	sbc	r24, r24
     ce6:	99 0b       	sbc	r25, r25
     ce8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__floatsisf>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	c7 01       	movw	r24, r14
     cf2:	b6 01       	movw	r22, r12
     cf4:	0e 94 30 08 	call	0x1060	; 0x1060 <__divsf3>
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e8       	ldi	r20, 0x80	; 128
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	0e 94 c3 07 	call	0xf86	; 0xf86 <__subsf3>
     d04:	0e 94 cc 09 	call	0x1398	; 0x1398 <round>
     d08:	0e 94 a2 08 	call	0x1144	; 0x1144 <__fixunssfsi>
     d0c:	cb 01       	movw	r24, r22
  }
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	7f 90       	pop	r7
     d28:	6f 90       	pop	r6
     d2a:	5f 90       	pop	r5
     d2c:	4f 90       	pop	r4
     d2e:	08 95       	ret

00000d30 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	ef 92       	push	r14
     d42:	0f 93       	push	r16
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	2b 01       	movw	r4, r22
     d4a:	3c 01       	movw	r6, r24
     d4c:	49 01       	movw	r8, r18
     d4e:	5a 01       	movw	r10, r20
     d50:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     d52:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
     d54:	ed 2e       	mov	r14, r29
     d56:	0c 2f       	mov	r16, r28
     d58:	a5 01       	movw	r20, r10
     d5a:	94 01       	movw	r18, r8
     d5c:	c3 01       	movw	r24, r6
     d5e:	b2 01       	movw	r22, r4
     d60:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <calc_bsel>
     d64:	81 15       	cp	r24, r1
     d66:	90 41       	sbci	r25, 0x10	; 16
     d68:	18 f0       	brcs	.+6      	; 0xd70 <calc_bscale+0x40>
     d6a:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
     d6c:	c8 30       	cpi	r28, 0x08	; 8
     d6e:	91 f7       	brne	.-28     	; 0xd54 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
     d70:	8c 2f       	mov	r24, r28
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	0f 91       	pop	r16
     d78:	ef 90       	pop	r14
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	7f 90       	pop	r7
     d84:	6f 90       	pop	r6
     d86:	5f 90       	pop	r5
     d88:	4f 90       	pop	r4
     d8a:	08 95       	ret

00000d8c <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
     d8c:	2f 92       	push	r2
     d8e:	3f 92       	push	r3
     d90:	4f 92       	push	r4
     d92:	5f 92       	push	r5
     d94:	6f 92       	push	r6
     d96:	7f 92       	push	r7
     d98:	8f 92       	push	r8
     d9a:	9f 92       	push	r9
     d9c:	af 92       	push	r10
     d9e:	bf 92       	push	r11
     da0:	cf 92       	push	r12
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
     db0:	1b 01       	movw	r2, r22
     db2:	29 01       	movw	r4, r18
     db4:	3a 01       	movw	r6, r20
     db6:	47 01       	movw	r8, r14
     db8:	58 01       	movw	r10, r16
     dba:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
     dbc:	0c 2d       	mov	r16, r12
     dbe:	a5 01       	movw	r20, r10
     dc0:	94 01       	movw	r18, r8
     dc2:	c3 01       	movw	r24, r6
     dc4:	b2 01       	movw	r22, r4
     dc6:	0e 94 98 06 	call	0xd30	; 0xd30 <calc_bscale>
     dca:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
     dcc:	08 2f       	mov	r16, r24
     dce:	a5 01       	movw	r20, r10
     dd0:	94 01       	movw	r18, r8
     dd2:	c3 01       	movw	r24, r6
     dd4:	b2 01       	movw	r22, r4
     dd6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <calc_bsel>
     dda:	f8 2e       	mov	r15, r24
     ddc:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
     dde:	41 e0       	ldi	r20, 0x01	; 1
     de0:	b1 01       	movw	r22, r2
     de2:	ce 01       	movw	r24, r28
     de4:	0e 94 27 07 	call	0xe4e	; 0xe4e <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
     de8:	e8 81       	ld	r30, Y
     dea:	f9 81       	ldd	r31, Y+1	; 0x01
     dec:	83 e0       	ldi	r24, 0x03	; 3
     dee:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
     df0:	e8 81       	ld	r30, Y
     df2:	f9 81       	ldd	r31, Y+1	; 0x01
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
     dfa:	e8 81       	ld	r30, Y
     dfc:	f9 81       	ldd	r31, Y+1	; 0x01
     dfe:	84 81       	ldd	r24, Z+4	; 0x04
     e00:	88 60       	ori	r24, 0x08	; 8
     e02:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
     e04:	e8 81       	ld	r30, Y
     e06:	f9 81       	ldd	r31, Y+1	; 0x01
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	8f 7c       	andi	r24, 0xCF	; 207
     e0c:	80 61       	ori	r24, 0x10	; 16
     e0e:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
     e10:	e8 81       	ld	r30, Y
     e12:	f9 81       	ldd	r31, Y+1	; 0x01
     e14:	f6 82       	std	Z+6, r15	; 0x06
     e16:	e8 81       	ld	r30, Y
     e18:	f9 81       	ldd	r31, Y+1	; 0x01
     e1a:	12 95       	swap	r17
     e1c:	10 7f       	andi	r17, 0xF0	; 240
     e1e:	10 2b       	or	r17, r16
     e20:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
     e22:	88 81       	ld	r24, Y
     e24:	99 81       	ldd	r25, Y+1	; 0x01
     e26:	0e 94 9d 05 	call	0xb3a	; 0xb3a <set_usart_txrx_direction>
}
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	1f 91       	pop	r17
     e30:	0f 91       	pop	r16
     e32:	ff 90       	pop	r15
     e34:	ef 90       	pop	r14
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	3f 90       	pop	r3
     e4a:	2f 90       	pop	r2
     e4c:	08 95       	ret

00000e4e <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
     e4e:	fc 01       	movw	r30, r24
     e50:	60 83       	st	Z, r22
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	42 83       	std	Z+2, r20	; 0x02
     e56:	ec 5f       	subi	r30, 0xFC	; 252
     e58:	fd 4f       	sbci	r31, 0xFD	; 253
     e5a:	10 82       	st	Z, r1
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	10 82       	st	Z, r1
     e60:	33 96       	adiw	r30, 0x03	; 3
     e62:	10 82       	st	Z, r1
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	10 82       	st	Z, r1
     e68:	08 95       	ret

00000e6a <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     e6a:	fc 01       	movw	r30, r24
     e6c:	eb 5f       	subi	r30, 0xFB	; 251
     e6e:	fd 4f       	sbci	r31, 0xFD	; 253
     e70:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     e72:	31 96       	adiw	r30, 0x01	; 1
     e74:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	92 0f       	add	r25, r18
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	93 13       	cpse	r25, r19
     e7e:	01 c0       	rjmp	.+2      	; 0xe82 <USART_TXBuffer_FreeSpace+0x18>
     e80:	80 e0       	ldi	r24, 0x00	; 0
}
     e82:	08 95       	ret

00000e84 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
     e8a:	dc 01       	movw	r26, r24
     e8c:	ab 5f       	subi	r26, 0xFB	; 251
     e8e:	bd 4f       	sbci	r27, 0xFD	; 253
     e90:	9c 91       	ld	r25, X
     e92:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
     e94:	11 96       	adiw	r26, 0x01	; 1
     e96:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	92 13       	cpse	r25, r18
     e9c:	01 c0       	rjmp	.+2      	; 0xea0 <USART_TXBuffer_PutByte+0x1c>
     e9e:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
     ea0:	92 17       	cp	r25, r18
     ea2:	b1 f0       	breq	.+44     	; 0xed0 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
     ea4:	ef 01       	movw	r28, r30
     ea6:	cb 5f       	subi	r28, 0xFB	; 251
     ea8:	dd 4f       	sbci	r29, 0xFD	; 253
     eaa:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
     eac:	df 01       	movw	r26, r30
     eae:	a9 0f       	add	r26, r25
     eb0:	b1 1d       	adc	r27, r1
     eb2:	ad 5f       	subi	r26, 0xFD	; 253
     eb4:	be 4f       	sbci	r27, 0xFE	; 254
     eb6:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
     eba:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
     ebc:	a0 81       	ld	r26, Z
     ebe:	b1 81       	ldd	r27, Z+1	; 0x01
     ec0:	13 96       	adiw	r26, 0x03	; 3
     ec2:	9c 91       	ld	r25, X
     ec4:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
     ec6:	9c 7f       	andi	r25, 0xFC	; 252
     ec8:	22 81       	ldd	r18, Z+2	; 0x02
     eca:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
     ecc:	13 96       	adiw	r26, 0x03	; 3
     ece:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
     ed0:	df 91       	pop	r29
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
     ed6:	fc 01       	movw	r30, r24
     ed8:	ed 5f       	subi	r30, 0xFD	; 253
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
     ede:	31 96       	adiw	r30, 0x01	; 1
     ee0:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	29 13       	cpse	r18, r25
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <USART_RXBufferData_Available+0x14>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
}
     eea:	08 95       	ret

00000eec <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
     eec:	fc 01       	movw	r30, r24
     eee:	ec 5f       	subi	r30, 0xFC	; 252
     ef0:	fd 4f       	sbci	r31, 0xFD	; 253
     ef2:	20 81       	ld	r18, Z
     ef4:	dc 01       	movw	r26, r24
     ef6:	a2 0f       	add	r26, r18
     ef8:	b1 1d       	adc	r27, r1
     efa:	13 96       	adiw	r26, 0x03	; 3
     efc:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
     efe:	90 81       	ld	r25, Z
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	90 83       	st	Z, r25

	return ans;
}
     f04:	08 95       	ret

00000f06 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
     f06:	fc 01       	movw	r30, r24
     f08:	ed 5f       	subi	r30, 0xFD	; 253
     f0a:	fd 4f       	sbci	r31, 0xFD	; 253
     f0c:	20 81       	ld	r18, Z
     f0e:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
     f10:	31 96       	adiw	r30, 0x01	; 1
     f12:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
     f14:	dc 01       	movw	r26, r24
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	11 97       	sbiw	r26, 0x01	; 1
     f1c:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
     f1e:	23 17       	cp	r18, r19
     f20:	59 f0       	breq	.+22     	; 0xf38 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
     f22:	fc 01       	movw	r30, r24
     f24:	ed 5f       	subi	r30, 0xFD	; 253
     f26:	fd 4f       	sbci	r31, 0xFD	; 253
     f28:	30 81       	ld	r19, Z
     f2a:	a3 0f       	add	r26, r19
     f2c:	b1 1d       	adc	r27, r1
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
     f32:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
     f38:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
     f3a:	08 95       	ret

00000f3c <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
     f40:	fc 01       	movw	r30, r24
     f42:	ea 5f       	subi	r30, 0xFA	; 250
     f44:	fd 4f       	sbci	r31, 0xFD	; 253
     f46:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
     f48:	31 97       	sbiw	r30, 0x01	; 1
     f4a:	20 81       	ld	r18, Z
     f4c:	32 13       	cpse	r19, r18
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
     f50:	dc 01       	movw	r26, r24
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
     f58:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
     f5a:	83 83       	std	Z+3, r24	; 0x03
     f5c:	11 c0       	rjmp	.+34     	; 0xf80 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
     f5e:	fc 01       	movw	r30, r24
     f60:	ea 5f       	subi	r30, 0xFA	; 250
     f62:	fd 4f       	sbci	r31, 0xFD	; 253
     f64:	20 81       	ld	r18, Z
     f66:	dc 01       	movw	r26, r24
     f68:	a2 0f       	add	r26, r18
     f6a:	b1 1d       	adc	r27, r1
     f6c:	ad 5f       	subi	r26, 0xFD	; 253
     f6e:	be 4f       	sbci	r27, 0xFE	; 254
     f70:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
     f72:	ec 01       	movw	r28, r24
     f74:	a8 81       	ld	r26, Y
     f76:	b9 81       	ldd	r27, Y+1	; 0x01
     f78:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
     f7a:	80 81       	ld	r24, Z
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 83       	st	Z, r24
	}
}
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	08 95       	ret

00000f86 <__subsf3>:
     f86:	50 58       	subi	r21, 0x80	; 128

00000f88 <__addsf3>:
     f88:	bb 27       	eor	r27, r27
     f8a:	aa 27       	eor	r26, r26
     f8c:	0e 94 db 07 	call	0xfb6	; 0xfb6 <__addsf3x>
     f90:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
     f94:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
     f98:	38 f0       	brcs	.+14     	; 0xfa8 <__addsf3+0x20>
     f9a:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
     f9e:	20 f0       	brcs	.+8      	; 0xfa8 <__addsf3+0x20>
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <__addsf3+0x28>
     fa2:	9f 3f       	cpi	r25, 0xFF	; 255
     fa4:	19 f4       	brne	.+6      	; 0xfac <__addsf3+0x24>
     fa6:	26 f4       	brtc	.+8      	; 0xfb0 <__addsf3+0x28>
     fa8:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
     fac:	0e f4       	brtc	.+2      	; 0xfb0 <__addsf3+0x28>
     fae:	e0 95       	com	r30
     fb0:	e7 fb       	bst	r30, 7
     fb2:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>

00000fb6 <__addsf3x>:
     fb6:	e9 2f       	mov	r30, r25
     fb8:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
     fbc:	58 f3       	brcs	.-42     	; 0xf94 <__addsf3+0xc>
     fbe:	ba 17       	cp	r27, r26
     fc0:	62 07       	cpc	r22, r18
     fc2:	73 07       	cpc	r23, r19
     fc4:	84 07       	cpc	r24, r20
     fc6:	95 07       	cpc	r25, r21
     fc8:	20 f0       	brcs	.+8      	; 0xfd2 <__addsf3x+0x1c>
     fca:	79 f4       	brne	.+30     	; 0xfea <__addsf3x+0x34>
     fcc:	a6 f5       	brtc	.+104    	; 0x1036 <__addsf3x+0x80>
     fce:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
     fd2:	0e f4       	brtc	.+2      	; 0xfd6 <__addsf3x+0x20>
     fd4:	e0 95       	com	r30
     fd6:	0b 2e       	mov	r0, r27
     fd8:	ba 2f       	mov	r27, r26
     fda:	a0 2d       	mov	r26, r0
     fdc:	0b 01       	movw	r0, r22
     fde:	b9 01       	movw	r22, r18
     fe0:	90 01       	movw	r18, r0
     fe2:	0c 01       	movw	r0, r24
     fe4:	ca 01       	movw	r24, r20
     fe6:	a0 01       	movw	r20, r0
     fe8:	11 24       	eor	r1, r1
     fea:	ff 27       	eor	r31, r31
     fec:	59 1b       	sub	r21, r25
     fee:	99 f0       	breq	.+38     	; 0x1016 <__addsf3x+0x60>
     ff0:	59 3f       	cpi	r21, 0xF9	; 249
     ff2:	50 f4       	brcc	.+20     	; 0x1008 <__addsf3x+0x52>
     ff4:	50 3e       	cpi	r21, 0xE0	; 224
     ff6:	68 f1       	brcs	.+90     	; 0x1052 <__addsf3x+0x9c>
     ff8:	1a 16       	cp	r1, r26
     ffa:	f0 40       	sbci	r31, 0x00	; 0
     ffc:	a2 2f       	mov	r26, r18
     ffe:	23 2f       	mov	r18, r19
    1000:	34 2f       	mov	r19, r20
    1002:	44 27       	eor	r20, r20
    1004:	58 5f       	subi	r21, 0xF8	; 248
    1006:	f3 cf       	rjmp	.-26     	; 0xfee <__addsf3x+0x38>
    1008:	46 95       	lsr	r20
    100a:	37 95       	ror	r19
    100c:	27 95       	ror	r18
    100e:	a7 95       	ror	r26
    1010:	f0 40       	sbci	r31, 0x00	; 0
    1012:	53 95       	inc	r21
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__addsf3x+0x52>
    1016:	7e f4       	brtc	.+30     	; 0x1036 <__addsf3x+0x80>
    1018:	1f 16       	cp	r1, r31
    101a:	ba 0b       	sbc	r27, r26
    101c:	62 0b       	sbc	r22, r18
    101e:	73 0b       	sbc	r23, r19
    1020:	84 0b       	sbc	r24, r20
    1022:	ba f0       	brmi	.+46     	; 0x1052 <__addsf3x+0x9c>
    1024:	91 50       	subi	r25, 0x01	; 1
    1026:	a1 f0       	breq	.+40     	; 0x1050 <__addsf3x+0x9a>
    1028:	ff 0f       	add	r31, r31
    102a:	bb 1f       	adc	r27, r27
    102c:	66 1f       	adc	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	88 1f       	adc	r24, r24
    1032:	c2 f7       	brpl	.-16     	; 0x1024 <__addsf3x+0x6e>
    1034:	0e c0       	rjmp	.+28     	; 0x1052 <__addsf3x+0x9c>
    1036:	ba 0f       	add	r27, r26
    1038:	62 1f       	adc	r22, r18
    103a:	73 1f       	adc	r23, r19
    103c:	84 1f       	adc	r24, r20
    103e:	48 f4       	brcc	.+18     	; 0x1052 <__addsf3x+0x9c>
    1040:	87 95       	ror	r24
    1042:	77 95       	ror	r23
    1044:	67 95       	ror	r22
    1046:	b7 95       	ror	r27
    1048:	f7 95       	ror	r31
    104a:	9e 3f       	cpi	r25, 0xFE	; 254
    104c:	08 f0       	brcs	.+2      	; 0x1050 <__addsf3x+0x9a>
    104e:	b0 cf       	rjmp	.-160    	; 0xfb0 <__addsf3+0x28>
    1050:	93 95       	inc	r25
    1052:	88 0f       	add	r24, r24
    1054:	08 f0       	brcs	.+2      	; 0x1058 <__addsf3x+0xa2>
    1056:	99 27       	eor	r25, r25
    1058:	ee 0f       	add	r30, r30
    105a:	97 95       	ror	r25
    105c:	87 95       	ror	r24
    105e:	08 95       	ret

00001060 <__divsf3>:
    1060:	0e 94 44 08 	call	0x1088	; 0x1088 <__divsf3x>
    1064:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    1068:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    106c:	58 f0       	brcs	.+22     	; 0x1084 <__divsf3+0x24>
    106e:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    1072:	40 f0       	brcs	.+16     	; 0x1084 <__divsf3+0x24>
    1074:	29 f4       	brne	.+10     	; 0x1080 <__divsf3+0x20>
    1076:	5f 3f       	cpi	r21, 0xFF	; 255
    1078:	29 f0       	breq	.+10     	; 0x1084 <__divsf3+0x24>
    107a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    107e:	51 11       	cpse	r21, r1
    1080:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    1084:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>

00001088 <__divsf3x>:
    1088:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    108c:	68 f3       	brcs	.-38     	; 0x1068 <__divsf3+0x8>

0000108e <__divsf3_pse>:
    108e:	99 23       	and	r25, r25
    1090:	b1 f3       	breq	.-20     	; 0x107e <__divsf3+0x1e>
    1092:	55 23       	and	r21, r21
    1094:	91 f3       	breq	.-28     	; 0x107a <__divsf3+0x1a>
    1096:	95 1b       	sub	r25, r21
    1098:	55 0b       	sbc	r21, r21
    109a:	bb 27       	eor	r27, r27
    109c:	aa 27       	eor	r26, r26
    109e:	62 17       	cp	r22, r18
    10a0:	73 07       	cpc	r23, r19
    10a2:	84 07       	cpc	r24, r20
    10a4:	38 f0       	brcs	.+14     	; 0x10b4 <__divsf3_pse+0x26>
    10a6:	9f 5f       	subi	r25, 0xFF	; 255
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	44 1f       	adc	r20, r20
    10b0:	aa 1f       	adc	r26, r26
    10b2:	a9 f3       	breq	.-22     	; 0x109e <__divsf3_pse+0x10>
    10b4:	35 d0       	rcall	.+106    	; 0x1120 <__divsf3_pse+0x92>
    10b6:	0e 2e       	mov	r0, r30
    10b8:	3a f0       	brmi	.+14     	; 0x10c8 <__divsf3_pse+0x3a>
    10ba:	e0 e8       	ldi	r30, 0x80	; 128
    10bc:	32 d0       	rcall	.+100    	; 0x1122 <__divsf3_pse+0x94>
    10be:	91 50       	subi	r25, 0x01	; 1
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	e6 95       	lsr	r30
    10c4:	00 1c       	adc	r0, r0
    10c6:	ca f7       	brpl	.-14     	; 0x10ba <__divsf3_pse+0x2c>
    10c8:	2b d0       	rcall	.+86     	; 0x1120 <__divsf3_pse+0x92>
    10ca:	fe 2f       	mov	r31, r30
    10cc:	29 d0       	rcall	.+82     	; 0x1120 <__divsf3_pse+0x92>
    10ce:	66 0f       	add	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	bb 1f       	adc	r27, r27
    10d6:	26 17       	cp	r18, r22
    10d8:	37 07       	cpc	r19, r23
    10da:	48 07       	cpc	r20, r24
    10dc:	ab 07       	cpc	r26, r27
    10de:	b0 e8       	ldi	r27, 0x80	; 128
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__divsf3_pse+0x56>
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	80 2d       	mov	r24, r0
    10e6:	bf 01       	movw	r22, r30
    10e8:	ff 27       	eor	r31, r31
    10ea:	93 58       	subi	r25, 0x83	; 131
    10ec:	5f 4f       	sbci	r21, 0xFF	; 255
    10ee:	3a f0       	brmi	.+14     	; 0x10fe <__divsf3_pse+0x70>
    10f0:	9e 3f       	cpi	r25, 0xFE	; 254
    10f2:	51 05       	cpc	r21, r1
    10f4:	78 f0       	brcs	.+30     	; 0x1114 <__divsf3_pse+0x86>
    10f6:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    10fa:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    10fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1100:	e4 f3       	brlt	.-8      	; 0x10fa <__divsf3_pse+0x6c>
    1102:	98 3e       	cpi	r25, 0xE8	; 232
    1104:	d4 f3       	brlt	.-12     	; 0x10fa <__divsf3_pse+0x6c>
    1106:	86 95       	lsr	r24
    1108:	77 95       	ror	r23
    110a:	67 95       	ror	r22
    110c:	b7 95       	ror	r27
    110e:	f7 95       	ror	r31
    1110:	9f 5f       	subi	r25, 0xFF	; 255
    1112:	c9 f7       	brne	.-14     	; 0x1106 <__divsf3_pse+0x78>
    1114:	88 0f       	add	r24, r24
    1116:	91 1d       	adc	r25, r1
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret
    1120:	e1 e0       	ldi	r30, 0x01	; 1
    1122:	66 0f       	add	r22, r22
    1124:	77 1f       	adc	r23, r23
    1126:	88 1f       	adc	r24, r24
    1128:	bb 1f       	adc	r27, r27
    112a:	62 17       	cp	r22, r18
    112c:	73 07       	cpc	r23, r19
    112e:	84 07       	cpc	r24, r20
    1130:	ba 07       	cpc	r27, r26
    1132:	20 f0       	brcs	.+8      	; 0x113c <__divsf3_pse+0xae>
    1134:	62 1b       	sub	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	ba 0b       	sbc	r27, r26
    113c:	ee 1f       	adc	r30, r30
    113e:	88 f7       	brcc	.-30     	; 0x1122 <__divsf3_pse+0x94>
    1140:	e0 95       	com	r30
    1142:	08 95       	ret

00001144 <__fixunssfsi>:
    1144:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    1148:	88 f0       	brcs	.+34     	; 0x116c <__fixunssfsi+0x28>
    114a:	9f 57       	subi	r25, 0x7F	; 127
    114c:	98 f0       	brcs	.+38     	; 0x1174 <__fixunssfsi+0x30>
    114e:	b9 2f       	mov	r27, r25
    1150:	99 27       	eor	r25, r25
    1152:	b7 51       	subi	r27, 0x17	; 23
    1154:	b0 f0       	brcs	.+44     	; 0x1182 <__fixunssfsi+0x3e>
    1156:	e1 f0       	breq	.+56     	; 0x1190 <__fixunssfsi+0x4c>
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	88 1f       	adc	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	1a f0       	brmi	.+6      	; 0x1168 <__fixunssfsi+0x24>
    1162:	ba 95       	dec	r27
    1164:	c9 f7       	brne	.-14     	; 0x1158 <__fixunssfsi+0x14>
    1166:	14 c0       	rjmp	.+40     	; 0x1190 <__fixunssfsi+0x4c>
    1168:	b1 30       	cpi	r27, 0x01	; 1
    116a:	91 f0       	breq	.+36     	; 0x1190 <__fixunssfsi+0x4c>
    116c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fp_zero>
    1170:	b1 e0       	ldi	r27, 0x01	; 1
    1172:	08 95       	ret
    1174:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__fp_zero>
    1178:	67 2f       	mov	r22, r23
    117a:	78 2f       	mov	r23, r24
    117c:	88 27       	eor	r24, r24
    117e:	b8 5f       	subi	r27, 0xF8	; 248
    1180:	39 f0       	breq	.+14     	; 0x1190 <__fixunssfsi+0x4c>
    1182:	b9 3f       	cpi	r27, 0xF9	; 249
    1184:	cc f3       	brlt	.-14     	; 0x1178 <__fixunssfsi+0x34>
    1186:	86 95       	lsr	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	b3 95       	inc	r27
    118e:	d9 f7       	brne	.-10     	; 0x1186 <__fixunssfsi+0x42>
    1190:	3e f4       	brtc	.+14     	; 0x11a0 <__fixunssfsi+0x5c>
    1192:	90 95       	com	r25
    1194:	80 95       	com	r24
    1196:	70 95       	com	r23
    1198:	61 95       	neg	r22
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	08 95       	ret

000011a2 <__floatunsisf>:
    11a2:	e8 94       	clt
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <__floatsisf+0x12>

000011a6 <__floatsisf>:
    11a6:	97 fb       	bst	r25, 7
    11a8:	3e f4       	brtc	.+14     	; 0x11b8 <__floatsisf+0x12>
    11aa:	90 95       	com	r25
    11ac:	80 95       	com	r24
    11ae:	70 95       	com	r23
    11b0:	61 95       	neg	r22
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	8f 4f       	sbci	r24, 0xFF	; 255
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	99 23       	and	r25, r25
    11ba:	a9 f0       	breq	.+42     	; 0x11e6 <__floatsisf+0x40>
    11bc:	f9 2f       	mov	r31, r25
    11be:	96 e9       	ldi	r25, 0x96	; 150
    11c0:	bb 27       	eor	r27, r27
    11c2:	93 95       	inc	r25
    11c4:	f6 95       	lsr	r31
    11c6:	87 95       	ror	r24
    11c8:	77 95       	ror	r23
    11ca:	67 95       	ror	r22
    11cc:	b7 95       	ror	r27
    11ce:	f1 11       	cpse	r31, r1
    11d0:	f8 cf       	rjmp	.-16     	; 0x11c2 <__floatsisf+0x1c>
    11d2:	fa f4       	brpl	.+62     	; 0x1212 <__floatsisf+0x6c>
    11d4:	bb 0f       	add	r27, r27
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__floatsisf+0x36>
    11d8:	60 ff       	sbrs	r22, 0
    11da:	1b c0       	rjmp	.+54     	; 0x1212 <__floatsisf+0x6c>
    11dc:	6f 5f       	subi	r22, 0xFF	; 255
    11de:	7f 4f       	sbci	r23, 0xFF	; 255
    11e0:	8f 4f       	sbci	r24, 0xFF	; 255
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	16 c0       	rjmp	.+44     	; 0x1212 <__floatsisf+0x6c>
    11e6:	88 23       	and	r24, r24
    11e8:	11 f0       	breq	.+4      	; 0x11ee <__floatsisf+0x48>
    11ea:	96 e9       	ldi	r25, 0x96	; 150
    11ec:	11 c0       	rjmp	.+34     	; 0x1210 <__floatsisf+0x6a>
    11ee:	77 23       	and	r23, r23
    11f0:	21 f0       	breq	.+8      	; 0x11fa <__floatsisf+0x54>
    11f2:	9e e8       	ldi	r25, 0x8E	; 142
    11f4:	87 2f       	mov	r24, r23
    11f6:	76 2f       	mov	r23, r22
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <__floatsisf+0x5e>
    11fa:	66 23       	and	r22, r22
    11fc:	71 f0       	breq	.+28     	; 0x121a <__floatsisf+0x74>
    11fe:	96 e8       	ldi	r25, 0x86	; 134
    1200:	86 2f       	mov	r24, r22
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	2a f0       	brmi	.+10     	; 0x1212 <__floatsisf+0x6c>
    1208:	9a 95       	dec	r25
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	da f7       	brpl	.-10     	; 0x1208 <__floatsisf+0x62>
    1212:	88 0f       	add	r24, r24
    1214:	96 95       	lsr	r25
    1216:	87 95       	ror	r24
    1218:	97 f9       	bld	r25, 7
    121a:	08 95       	ret

0000121c <__fp_inf>:
    121c:	97 f9       	bld	r25, 7
    121e:	9f 67       	ori	r25, 0x7F	; 127
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	08 95       	ret

00001228 <__fp_nan>:
    1228:	9f ef       	ldi	r25, 0xFF	; 255
    122a:	80 ec       	ldi	r24, 0xC0	; 192
    122c:	08 95       	ret

0000122e <__fp_pscA>:
    122e:	00 24       	eor	r0, r0
    1230:	0a 94       	dec	r0
    1232:	16 16       	cp	r1, r22
    1234:	17 06       	cpc	r1, r23
    1236:	18 06       	cpc	r1, r24
    1238:	09 06       	cpc	r0, r25
    123a:	08 95       	ret

0000123c <__fp_pscB>:
    123c:	00 24       	eor	r0, r0
    123e:	0a 94       	dec	r0
    1240:	12 16       	cp	r1, r18
    1242:	13 06       	cpc	r1, r19
    1244:	14 06       	cpc	r1, r20
    1246:	05 06       	cpc	r0, r21
    1248:	08 95       	ret

0000124a <__fp_round>:
    124a:	09 2e       	mov	r0, r25
    124c:	03 94       	inc	r0
    124e:	00 0c       	add	r0, r0
    1250:	11 f4       	brne	.+4      	; 0x1256 <__fp_round+0xc>
    1252:	88 23       	and	r24, r24
    1254:	52 f0       	brmi	.+20     	; 0x126a <__fp_round+0x20>
    1256:	bb 0f       	add	r27, r27
    1258:	40 f4       	brcc	.+16     	; 0x126a <__fp_round+0x20>
    125a:	bf 2b       	or	r27, r31
    125c:	11 f4       	brne	.+4      	; 0x1262 <__fp_round+0x18>
    125e:	60 ff       	sbrs	r22, 0
    1260:	04 c0       	rjmp	.+8      	; 0x126a <__fp_round+0x20>
    1262:	6f 5f       	subi	r22, 0xFF	; 255
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__fp_split3>:
    126c:	57 fd       	sbrc	r21, 7
    126e:	90 58       	subi	r25, 0x80	; 128
    1270:	44 0f       	add	r20, r20
    1272:	55 1f       	adc	r21, r21
    1274:	59 f0       	breq	.+22     	; 0x128c <__fp_splitA+0x10>
    1276:	5f 3f       	cpi	r21, 0xFF	; 255
    1278:	71 f0       	breq	.+28     	; 0x1296 <__fp_splitA+0x1a>
    127a:	47 95       	ror	r20

0000127c <__fp_splitA>:
    127c:	88 0f       	add	r24, r24
    127e:	97 fb       	bst	r25, 7
    1280:	99 1f       	adc	r25, r25
    1282:	61 f0       	breq	.+24     	; 0x129c <__fp_splitA+0x20>
    1284:	9f 3f       	cpi	r25, 0xFF	; 255
    1286:	79 f0       	breq	.+30     	; 0x12a6 <__fp_splitA+0x2a>
    1288:	87 95       	ror	r24
    128a:	08 95       	ret
    128c:	12 16       	cp	r1, r18
    128e:	13 06       	cpc	r1, r19
    1290:	14 06       	cpc	r1, r20
    1292:	55 1f       	adc	r21, r21
    1294:	f2 cf       	rjmp	.-28     	; 0x127a <__fp_split3+0xe>
    1296:	46 95       	lsr	r20
    1298:	f1 df       	rcall	.-30     	; 0x127c <__fp_splitA>
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <__fp_splitA+0x30>
    129c:	16 16       	cp	r1, r22
    129e:	17 06       	cpc	r1, r23
    12a0:	18 06       	cpc	r1, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	f1 cf       	rjmp	.-30     	; 0x1288 <__fp_splitA+0xc>
    12a6:	86 95       	lsr	r24
    12a8:	71 05       	cpc	r23, r1
    12aa:	61 05       	cpc	r22, r1
    12ac:	08 94       	sec
    12ae:	08 95       	ret

000012b0 <__fp_zero>:
    12b0:	e8 94       	clt

000012b2 <__fp_szero>:
    12b2:	bb 27       	eor	r27, r27
    12b4:	66 27       	eor	r22, r22
    12b6:	77 27       	eor	r23, r23
    12b8:	cb 01       	movw	r24, r22
    12ba:	97 f9       	bld	r25, 7
    12bc:	08 95       	ret

000012be <__mulsf3>:
    12be:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__mulsf3x>
    12c2:	0c 94 25 09 	jmp	0x124a	; 0x124a <__fp_round>
    12c6:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_pscA>
    12ca:	38 f0       	brcs	.+14     	; 0x12da <__mulsf3+0x1c>
    12cc:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_pscB>
    12d0:	20 f0       	brcs	.+8      	; 0x12da <__mulsf3+0x1c>
    12d2:	95 23       	and	r25, r21
    12d4:	11 f0       	breq	.+4      	; 0x12da <__mulsf3+0x1c>
    12d6:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    12da:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__fp_nan>
    12de:	11 24       	eor	r1, r1
    12e0:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>

000012e4 <__mulsf3x>:
    12e4:	0e 94 36 09 	call	0x126c	; 0x126c <__fp_split3>
    12e8:	70 f3       	brcs	.-36     	; 0x12c6 <__mulsf3+0x8>

000012ea <__mulsf3_pse>:
    12ea:	95 9f       	mul	r25, r21
    12ec:	c1 f3       	breq	.-16     	; 0x12de <__mulsf3+0x20>
    12ee:	95 0f       	add	r25, r21
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	55 1f       	adc	r21, r21
    12f4:	62 9f       	mul	r22, r18
    12f6:	f0 01       	movw	r30, r0
    12f8:	72 9f       	mul	r23, r18
    12fa:	bb 27       	eor	r27, r27
    12fc:	f0 0d       	add	r31, r0
    12fe:	b1 1d       	adc	r27, r1
    1300:	63 9f       	mul	r22, r19
    1302:	aa 27       	eor	r26, r26
    1304:	f0 0d       	add	r31, r0
    1306:	b1 1d       	adc	r27, r1
    1308:	aa 1f       	adc	r26, r26
    130a:	64 9f       	mul	r22, r20
    130c:	66 27       	eor	r22, r22
    130e:	b0 0d       	add	r27, r0
    1310:	a1 1d       	adc	r26, r1
    1312:	66 1f       	adc	r22, r22
    1314:	82 9f       	mul	r24, r18
    1316:	22 27       	eor	r18, r18
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	62 1f       	adc	r22, r18
    131e:	73 9f       	mul	r23, r19
    1320:	b0 0d       	add	r27, r0
    1322:	a1 1d       	adc	r26, r1
    1324:	62 1f       	adc	r22, r18
    1326:	83 9f       	mul	r24, r19
    1328:	a0 0d       	add	r26, r0
    132a:	61 1d       	adc	r22, r1
    132c:	22 1f       	adc	r18, r18
    132e:	74 9f       	mul	r23, r20
    1330:	33 27       	eor	r19, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	23 1f       	adc	r18, r19
    1338:	84 9f       	mul	r24, r20
    133a:	60 0d       	add	r22, r0
    133c:	21 1d       	adc	r18, r1
    133e:	82 2f       	mov	r24, r18
    1340:	76 2f       	mov	r23, r22
    1342:	6a 2f       	mov	r22, r26
    1344:	11 24       	eor	r1, r1
    1346:	9f 57       	subi	r25, 0x7F	; 127
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	9a f0       	brmi	.+38     	; 0x1372 <__mulsf3_pse+0x88>
    134c:	f1 f0       	breq	.+60     	; 0x138a <__mulsf3_pse+0xa0>
    134e:	88 23       	and	r24, r24
    1350:	4a f0       	brmi	.+18     	; 0x1364 <__mulsf3_pse+0x7a>
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	a9 f7       	brne	.-22     	; 0x134e <__mulsf3_pse+0x64>
    1364:	9e 3f       	cpi	r25, 0xFE	; 254
    1366:	51 05       	cpc	r21, r1
    1368:	80 f0       	brcs	.+32     	; 0x138a <__mulsf3_pse+0xa0>
    136a:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__fp_inf>
    136e:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>
    1372:	5f 3f       	cpi	r21, 0xFF	; 255
    1374:	e4 f3       	brlt	.-8      	; 0x136e <__mulsf3_pse+0x84>
    1376:	98 3e       	cpi	r25, 0xE8	; 232
    1378:	d4 f3       	brlt	.-12     	; 0x136e <__mulsf3_pse+0x84>
    137a:	86 95       	lsr	r24
    137c:	77 95       	ror	r23
    137e:	67 95       	ror	r22
    1380:	b7 95       	ror	r27
    1382:	f7 95       	ror	r31
    1384:	e7 95       	ror	r30
    1386:	9f 5f       	subi	r25, 0xFF	; 255
    1388:	c1 f7       	brne	.-16     	; 0x137a <__mulsf3_pse+0x90>
    138a:	fe 2b       	or	r31, r30
    138c:	88 0f       	add	r24, r24
    138e:	91 1d       	adc	r25, r1
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <round>:
    1398:	0e 94 3e 09 	call	0x127c	; 0x127c <__fp_splitA>
    139c:	e8 f0       	brcs	.+58     	; 0x13d8 <round+0x40>
    139e:	9e 37       	cpi	r25, 0x7E	; 126
    13a0:	e8 f0       	brcs	.+58     	; 0x13dc <round+0x44>
    13a2:	96 39       	cpi	r25, 0x96	; 150
    13a4:	b8 f4       	brcc	.+46     	; 0x13d4 <round+0x3c>
    13a6:	9e 38       	cpi	r25, 0x8E	; 142
    13a8:	48 f4       	brcc	.+18     	; 0x13bc <round+0x24>
    13aa:	67 2f       	mov	r22, r23
    13ac:	78 2f       	mov	r23, r24
    13ae:	88 27       	eor	r24, r24
    13b0:	98 5f       	subi	r25, 0xF8	; 248
    13b2:	f9 cf       	rjmp	.-14     	; 0x13a6 <round+0xe>
    13b4:	86 95       	lsr	r24
    13b6:	77 95       	ror	r23
    13b8:	67 95       	ror	r22
    13ba:	93 95       	inc	r25
    13bc:	95 39       	cpi	r25, 0x95	; 149
    13be:	d0 f3       	brcs	.-12     	; 0x13b4 <round+0x1c>
    13c0:	b6 2f       	mov	r27, r22
    13c2:	b1 70       	andi	r27, 0x01	; 1
    13c4:	6b 0f       	add	r22, r27
    13c6:	71 1d       	adc	r23, r1
    13c8:	81 1d       	adc	r24, r1
    13ca:	20 f4       	brcc	.+8      	; 0x13d4 <round+0x3c>
    13cc:	87 95       	ror	r24
    13ce:	77 95       	ror	r23
    13d0:	67 95       	ror	r22
    13d2:	93 95       	inc	r25
    13d4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__fp_mintl>
    13d8:	0c 94 0b 0a 	jmp	0x1416	; 0x1416 <__fp_mpack>
    13dc:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__fp_szero>

000013e0 <__fp_mintl>:
    13e0:	88 23       	and	r24, r24
    13e2:	71 f4       	brne	.+28     	; 0x1400 <__fp_mintl+0x20>
    13e4:	77 23       	and	r23, r23
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <__fp_mintl+0x10>
    13e8:	98 50       	subi	r25, 0x08	; 8
    13ea:	87 2b       	or	r24, r23
    13ec:	76 2f       	mov	r23, r22
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <__fp_mintl+0x1e>
    13f0:	66 23       	and	r22, r22
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <__fp_mintl+0x18>
    13f4:	99 27       	eor	r25, r25
    13f6:	0d c0       	rjmp	.+26     	; 0x1412 <__fp_mintl+0x32>
    13f8:	90 51       	subi	r25, 0x10	; 16
    13fa:	86 2b       	or	r24, r22
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	2a f0       	brmi	.+10     	; 0x140c <__fp_mintl+0x2c>
    1402:	9a 95       	dec	r25
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	da f7       	brpl	.-10     	; 0x1402 <__fp_mintl+0x22>
    140c:	88 0f       	add	r24, r24
    140e:	96 95       	lsr	r25
    1410:	87 95       	ror	r24
    1412:	97 f9       	bld	r25, 7
    1414:	08 95       	ret

00001416 <__fp_mpack>:
    1416:	9f 3f       	cpi	r25, 0xFF	; 255
    1418:	31 f0       	breq	.+12     	; 0x1426 <__fp_mpack_finite+0xc>

0000141a <__fp_mpack_finite>:
    141a:	91 50       	subi	r25, 0x01	; 1
    141c:	20 f4       	brcc	.+8      	; 0x1426 <__fp_mpack_finite+0xc>
    141e:	87 95       	ror	r24
    1420:	77 95       	ror	r23
    1422:	67 95       	ror	r22
    1424:	b7 95       	ror	r27
    1426:	88 0f       	add	r24, r24
    1428:	91 1d       	adc	r25, r1
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <malloc>:
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	82 30       	cpi	r24, 0x02	; 2
    143c:	91 05       	cpc	r25, r1
    143e:	10 f4       	brcc	.+4      	; 0x1444 <malloc+0x12>
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	e0 91 1d 23 	lds	r30, 0x231D	; 0x80231d <__flp>
    1448:	f0 91 1e 23 	lds	r31, 0x231E	; 0x80231e <__flp+0x1>
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	a0 e0       	ldi	r26, 0x00	; 0
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	30 97       	sbiw	r30, 0x00	; 0
    1456:	19 f1       	breq	.+70     	; 0x149e <malloc+0x6c>
    1458:	40 81       	ld	r20, Z
    145a:	51 81       	ldd	r21, Z+1	; 0x01
    145c:	02 81       	ldd	r16, Z+2	; 0x02
    145e:	13 81       	ldd	r17, Z+3	; 0x03
    1460:	48 17       	cp	r20, r24
    1462:	59 07       	cpc	r21, r25
    1464:	c8 f0       	brcs	.+50     	; 0x1498 <malloc+0x66>
    1466:	84 17       	cp	r24, r20
    1468:	95 07       	cpc	r25, r21
    146a:	69 f4       	brne	.+26     	; 0x1486 <malloc+0x54>
    146c:	10 97       	sbiw	r26, 0x00	; 0
    146e:	31 f0       	breq	.+12     	; 0x147c <malloc+0x4a>
    1470:	12 96       	adiw	r26, 0x02	; 2
    1472:	0c 93       	st	X, r16
    1474:	12 97       	sbiw	r26, 0x02	; 2
    1476:	13 96       	adiw	r26, 0x03	; 3
    1478:	1c 93       	st	X, r17
    147a:	27 c0       	rjmp	.+78     	; 0x14ca <malloc+0x98>
    147c:	00 93 1d 23 	sts	0x231D, r16	; 0x80231d <__flp>
    1480:	10 93 1e 23 	sts	0x231E, r17	; 0x80231e <__flp+0x1>
    1484:	22 c0       	rjmp	.+68     	; 0x14ca <malloc+0x98>
    1486:	21 15       	cp	r18, r1
    1488:	31 05       	cpc	r19, r1
    148a:	19 f0       	breq	.+6      	; 0x1492 <malloc+0x60>
    148c:	42 17       	cp	r20, r18
    148e:	53 07       	cpc	r21, r19
    1490:	18 f4       	brcc	.+6      	; 0x1498 <malloc+0x66>
    1492:	9a 01       	movw	r18, r20
    1494:	bd 01       	movw	r22, r26
    1496:	ef 01       	movw	r28, r30
    1498:	df 01       	movw	r26, r30
    149a:	f8 01       	movw	r30, r16
    149c:	db cf       	rjmp	.-74     	; 0x1454 <malloc+0x22>
    149e:	21 15       	cp	r18, r1
    14a0:	31 05       	cpc	r19, r1
    14a2:	f9 f0       	breq	.+62     	; 0x14e2 <malloc+0xb0>
    14a4:	28 1b       	sub	r18, r24
    14a6:	39 0b       	sbc	r19, r25
    14a8:	24 30       	cpi	r18, 0x04	; 4
    14aa:	31 05       	cpc	r19, r1
    14ac:	80 f4       	brcc	.+32     	; 0x14ce <malloc+0x9c>
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	9b 81       	ldd	r25, Y+3	; 0x03
    14b2:	61 15       	cp	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	21 f0       	breq	.+8      	; 0x14c0 <malloc+0x8e>
    14b8:	fb 01       	movw	r30, r22
    14ba:	82 83       	std	Z+2, r24	; 0x02
    14bc:	93 83       	std	Z+3, r25	; 0x03
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <malloc+0x96>
    14c0:	80 93 1d 23 	sts	0x231D, r24	; 0x80231d <__flp>
    14c4:	90 93 1e 23 	sts	0x231E, r25	; 0x80231e <__flp+0x1>
    14c8:	fe 01       	movw	r30, r28
    14ca:	32 96       	adiw	r30, 0x02	; 2
    14cc:	44 c0       	rjmp	.+136    	; 0x1556 <malloc+0x124>
    14ce:	fe 01       	movw	r30, r28
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	81 93       	st	Z+, r24
    14d6:	91 93       	st	Z+, r25
    14d8:	22 50       	subi	r18, 0x02	; 2
    14da:	31 09       	sbc	r19, r1
    14dc:	28 83       	st	Y, r18
    14de:	39 83       	std	Y+1, r19	; 0x01
    14e0:	3a c0       	rjmp	.+116    	; 0x1556 <malloc+0x124>
    14e2:	20 91 1b 23 	lds	r18, 0x231B	; 0x80231b <__brkval>
    14e6:	30 91 1c 23 	lds	r19, 0x231C	; 0x80231c <__brkval+0x1>
    14ea:	23 2b       	or	r18, r19
    14ec:	41 f4       	brne	.+16     	; 0x14fe <malloc+0xcc>
    14ee:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    14f2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    14f6:	20 93 1b 23 	sts	0x231B, r18	; 0x80231b <__brkval>
    14fa:	30 93 1c 23 	sts	0x231C, r19	; 0x80231c <__brkval+0x1>
    14fe:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1502:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1506:	21 15       	cp	r18, r1
    1508:	31 05       	cpc	r19, r1
    150a:	41 f4       	brne	.+16     	; 0x151c <malloc+0xea>
    150c:	2d b7       	in	r18, 0x3d	; 61
    150e:	3e b7       	in	r19, 0x3e	; 62
    1510:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    1514:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    1518:	24 1b       	sub	r18, r20
    151a:	35 0b       	sbc	r19, r21
    151c:	e0 91 1b 23 	lds	r30, 0x231B	; 0x80231b <__brkval>
    1520:	f0 91 1c 23 	lds	r31, 0x231C	; 0x80231c <__brkval+0x1>
    1524:	e2 17       	cp	r30, r18
    1526:	f3 07       	cpc	r31, r19
    1528:	a0 f4       	brcc	.+40     	; 0x1552 <malloc+0x120>
    152a:	2e 1b       	sub	r18, r30
    152c:	3f 0b       	sbc	r19, r31
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	78 f0       	brcs	.+30     	; 0x1552 <malloc+0x120>
    1534:	ac 01       	movw	r20, r24
    1536:	4e 5f       	subi	r20, 0xFE	; 254
    1538:	5f 4f       	sbci	r21, 0xFF	; 255
    153a:	24 17       	cp	r18, r20
    153c:	35 07       	cpc	r19, r21
    153e:	48 f0       	brcs	.+18     	; 0x1552 <malloc+0x120>
    1540:	4e 0f       	add	r20, r30
    1542:	5f 1f       	adc	r21, r31
    1544:	40 93 1b 23 	sts	0x231B, r20	; 0x80231b <__brkval>
    1548:	50 93 1c 23 	sts	0x231C, r21	; 0x80231c <__brkval+0x1>
    154c:	81 93       	st	Z+, r24
    154e:	91 93       	st	Z+, r25
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <malloc+0x124>
    1552:	e0 e0       	ldi	r30, 0x00	; 0
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	cf 01       	movw	r24, r30
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <free>:
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	09 f4       	brne	.+2      	; 0x156c <free+0xa>
    156a:	81 c0       	rjmp	.+258    	; 0x166e <free+0x10c>
    156c:	fc 01       	movw	r30, r24
    156e:	32 97       	sbiw	r30, 0x02	; 2
    1570:	12 82       	std	Z+2, r1	; 0x02
    1572:	13 82       	std	Z+3, r1	; 0x03
    1574:	a0 91 1d 23 	lds	r26, 0x231D	; 0x80231d <__flp>
    1578:	b0 91 1e 23 	lds	r27, 0x231E	; 0x80231e <__flp+0x1>
    157c:	10 97       	sbiw	r26, 0x00	; 0
    157e:	81 f4       	brne	.+32     	; 0x15a0 <free+0x3e>
    1580:	20 81       	ld	r18, Z
    1582:	31 81       	ldd	r19, Z+1	; 0x01
    1584:	82 0f       	add	r24, r18
    1586:	93 1f       	adc	r25, r19
    1588:	20 91 1b 23 	lds	r18, 0x231B	; 0x80231b <__brkval>
    158c:	30 91 1c 23 	lds	r19, 0x231C	; 0x80231c <__brkval+0x1>
    1590:	28 17       	cp	r18, r24
    1592:	39 07       	cpc	r19, r25
    1594:	51 f5       	brne	.+84     	; 0x15ea <free+0x88>
    1596:	e0 93 1b 23 	sts	0x231B, r30	; 0x80231b <__brkval>
    159a:	f0 93 1c 23 	sts	0x231C, r31	; 0x80231c <__brkval+0x1>
    159e:	67 c0       	rjmp	.+206    	; 0x166e <free+0x10c>
    15a0:	ed 01       	movw	r28, r26
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	ce 17       	cp	r28, r30
    15a8:	df 07       	cpc	r29, r31
    15aa:	40 f4       	brcc	.+16     	; 0x15bc <free+0x5a>
    15ac:	4a 81       	ldd	r20, Y+2	; 0x02
    15ae:	5b 81       	ldd	r21, Y+3	; 0x03
    15b0:	9e 01       	movw	r18, r28
    15b2:	41 15       	cp	r20, r1
    15b4:	51 05       	cpc	r21, r1
    15b6:	f1 f0       	breq	.+60     	; 0x15f4 <free+0x92>
    15b8:	ea 01       	movw	r28, r20
    15ba:	f5 cf       	rjmp	.-22     	; 0x15a6 <free+0x44>
    15bc:	c2 83       	std	Z+2, r28	; 0x02
    15be:	d3 83       	std	Z+3, r29	; 0x03
    15c0:	40 81       	ld	r20, Z
    15c2:	51 81       	ldd	r21, Z+1	; 0x01
    15c4:	84 0f       	add	r24, r20
    15c6:	95 1f       	adc	r25, r21
    15c8:	c8 17       	cp	r28, r24
    15ca:	d9 07       	cpc	r29, r25
    15cc:	59 f4       	brne	.+22     	; 0x15e4 <free+0x82>
    15ce:	88 81       	ld	r24, Y
    15d0:	99 81       	ldd	r25, Y+1	; 0x01
    15d2:	84 0f       	add	r24, r20
    15d4:	95 1f       	adc	r25, r21
    15d6:	02 96       	adiw	r24, 0x02	; 2
    15d8:	80 83       	st	Z, r24
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	9b 81       	ldd	r25, Y+3	; 0x03
    15e0:	82 83       	std	Z+2, r24	; 0x02
    15e2:	93 83       	std	Z+3, r25	; 0x03
    15e4:	21 15       	cp	r18, r1
    15e6:	31 05       	cpc	r19, r1
    15e8:	29 f4       	brne	.+10     	; 0x15f4 <free+0x92>
    15ea:	e0 93 1d 23 	sts	0x231D, r30	; 0x80231d <__flp>
    15ee:	f0 93 1e 23 	sts	0x231E, r31	; 0x80231e <__flp+0x1>
    15f2:	3d c0       	rjmp	.+122    	; 0x166e <free+0x10c>
    15f4:	e9 01       	movw	r28, r18
    15f6:	ea 83       	std	Y+2, r30	; 0x02
    15f8:	fb 83       	std	Y+3, r31	; 0x03
    15fa:	49 91       	ld	r20, Y+
    15fc:	59 91       	ld	r21, Y+
    15fe:	c4 0f       	add	r28, r20
    1600:	d5 1f       	adc	r29, r21
    1602:	ec 17       	cp	r30, r28
    1604:	fd 07       	cpc	r31, r29
    1606:	61 f4       	brne	.+24     	; 0x1620 <free+0xbe>
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	84 0f       	add	r24, r20
    160e:	95 1f       	adc	r25, r21
    1610:	02 96       	adiw	r24, 0x02	; 2
    1612:	e9 01       	movw	r28, r18
    1614:	88 83       	st	Y, r24
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	9b 83       	std	Y+3, r25	; 0x03
    1620:	e0 e0       	ldi	r30, 0x00	; 0
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	12 96       	adiw	r26, 0x02	; 2
    1626:	8d 91       	ld	r24, X+
    1628:	9c 91       	ld	r25, X
    162a:	13 97       	sbiw	r26, 0x03	; 3
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	19 f0       	breq	.+6      	; 0x1636 <free+0xd4>
    1630:	fd 01       	movw	r30, r26
    1632:	dc 01       	movw	r26, r24
    1634:	f7 cf       	rjmp	.-18     	; 0x1624 <free+0xc2>
    1636:	8d 91       	ld	r24, X+
    1638:	9c 91       	ld	r25, X
    163a:	11 97       	sbiw	r26, 0x01	; 1
    163c:	9d 01       	movw	r18, r26
    163e:	2e 5f       	subi	r18, 0xFE	; 254
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	82 0f       	add	r24, r18
    1644:	93 1f       	adc	r25, r19
    1646:	20 91 1b 23 	lds	r18, 0x231B	; 0x80231b <__brkval>
    164a:	30 91 1c 23 	lds	r19, 0x231C	; 0x80231c <__brkval+0x1>
    164e:	28 17       	cp	r18, r24
    1650:	39 07       	cpc	r19, r25
    1652:	69 f4       	brne	.+26     	; 0x166e <free+0x10c>
    1654:	30 97       	sbiw	r30, 0x00	; 0
    1656:	29 f4       	brne	.+10     	; 0x1662 <free+0x100>
    1658:	10 92 1d 23 	sts	0x231D, r1	; 0x80231d <__flp>
    165c:	10 92 1e 23 	sts	0x231E, r1	; 0x80231e <__flp+0x1>
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <free+0x104>
    1662:	12 82       	std	Z+2, r1	; 0x02
    1664:	13 82       	std	Z+3, r1	; 0x03
    1666:	a0 93 1b 23 	sts	0x231B, r26	; 0x80231b <__brkval>
    166a:	b0 93 1c 23 	sts	0x231C, r27	; 0x80231c <__brkval+0x1>
    166e:	df 91       	pop	r29
    1670:	cf 91       	pop	r28
    1672:	08 95       	ret

00001674 <memcpy>:
    1674:	fb 01       	movw	r30, r22
    1676:	dc 01       	movw	r26, r24
    1678:	02 c0       	rjmp	.+4      	; 0x167e <memcpy+0xa>
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	41 50       	subi	r20, 0x01	; 1
    1680:	50 40       	sbci	r21, 0x00	; 0
    1682:	d8 f7       	brcc	.-10     	; 0x167a <memcpy+0x6>
    1684:	08 95       	ret

00001686 <strcmp>:
    1686:	fb 01       	movw	r30, r22
    1688:	dc 01       	movw	r26, r24
    168a:	8d 91       	ld	r24, X+
    168c:	01 90       	ld	r0, Z+
    168e:	80 19       	sub	r24, r0
    1690:	01 10       	cpse	r0, r1
    1692:	d9 f3       	breq	.-10     	; 0x168a <strcmp+0x4>
    1694:	99 0b       	sbc	r25, r25
    1696:	08 95       	ret

00001698 <printf>:
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	ae 01       	movw	r20, r28
    16a2:	4a 5f       	subi	r20, 0xFA	; 250
    16a4:	5f 4f       	sbci	r21, 0xFF	; 255
    16a6:	fa 01       	movw	r30, r20
    16a8:	61 91       	ld	r22, Z+
    16aa:	71 91       	ld	r23, Z+
    16ac:	af 01       	movw	r20, r30
    16ae:	80 91 21 23 	lds	r24, 0x2321	; 0x802321 <__iob+0x2>
    16b2:	90 91 22 23 	lds	r25, 0x2322	; 0x802322 <__iob+0x3>
    16b6:	0e 94 90 0b 	call	0x1720	; 0x1720 <vfprintf>
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <puts>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	e0 91 21 23 	lds	r30, 0x2321	; 0x802321 <__iob+0x2>
    16cc:	f0 91 22 23 	lds	r31, 0x2322	; 0x802322 <__iob+0x3>
    16d0:	23 81       	ldd	r18, Z+3	; 0x03
    16d2:	21 ff       	sbrs	r18, 1
    16d4:	1b c0       	rjmp	.+54     	; 0x170c <puts+0x4c>
    16d6:	8c 01       	movw	r16, r24
    16d8:	d0 e0       	ldi	r29, 0x00	; 0
    16da:	c0 e0       	ldi	r28, 0x00	; 0
    16dc:	f8 01       	movw	r30, r16
    16de:	81 91       	ld	r24, Z+
    16e0:	8f 01       	movw	r16, r30
    16e2:	60 91 21 23 	lds	r22, 0x2321	; 0x802321 <__iob+0x2>
    16e6:	70 91 22 23 	lds	r23, 0x2322	; 0x802322 <__iob+0x3>
    16ea:	db 01       	movw	r26, r22
    16ec:	18 96       	adiw	r26, 0x08	; 8
    16ee:	ed 91       	ld	r30, X+
    16f0:	fc 91       	ld	r31, X
    16f2:	19 97       	sbiw	r26, 0x09	; 9
    16f4:	88 23       	and	r24, r24
    16f6:	31 f0       	breq	.+12     	; 0x1704 <puts+0x44>
    16f8:	19 95       	eicall
    16fa:	89 2b       	or	r24, r25
    16fc:	79 f3       	breq	.-34     	; 0x16dc <puts+0x1c>
    16fe:	df ef       	ldi	r29, 0xFF	; 255
    1700:	cf ef       	ldi	r28, 0xFF	; 255
    1702:	ec cf       	rjmp	.-40     	; 0x16dc <puts+0x1c>
    1704:	8a e0       	ldi	r24, 0x0A	; 10
    1706:	19 95       	eicall
    1708:	89 2b       	or	r24, r25
    170a:	19 f0       	breq	.+6      	; 0x1712 <puts+0x52>
    170c:	8f ef       	ldi	r24, 0xFF	; 255
    170e:	9f ef       	ldi	r25, 0xFF	; 255
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <puts+0x56>
    1712:	8d 2f       	mov	r24, r29
    1714:	9c 2f       	mov	r25, r28
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <vfprintf>:
    1720:	2f 92       	push	r2
    1722:	3f 92       	push	r3
    1724:	4f 92       	push	r4
    1726:	5f 92       	push	r5
    1728:	6f 92       	push	r6
    172a:	7f 92       	push	r7
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	cf 93       	push	r28
    1742:	df 93       	push	r29
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2b 97       	sbiw	r28, 0x0b	; 11
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	6c 01       	movw	r12, r24
    1750:	7b 01       	movw	r14, r22
    1752:	8a 01       	movw	r16, r20
    1754:	fc 01       	movw	r30, r24
    1756:	16 82       	std	Z+6, r1	; 0x06
    1758:	17 82       	std	Z+7, r1	; 0x07
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	81 ff       	sbrs	r24, 1
    175e:	cc c1       	rjmp	.+920    	; 0x1af8 <vfprintf+0x3d8>
    1760:	ce 01       	movw	r24, r28
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	3c 01       	movw	r6, r24
    1766:	f6 01       	movw	r30, r12
    1768:	93 81       	ldd	r25, Z+3	; 0x03
    176a:	f7 01       	movw	r30, r14
    176c:	93 fd       	sbrc	r25, 3
    176e:	85 91       	lpm	r24, Z+
    1770:	93 ff       	sbrs	r25, 3
    1772:	81 91       	ld	r24, Z+
    1774:	7f 01       	movw	r14, r30
    1776:	88 23       	and	r24, r24
    1778:	09 f4       	brne	.+2      	; 0x177c <vfprintf+0x5c>
    177a:	ba c1       	rjmp	.+884    	; 0x1af0 <vfprintf+0x3d0>
    177c:	85 32       	cpi	r24, 0x25	; 37
    177e:	39 f4       	brne	.+14     	; 0x178e <vfprintf+0x6e>
    1780:	93 fd       	sbrc	r25, 3
    1782:	85 91       	lpm	r24, Z+
    1784:	93 ff       	sbrs	r25, 3
    1786:	81 91       	ld	r24, Z+
    1788:	7f 01       	movw	r14, r30
    178a:	85 32       	cpi	r24, 0x25	; 37
    178c:	29 f4       	brne	.+10     	; 0x1798 <vfprintf+0x78>
    178e:	b6 01       	movw	r22, r12
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1796:	e7 cf       	rjmp	.-50     	; 0x1766 <vfprintf+0x46>
    1798:	91 2c       	mov	r9, r1
    179a:	21 2c       	mov	r2, r1
    179c:	31 2c       	mov	r3, r1
    179e:	ff e1       	ldi	r31, 0x1F	; 31
    17a0:	f3 15       	cp	r31, r3
    17a2:	d8 f0       	brcs	.+54     	; 0x17da <vfprintf+0xba>
    17a4:	8b 32       	cpi	r24, 0x2B	; 43
    17a6:	79 f0       	breq	.+30     	; 0x17c6 <vfprintf+0xa6>
    17a8:	38 f4       	brcc	.+14     	; 0x17b8 <vfprintf+0x98>
    17aa:	80 32       	cpi	r24, 0x20	; 32
    17ac:	79 f0       	breq	.+30     	; 0x17cc <vfprintf+0xac>
    17ae:	83 32       	cpi	r24, 0x23	; 35
    17b0:	a1 f4       	brne	.+40     	; 0x17da <vfprintf+0xba>
    17b2:	23 2d       	mov	r18, r3
    17b4:	20 61       	ori	r18, 0x10	; 16
    17b6:	1d c0       	rjmp	.+58     	; 0x17f2 <vfprintf+0xd2>
    17b8:	8d 32       	cpi	r24, 0x2D	; 45
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <vfprintf+0xb4>
    17bc:	80 33       	cpi	r24, 0x30	; 48
    17be:	69 f4       	brne	.+26     	; 0x17da <vfprintf+0xba>
    17c0:	23 2d       	mov	r18, r3
    17c2:	21 60       	ori	r18, 0x01	; 1
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <vfprintf+0xd2>
    17c6:	83 2d       	mov	r24, r3
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	38 2e       	mov	r3, r24
    17cc:	e3 2d       	mov	r30, r3
    17ce:	e4 60       	ori	r30, 0x04	; 4
    17d0:	3e 2e       	mov	r3, r30
    17d2:	2a c0       	rjmp	.+84     	; 0x1828 <vfprintf+0x108>
    17d4:	f3 2d       	mov	r31, r3
    17d6:	f8 60       	ori	r31, 0x08	; 8
    17d8:	1d c0       	rjmp	.+58     	; 0x1814 <vfprintf+0xf4>
    17da:	37 fc       	sbrc	r3, 7
    17dc:	2d c0       	rjmp	.+90     	; 0x1838 <vfprintf+0x118>
    17de:	20 ed       	ldi	r18, 0xD0	; 208
    17e0:	28 0f       	add	r18, r24
    17e2:	2a 30       	cpi	r18, 0x0A	; 10
    17e4:	40 f0       	brcs	.+16     	; 0x17f6 <vfprintf+0xd6>
    17e6:	8e 32       	cpi	r24, 0x2E	; 46
    17e8:	b9 f4       	brne	.+46     	; 0x1818 <vfprintf+0xf8>
    17ea:	36 fc       	sbrc	r3, 6
    17ec:	81 c1       	rjmp	.+770    	; 0x1af0 <vfprintf+0x3d0>
    17ee:	23 2d       	mov	r18, r3
    17f0:	20 64       	ori	r18, 0x40	; 64
    17f2:	32 2e       	mov	r3, r18
    17f4:	19 c0       	rjmp	.+50     	; 0x1828 <vfprintf+0x108>
    17f6:	36 fe       	sbrs	r3, 6
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <vfprintf+0xe6>
    17fa:	8a e0       	ldi	r24, 0x0A	; 10
    17fc:	98 9e       	mul	r9, r24
    17fe:	20 0d       	add	r18, r0
    1800:	11 24       	eor	r1, r1
    1802:	92 2e       	mov	r9, r18
    1804:	11 c0       	rjmp	.+34     	; 0x1828 <vfprintf+0x108>
    1806:	ea e0       	ldi	r30, 0x0A	; 10
    1808:	2e 9e       	mul	r2, r30
    180a:	20 0d       	add	r18, r0
    180c:	11 24       	eor	r1, r1
    180e:	22 2e       	mov	r2, r18
    1810:	f3 2d       	mov	r31, r3
    1812:	f0 62       	ori	r31, 0x20	; 32
    1814:	3f 2e       	mov	r3, r31
    1816:	08 c0       	rjmp	.+16     	; 0x1828 <vfprintf+0x108>
    1818:	8c 36       	cpi	r24, 0x6C	; 108
    181a:	21 f4       	brne	.+8      	; 0x1824 <vfprintf+0x104>
    181c:	83 2d       	mov	r24, r3
    181e:	80 68       	ori	r24, 0x80	; 128
    1820:	38 2e       	mov	r3, r24
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x108>
    1824:	88 36       	cpi	r24, 0x68	; 104
    1826:	41 f4       	brne	.+16     	; 0x1838 <vfprintf+0x118>
    1828:	f7 01       	movw	r30, r14
    182a:	93 fd       	sbrc	r25, 3
    182c:	85 91       	lpm	r24, Z+
    182e:	93 ff       	sbrs	r25, 3
    1830:	81 91       	ld	r24, Z+
    1832:	7f 01       	movw	r14, r30
    1834:	81 11       	cpse	r24, r1
    1836:	b3 cf       	rjmp	.-154    	; 0x179e <vfprintf+0x7e>
    1838:	98 2f       	mov	r25, r24
    183a:	9f 7d       	andi	r25, 0xDF	; 223
    183c:	95 54       	subi	r25, 0x45	; 69
    183e:	93 30       	cpi	r25, 0x03	; 3
    1840:	28 f4       	brcc	.+10     	; 0x184c <vfprintf+0x12c>
    1842:	0c 5f       	subi	r16, 0xFC	; 252
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	9f e3       	ldi	r25, 0x3F	; 63
    1848:	99 83       	std	Y+1, r25	; 0x01
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <vfprintf+0x146>
    184c:	83 36       	cpi	r24, 0x63	; 99
    184e:	31 f0       	breq	.+12     	; 0x185c <vfprintf+0x13c>
    1850:	83 37       	cpi	r24, 0x73	; 115
    1852:	71 f0       	breq	.+28     	; 0x1870 <vfprintf+0x150>
    1854:	83 35       	cpi	r24, 0x53	; 83
    1856:	09 f0       	breq	.+2      	; 0x185a <vfprintf+0x13a>
    1858:	59 c0       	rjmp	.+178    	; 0x190c <vfprintf+0x1ec>
    185a:	21 c0       	rjmp	.+66     	; 0x189e <vfprintf+0x17e>
    185c:	f8 01       	movw	r30, r16
    185e:	80 81       	ld	r24, Z
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	0e 5f       	subi	r16, 0xFE	; 254
    1864:	1f 4f       	sbci	r17, 0xFF	; 255
    1866:	88 24       	eor	r8, r8
    1868:	83 94       	inc	r8
    186a:	91 2c       	mov	r9, r1
    186c:	53 01       	movw	r10, r6
    186e:	13 c0       	rjmp	.+38     	; 0x1896 <vfprintf+0x176>
    1870:	28 01       	movw	r4, r16
    1872:	f2 e0       	ldi	r31, 0x02	; 2
    1874:	4f 0e       	add	r4, r31
    1876:	51 1c       	adc	r5, r1
    1878:	f8 01       	movw	r30, r16
    187a:	a0 80       	ld	r10, Z
    187c:	b1 80       	ldd	r11, Z+1	; 0x01
    187e:	36 fe       	sbrs	r3, 6
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x168>
    1882:	69 2d       	mov	r22, r9
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x16c>
    1888:	6f ef       	ldi	r22, 0xFF	; 255
    188a:	7f ef       	ldi	r23, 0xFF	; 255
    188c:	c5 01       	movw	r24, r10
    188e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <strnlen>
    1892:	4c 01       	movw	r8, r24
    1894:	82 01       	movw	r16, r4
    1896:	f3 2d       	mov	r31, r3
    1898:	ff 77       	andi	r31, 0x7F	; 127
    189a:	3f 2e       	mov	r3, r31
    189c:	16 c0       	rjmp	.+44     	; 0x18ca <vfprintf+0x1aa>
    189e:	28 01       	movw	r4, r16
    18a0:	22 e0       	ldi	r18, 0x02	; 2
    18a2:	42 0e       	add	r4, r18
    18a4:	51 1c       	adc	r5, r1
    18a6:	f8 01       	movw	r30, r16
    18a8:	a0 80       	ld	r10, Z
    18aa:	b1 80       	ldd	r11, Z+1	; 0x01
    18ac:	36 fe       	sbrs	r3, 6
    18ae:	03 c0       	rjmp	.+6      	; 0x18b6 <vfprintf+0x196>
    18b0:	69 2d       	mov	r22, r9
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x19a>
    18b6:	6f ef       	ldi	r22, 0xFF	; 255
    18b8:	7f ef       	ldi	r23, 0xFF	; 255
    18ba:	c5 01       	movw	r24, r10
    18bc:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <strnlen_P>
    18c0:	4c 01       	movw	r8, r24
    18c2:	f3 2d       	mov	r31, r3
    18c4:	f0 68       	ori	r31, 0x80	; 128
    18c6:	3f 2e       	mov	r3, r31
    18c8:	82 01       	movw	r16, r4
    18ca:	33 fc       	sbrc	r3, 3
    18cc:	1b c0       	rjmp	.+54     	; 0x1904 <vfprintf+0x1e4>
    18ce:	82 2d       	mov	r24, r2
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	88 16       	cp	r8, r24
    18d4:	99 06       	cpc	r9, r25
    18d6:	b0 f4       	brcc	.+44     	; 0x1904 <vfprintf+0x1e4>
    18d8:	b6 01       	movw	r22, r12
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    18e2:	2a 94       	dec	r2
    18e4:	f4 cf       	rjmp	.-24     	; 0x18ce <vfprintf+0x1ae>
    18e6:	f5 01       	movw	r30, r10
    18e8:	37 fc       	sbrc	r3, 7
    18ea:	85 91       	lpm	r24, Z+
    18ec:	37 fe       	sbrs	r3, 7
    18ee:	81 91       	ld	r24, Z+
    18f0:	5f 01       	movw	r10, r30
    18f2:	b6 01       	movw	r22, r12
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    18fa:	21 10       	cpse	r2, r1
    18fc:	2a 94       	dec	r2
    18fe:	21 e0       	ldi	r18, 0x01	; 1
    1900:	82 1a       	sub	r8, r18
    1902:	91 08       	sbc	r9, r1
    1904:	81 14       	cp	r8, r1
    1906:	91 04       	cpc	r9, r1
    1908:	71 f7       	brne	.-36     	; 0x18e6 <vfprintf+0x1c6>
    190a:	e8 c0       	rjmp	.+464    	; 0x1adc <vfprintf+0x3bc>
    190c:	84 36       	cpi	r24, 0x64	; 100
    190e:	11 f0       	breq	.+4      	; 0x1914 <vfprintf+0x1f4>
    1910:	89 36       	cpi	r24, 0x69	; 105
    1912:	41 f5       	brne	.+80     	; 0x1964 <vfprintf+0x244>
    1914:	f8 01       	movw	r30, r16
    1916:	37 fe       	sbrs	r3, 7
    1918:	07 c0       	rjmp	.+14     	; 0x1928 <vfprintf+0x208>
    191a:	60 81       	ld	r22, Z
    191c:	71 81       	ldd	r23, Z+1	; 0x01
    191e:	82 81       	ldd	r24, Z+2	; 0x02
    1920:	93 81       	ldd	r25, Z+3	; 0x03
    1922:	0c 5f       	subi	r16, 0xFC	; 252
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <vfprintf+0x218>
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	07 2e       	mov	r0, r23
    192e:	00 0c       	add	r0, r0
    1930:	88 0b       	sbc	r24, r24
    1932:	99 0b       	sbc	r25, r25
    1934:	0e 5f       	subi	r16, 0xFE	; 254
    1936:	1f 4f       	sbci	r17, 0xFF	; 255
    1938:	f3 2d       	mov	r31, r3
    193a:	ff 76       	andi	r31, 0x6F	; 111
    193c:	3f 2e       	mov	r3, r31
    193e:	97 ff       	sbrs	r25, 7
    1940:	09 c0       	rjmp	.+18     	; 0x1954 <vfprintf+0x234>
    1942:	90 95       	com	r25
    1944:	80 95       	com	r24
    1946:	70 95       	com	r23
    1948:	61 95       	neg	r22
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	f0 68       	ori	r31, 0x80	; 128
    1952:	3f 2e       	mov	r3, r31
    1954:	2a e0       	ldi	r18, 0x0A	; 10
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	a3 01       	movw	r20, r6
    195a:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__ultoa_invert>
    195e:	88 2e       	mov	r8, r24
    1960:	86 18       	sub	r8, r6
    1962:	45 c0       	rjmp	.+138    	; 0x19ee <vfprintf+0x2ce>
    1964:	85 37       	cpi	r24, 0x75	; 117
    1966:	31 f4       	brne	.+12     	; 0x1974 <vfprintf+0x254>
    1968:	23 2d       	mov	r18, r3
    196a:	2f 7e       	andi	r18, 0xEF	; 239
    196c:	b2 2e       	mov	r11, r18
    196e:	2a e0       	ldi	r18, 0x0A	; 10
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	25 c0       	rjmp	.+74     	; 0x19be <vfprintf+0x29e>
    1974:	93 2d       	mov	r25, r3
    1976:	99 7f       	andi	r25, 0xF9	; 249
    1978:	b9 2e       	mov	r11, r25
    197a:	8f 36       	cpi	r24, 0x6F	; 111
    197c:	c1 f0       	breq	.+48     	; 0x19ae <vfprintf+0x28e>
    197e:	18 f4       	brcc	.+6      	; 0x1986 <vfprintf+0x266>
    1980:	88 35       	cpi	r24, 0x58	; 88
    1982:	79 f0       	breq	.+30     	; 0x19a2 <vfprintf+0x282>
    1984:	b5 c0       	rjmp	.+362    	; 0x1af0 <vfprintf+0x3d0>
    1986:	80 37       	cpi	r24, 0x70	; 112
    1988:	19 f0       	breq	.+6      	; 0x1990 <vfprintf+0x270>
    198a:	88 37       	cpi	r24, 0x78	; 120
    198c:	21 f0       	breq	.+8      	; 0x1996 <vfprintf+0x276>
    198e:	b0 c0       	rjmp	.+352    	; 0x1af0 <vfprintf+0x3d0>
    1990:	e9 2f       	mov	r30, r25
    1992:	e0 61       	ori	r30, 0x10	; 16
    1994:	be 2e       	mov	r11, r30
    1996:	b4 fe       	sbrs	r11, 4
    1998:	0d c0       	rjmp	.+26     	; 0x19b4 <vfprintf+0x294>
    199a:	fb 2d       	mov	r31, r11
    199c:	f4 60       	ori	r31, 0x04	; 4
    199e:	bf 2e       	mov	r11, r31
    19a0:	09 c0       	rjmp	.+18     	; 0x19b4 <vfprintf+0x294>
    19a2:	34 fe       	sbrs	r3, 4
    19a4:	0a c0       	rjmp	.+20     	; 0x19ba <vfprintf+0x29a>
    19a6:	29 2f       	mov	r18, r25
    19a8:	26 60       	ori	r18, 0x06	; 6
    19aa:	b2 2e       	mov	r11, r18
    19ac:	06 c0       	rjmp	.+12     	; 0x19ba <vfprintf+0x29a>
    19ae:	28 e0       	ldi	r18, 0x08	; 8
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	05 c0       	rjmp	.+10     	; 0x19be <vfprintf+0x29e>
    19b4:	20 e1       	ldi	r18, 0x10	; 16
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vfprintf+0x29e>
    19ba:	20 e1       	ldi	r18, 0x10	; 16
    19bc:	32 e0       	ldi	r19, 0x02	; 2
    19be:	f8 01       	movw	r30, r16
    19c0:	b7 fe       	sbrs	r11, 7
    19c2:	07 c0       	rjmp	.+14     	; 0x19d2 <vfprintf+0x2b2>
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	0c 5f       	subi	r16, 0xFC	; 252
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <vfprintf+0x2be>
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 5f       	subi	r16, 0xFE	; 254
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	a3 01       	movw	r20, r6
    19e0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__ultoa_invert>
    19e4:	88 2e       	mov	r8, r24
    19e6:	86 18       	sub	r8, r6
    19e8:	fb 2d       	mov	r31, r11
    19ea:	ff 77       	andi	r31, 0x7F	; 127
    19ec:	3f 2e       	mov	r3, r31
    19ee:	36 fe       	sbrs	r3, 6
    19f0:	0d c0       	rjmp	.+26     	; 0x1a0c <vfprintf+0x2ec>
    19f2:	23 2d       	mov	r18, r3
    19f4:	2e 7f       	andi	r18, 0xFE	; 254
    19f6:	a2 2e       	mov	r10, r18
    19f8:	89 14       	cp	r8, r9
    19fa:	58 f4       	brcc	.+22     	; 0x1a12 <vfprintf+0x2f2>
    19fc:	34 fe       	sbrs	r3, 4
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <vfprintf+0x2f6>
    1a00:	32 fc       	sbrc	r3, 2
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <vfprintf+0x2f6>
    1a04:	83 2d       	mov	r24, r3
    1a06:	8e 7e       	andi	r24, 0xEE	; 238
    1a08:	a8 2e       	mov	r10, r24
    1a0a:	05 c0       	rjmp	.+10     	; 0x1a16 <vfprintf+0x2f6>
    1a0c:	b8 2c       	mov	r11, r8
    1a0e:	a3 2c       	mov	r10, r3
    1a10:	03 c0       	rjmp	.+6      	; 0x1a18 <vfprintf+0x2f8>
    1a12:	b8 2c       	mov	r11, r8
    1a14:	01 c0       	rjmp	.+2      	; 0x1a18 <vfprintf+0x2f8>
    1a16:	b9 2c       	mov	r11, r9
    1a18:	a4 fe       	sbrs	r10, 4
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <vfprintf+0x31a>
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e8 0d       	add	r30, r8
    1a20:	f1 1d       	adc	r31, r1
    1a22:	80 81       	ld	r24, Z
    1a24:	80 33       	cpi	r24, 0x30	; 48
    1a26:	21 f4       	brne	.+8      	; 0x1a30 <vfprintf+0x310>
    1a28:	9a 2d       	mov	r25, r10
    1a2a:	99 7e       	andi	r25, 0xE9	; 233
    1a2c:	a9 2e       	mov	r10, r25
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x322>
    1a30:	a2 fe       	sbrs	r10, 2
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <vfprintf+0x320>
    1a34:	b3 94       	inc	r11
    1a36:	b3 94       	inc	r11
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <vfprintf+0x322>
    1a3a:	8a 2d       	mov	r24, r10
    1a3c:	86 78       	andi	r24, 0x86	; 134
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <vfprintf+0x322>
    1a40:	b3 94       	inc	r11
    1a42:	a3 fc       	sbrc	r10, 3
    1a44:	11 c0       	rjmp	.+34     	; 0x1a68 <vfprintf+0x348>
    1a46:	a0 fe       	sbrs	r10, 0
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <vfprintf+0x336>
    1a4a:	b2 14       	cp	r11, r2
    1a4c:	88 f4       	brcc	.+34     	; 0x1a70 <vfprintf+0x350>
    1a4e:	28 0c       	add	r2, r8
    1a50:	92 2c       	mov	r9, r2
    1a52:	9b 18       	sub	r9, r11
    1a54:	0e c0       	rjmp	.+28     	; 0x1a72 <vfprintf+0x352>
    1a56:	b2 14       	cp	r11, r2
    1a58:	60 f4       	brcc	.+24     	; 0x1a72 <vfprintf+0x352>
    1a5a:	b6 01       	movw	r22, r12
    1a5c:	80 e2       	ldi	r24, 0x20	; 32
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1a64:	b3 94       	inc	r11
    1a66:	f7 cf       	rjmp	.-18     	; 0x1a56 <vfprintf+0x336>
    1a68:	b2 14       	cp	r11, r2
    1a6a:	18 f4       	brcc	.+6      	; 0x1a72 <vfprintf+0x352>
    1a6c:	2b 18       	sub	r2, r11
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <vfprintf+0x354>
    1a70:	98 2c       	mov	r9, r8
    1a72:	21 2c       	mov	r2, r1
    1a74:	a4 fe       	sbrs	r10, 4
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <vfprintf+0x378>
    1a78:	b6 01       	movw	r22, r12
    1a7a:	80 e3       	ldi	r24, 0x30	; 48
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1a82:	a2 fe       	sbrs	r10, 2
    1a84:	17 c0       	rjmp	.+46     	; 0x1ab4 <vfprintf+0x394>
    1a86:	a1 fc       	sbrc	r10, 1
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <vfprintf+0x370>
    1a8a:	88 e7       	ldi	r24, 0x78	; 120
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <vfprintf+0x374>
    1a90:	88 e5       	ldi	r24, 0x58	; 88
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	b6 01       	movw	r22, r12
    1a96:	0c c0       	rjmp	.+24     	; 0x1ab0 <vfprintf+0x390>
    1a98:	8a 2d       	mov	r24, r10
    1a9a:	86 78       	andi	r24, 0x86	; 134
    1a9c:	59 f0       	breq	.+22     	; 0x1ab4 <vfprintf+0x394>
    1a9e:	a1 fe       	sbrs	r10, 1
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <vfprintf+0x386>
    1aa2:	8b e2       	ldi	r24, 0x2B	; 43
    1aa4:	01 c0       	rjmp	.+2      	; 0x1aa8 <vfprintf+0x388>
    1aa6:	80 e2       	ldi	r24, 0x20	; 32
    1aa8:	a7 fc       	sbrc	r10, 7
    1aaa:	8d e2       	ldi	r24, 0x2D	; 45
    1aac:	b6 01       	movw	r22, r12
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1ab4:	89 14       	cp	r8, r9
    1ab6:	38 f4       	brcc	.+14     	; 0x1ac6 <vfprintf+0x3a6>
    1ab8:	b6 01       	movw	r22, r12
    1aba:	80 e3       	ldi	r24, 0x30	; 48
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1ac2:	9a 94       	dec	r9
    1ac4:	f7 cf       	rjmp	.-18     	; 0x1ab4 <vfprintf+0x394>
    1ac6:	8a 94       	dec	r8
    1ac8:	f3 01       	movw	r30, r6
    1aca:	e8 0d       	add	r30, r8
    1acc:	f1 1d       	adc	r31, r1
    1ace:	80 81       	ld	r24, Z
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1ad8:	81 10       	cpse	r8, r1
    1ada:	f5 cf       	rjmp	.-22     	; 0x1ac6 <vfprintf+0x3a6>
    1adc:	22 20       	and	r2, r2
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <vfprintf+0x3c2>
    1ae0:	42 ce       	rjmp	.-892    	; 0x1766 <vfprintf+0x46>
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	80 e2       	ldi	r24, 0x20	; 32
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <fputc>
    1aec:	2a 94       	dec	r2
    1aee:	f6 cf       	rjmp	.-20     	; 0x1adc <vfprintf+0x3bc>
    1af0:	f6 01       	movw	r30, r12
    1af2:	86 81       	ldd	r24, Z+6	; 0x06
    1af4:	97 81       	ldd	r25, Z+7	; 0x07
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <vfprintf+0x3dc>
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	2b 96       	adiw	r28, 0x0b	; 11
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	df 91       	pop	r29
    1b04:	cf 91       	pop	r28
    1b06:	1f 91       	pop	r17
    1b08:	0f 91       	pop	r16
    1b0a:	ff 90       	pop	r15
    1b0c:	ef 90       	pop	r14
    1b0e:	df 90       	pop	r13
    1b10:	cf 90       	pop	r12
    1b12:	bf 90       	pop	r11
    1b14:	af 90       	pop	r10
    1b16:	9f 90       	pop	r9
    1b18:	8f 90       	pop	r8
    1b1a:	7f 90       	pop	r7
    1b1c:	6f 90       	pop	r6
    1b1e:	5f 90       	pop	r5
    1b20:	4f 90       	pop	r4
    1b22:	3f 90       	pop	r3
    1b24:	2f 90       	pop	r2
    1b26:	08 95       	ret

00001b28 <strnlen_P>:
    1b28:	fc 01       	movw	r30, r24
    1b2a:	05 90       	lpm	r0, Z+
    1b2c:	61 50       	subi	r22, 0x01	; 1
    1b2e:	70 40       	sbci	r23, 0x00	; 0
    1b30:	01 10       	cpse	r0, r1
    1b32:	d8 f7       	brcc	.-10     	; 0x1b2a <strnlen_P+0x2>
    1b34:	80 95       	com	r24
    1b36:	90 95       	com	r25
    1b38:	8e 0f       	add	r24, r30
    1b3a:	9f 1f       	adc	r25, r31
    1b3c:	08 95       	ret

00001b3e <strnlen>:
    1b3e:	fc 01       	movw	r30, r24
    1b40:	61 50       	subi	r22, 0x01	; 1
    1b42:	70 40       	sbci	r23, 0x00	; 0
    1b44:	01 90       	ld	r0, Z+
    1b46:	01 10       	cpse	r0, r1
    1b48:	d8 f7       	brcc	.-10     	; 0x1b40 <strnlen+0x2>
    1b4a:	80 95       	com	r24
    1b4c:	90 95       	com	r25
    1b4e:	8e 0f       	add	r24, r30
    1b50:	9f 1f       	adc	r25, r31
    1b52:	08 95       	ret

00001b54 <fputc>:
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	fb 01       	movw	r30, r22
    1b5e:	23 81       	ldd	r18, Z+3	; 0x03
    1b60:	21 fd       	sbrc	r18, 1
    1b62:	03 c0       	rjmp	.+6      	; 0x1b6a <fputc+0x16>
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	9f ef       	ldi	r25, 0xFF	; 255
    1b68:	2c c0       	rjmp	.+88     	; 0x1bc2 <fputc+0x6e>
    1b6a:	22 ff       	sbrs	r18, 2
    1b6c:	16 c0       	rjmp	.+44     	; 0x1b9a <fputc+0x46>
    1b6e:	46 81       	ldd	r20, Z+6	; 0x06
    1b70:	57 81       	ldd	r21, Z+7	; 0x07
    1b72:	24 81       	ldd	r18, Z+4	; 0x04
    1b74:	35 81       	ldd	r19, Z+5	; 0x05
    1b76:	42 17       	cp	r20, r18
    1b78:	53 07       	cpc	r21, r19
    1b7a:	44 f4       	brge	.+16     	; 0x1b8c <fputc+0x38>
    1b7c:	a0 81       	ld	r26, Z
    1b7e:	b1 81       	ldd	r27, Z+1	; 0x01
    1b80:	9d 01       	movw	r18, r26
    1b82:	2f 5f       	subi	r18, 0xFF	; 255
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	20 83       	st	Z, r18
    1b88:	31 83       	std	Z+1, r19	; 0x01
    1b8a:	8c 93       	st	X, r24
    1b8c:	26 81       	ldd	r18, Z+6	; 0x06
    1b8e:	37 81       	ldd	r19, Z+7	; 0x07
    1b90:	2f 5f       	subi	r18, 0xFF	; 255
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
    1b94:	26 83       	std	Z+6, r18	; 0x06
    1b96:	37 83       	std	Z+7, r19	; 0x07
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <fputc+0x6e>
    1b9a:	8b 01       	movw	r16, r22
    1b9c:	ec 01       	movw	r28, r24
    1b9e:	fb 01       	movw	r30, r22
    1ba0:	00 84       	ldd	r0, Z+8	; 0x08
    1ba2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	19 95       	eicall
    1ba8:	89 2b       	or	r24, r25
    1baa:	e1 f6       	brne	.-72     	; 0x1b64 <fputc+0x10>
    1bac:	d8 01       	movw	r26, r16
    1bae:	16 96       	adiw	r26, 0x06	; 6
    1bb0:	8d 91       	ld	r24, X+
    1bb2:	9c 91       	ld	r25, X
    1bb4:	17 97       	sbiw	r26, 0x07	; 7
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	16 96       	adiw	r26, 0x06	; 6
    1bba:	8d 93       	st	X+, r24
    1bbc:	9c 93       	st	X, r25
    1bbe:	17 97       	sbiw	r26, 0x07	; 7
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	df 91       	pop	r29
    1bc4:	cf 91       	pop	r28
    1bc6:	1f 91       	pop	r17
    1bc8:	0f 91       	pop	r16
    1bca:	08 95       	ret

00001bcc <__ultoa_invert>:
    1bcc:	fa 01       	movw	r30, r20
    1bce:	aa 27       	eor	r26, r26
    1bd0:	28 30       	cpi	r18, 0x08	; 8
    1bd2:	51 f1       	breq	.+84     	; 0x1c28 <__ultoa_invert+0x5c>
    1bd4:	20 31       	cpi	r18, 0x10	; 16
    1bd6:	81 f1       	breq	.+96     	; 0x1c38 <__ultoa_invert+0x6c>
    1bd8:	e8 94       	clt
    1bda:	6f 93       	push	r22
    1bdc:	6e 7f       	andi	r22, 0xFE	; 254
    1bde:	6e 5f       	subi	r22, 0xFE	; 254
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	8f 4f       	sbci	r24, 0xFF	; 255
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	af 4f       	sbci	r26, 0xFF	; 255
    1be8:	b1 e0       	ldi	r27, 0x01	; 1
    1bea:	3e d0       	rcall	.+124    	; 0x1c68 <__ultoa_invert+0x9c>
    1bec:	b4 e0       	ldi	r27, 0x04	; 4
    1bee:	3c d0       	rcall	.+120    	; 0x1c68 <__ultoa_invert+0x9c>
    1bf0:	67 0f       	add	r22, r23
    1bf2:	78 1f       	adc	r23, r24
    1bf4:	89 1f       	adc	r24, r25
    1bf6:	9a 1f       	adc	r25, r26
    1bf8:	a1 1d       	adc	r26, r1
    1bfa:	68 0f       	add	r22, r24
    1bfc:	79 1f       	adc	r23, r25
    1bfe:	8a 1f       	adc	r24, r26
    1c00:	91 1d       	adc	r25, r1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	6a 0f       	add	r22, r26
    1c06:	71 1d       	adc	r23, r1
    1c08:	81 1d       	adc	r24, r1
    1c0a:	91 1d       	adc	r25, r1
    1c0c:	a1 1d       	adc	r26, r1
    1c0e:	20 d0       	rcall	.+64     	; 0x1c50 <__ultoa_invert+0x84>
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <__ultoa_invert+0x48>
    1c12:	68 94       	set
    1c14:	3f 91       	pop	r19
    1c16:	2a e0       	ldi	r18, 0x0A	; 10
    1c18:	26 9f       	mul	r18, r22
    1c1a:	11 24       	eor	r1, r1
    1c1c:	30 19       	sub	r19, r0
    1c1e:	30 5d       	subi	r19, 0xD0	; 208
    1c20:	31 93       	st	Z+, r19
    1c22:	de f6       	brtc	.-74     	; 0x1bda <__ultoa_invert+0xe>
    1c24:	cf 01       	movw	r24, r30
    1c26:	08 95       	ret
    1c28:	46 2f       	mov	r20, r22
    1c2a:	47 70       	andi	r20, 0x07	; 7
    1c2c:	40 5d       	subi	r20, 0xD0	; 208
    1c2e:	41 93       	st	Z+, r20
    1c30:	b3 e0       	ldi	r27, 0x03	; 3
    1c32:	0f d0       	rcall	.+30     	; 0x1c52 <__ultoa_invert+0x86>
    1c34:	c9 f7       	brne	.-14     	; 0x1c28 <__ultoa_invert+0x5c>
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <__ultoa_invert+0x58>
    1c38:	46 2f       	mov	r20, r22
    1c3a:	4f 70       	andi	r20, 0x0F	; 15
    1c3c:	40 5d       	subi	r20, 0xD0	; 208
    1c3e:	4a 33       	cpi	r20, 0x3A	; 58
    1c40:	18 f0       	brcs	.+6      	; 0x1c48 <__ultoa_invert+0x7c>
    1c42:	49 5d       	subi	r20, 0xD9	; 217
    1c44:	31 fd       	sbrc	r19, 1
    1c46:	40 52       	subi	r20, 0x20	; 32
    1c48:	41 93       	st	Z+, r20
    1c4a:	02 d0       	rcall	.+4      	; 0x1c50 <__ultoa_invert+0x84>
    1c4c:	a9 f7       	brne	.-22     	; 0x1c38 <__ultoa_invert+0x6c>
    1c4e:	ea cf       	rjmp	.-44     	; 0x1c24 <__ultoa_invert+0x58>
    1c50:	b4 e0       	ldi	r27, 0x04	; 4
    1c52:	a6 95       	lsr	r26
    1c54:	97 95       	ror	r25
    1c56:	87 95       	ror	r24
    1c58:	77 95       	ror	r23
    1c5a:	67 95       	ror	r22
    1c5c:	ba 95       	dec	r27
    1c5e:	c9 f7       	brne	.-14     	; 0x1c52 <__ultoa_invert+0x86>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	61 05       	cpc	r22, r1
    1c64:	71 05       	cpc	r23, r1
    1c66:	08 95       	ret
    1c68:	9b 01       	movw	r18, r22
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	0a 2e       	mov	r0, r26
    1c6e:	06 94       	lsr	r0
    1c70:	57 95       	ror	r21
    1c72:	47 95       	ror	r20
    1c74:	37 95       	ror	r19
    1c76:	27 95       	ror	r18
    1c78:	ba 95       	dec	r27
    1c7a:	c9 f7       	brne	.-14     	; 0x1c6e <__ultoa_invert+0xa2>
    1c7c:	62 0f       	add	r22, r18
    1c7e:	73 1f       	adc	r23, r19
    1c80:	84 1f       	adc	r24, r20
    1c82:	95 1f       	adc	r25, r21
    1c84:	a0 1d       	adc	r26, r0
    1c86:	08 95       	ret

00001c88 <_exit>:
    1c88:	f8 94       	cli

00001c8a <__stop_program>:
    1c8a:	ff cf       	rjmp	.-2      	; 0x1c8a <__stop_program>
