
20180702 - 2 Slave 1 Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002128  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ba  00802000  00002128  000021bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b7  008020ba  008020ba  00002276  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002276  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000370  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000085fa  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000400e  00000000  00000000  0000ac7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002076  00000000  00000000  0000ec8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b74  00000000  00000000  00010d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003f08  00000000  00000000  00011878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032df  00000000  00000000  00015780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000348  00000000  00000000  00018a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_119>
     1e0:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <uart_fgetc>
     200:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <uart_fputc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	e8 e2       	ldi	r30, 0x28	; 40
     21c:	f1 e2       	ldi	r31, 0x21	; 33
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	aa 3b       	cpi	r26, 0xBA	; 186
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	23 e2       	ldi	r18, 0x23	; 35
     230:	aa eb       	ldi	r26, 0xBA	; 186
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	a1 37       	cpi	r26, 0x71	; 113
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 cf 02 	call	0x59e	; 0x59e <main>
     242:	0c 94 92 10 	jmp	0x2124	; 0x2124 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |
     24a:	e0 e5       	ldi	r30, 0x50	; 80
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	8b ec       	ldi	r24, 0xCB	; 203
     250:	82 83       	std	Z+2, r24	; 0x02
  OSC_XOSCSEL_XTAL_16KCLK_gc;
  OSC.CTRL |= OSC_XOSCEN_bm;
     252:	80 81       	ld	r24, Z
     254:	88 60       	ori	r24, 0x08	; 8
     256:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );
     258:	81 81       	ldd	r24, Z+1	; 0x01
     25a:	83 ff       	sbrs	r24, 3
     25c:	fd cf       	rjmp	.-6      	; 0x258 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc |
     25e:	e0 e5       	ldi	r30, 0x50	; 80
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	82 ec       	ldi	r24, 0xC2	; 194
     264:	85 83       	std	Z+5, r24	; 0x05
  (OSC_PLLFAC_gm & 2);
  OSC.CTRL |= OSC_PLLEN_bm;
     266:	80 81       	ld	r24, Z
     268:	80 61       	ori	r24, 0x10	; 16
     26a:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );
     26c:	81 81       	ldd	r24, Z+1	; 0x01
     26e:	84 ff       	sbrs	r24, 4
     270:	fd cf       	rjmp	.-6      	; 0x26c <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;
     272:	88 ed       	ldi	r24, 0xD8	; 216
     274:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     276:	84 e0       	ldi	r24, 0x04	; 4
     278:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;
     27c:	e0 e5       	ldi	r30, 0x50	; 80
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	8e 7f       	andi	r24, 0xFE	; 254
     284:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;
     286:	80 81       	ld	r24, Z
     288:	8d 7f       	andi	r24, 0xFD	; 253
     28a:	80 83       	st	Z, r24
     28c:	08 95       	ret

0000028e <__vector_104>:
		}
	}
}

ISR(PORTF_INT0_vect)
{
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	0b b6       	in	r0, 0x3b	; 59
     29a:	0f 92       	push	r0
     29c:	af 92       	push	r10
     29e:	bf 92       	push	r11
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <__vector_104+0x3c>
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
	uint8_t  tx, fail, rx;
	uint8_t  len;
	uint8_t  ipipe;

	nrfWhatHappened(&tx, &fail, &rx);
     2ce:	ae 01       	movw	r20, r28
     2d0:	4d 5f       	subi	r20, 0xFD	; 253
     2d2:	5f 4f       	sbci	r21, 0xFF	; 255
     2d4:	be 01       	movw	r22, r28
     2d6:	6e 5f       	subi	r22, 0xFE	; 254
     2d8:	7f 4f       	sbci	r23, 0xFF	; 255
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <nrfWhatHappened>
	
	if(rx){
     2e2:	8b 81       	ldd	r24, Y+3	; 0x03
     2e4:	88 23       	and	r24, r24
     2e6:	09 f4       	brne	.+2      	; 0x2ea <__vector_104+0x5c>
     2e8:	85 c0       	rjmp	.+266    	; 0x3f4 <__vector_104+0x166>
		len =  nrfGetDynamicPayloadSize();
     2ea:	0e 94 93 05 	call	0xb26	; 0xb26 <nrfGetDynamicPayloadSize>
     2ee:	08 2f       	mov	r16, r24
		
		nrfRead( packet, len );
     2f0:	68 2f       	mov	r22, r24
     2f2:	80 ec       	ldi	r24, 0xC0	; 192
     2f4:	90 e2       	ldi	r25, 0x20	; 32
     2f6:	0e 94 43 04 	call	0x886	; 0x886 <nrfRead>
		
		packet[len] = '\0';
     2fa:	c0 2e       	mov	r12, r16
     2fc:	d1 2c       	mov	r13, r1
     2fe:	f6 01       	movw	r30, r12
     300:	e0 54       	subi	r30, 0x40	; 64
     302:	ff 4d       	sbci	r31, 0xDF	; 223
     304:	10 82       	st	Z, r1
		
		char* sensor_id;
		char* command_id;
		char* command_data;
		
		int sensor_id_index = atoi(sensor_id[1]);
     306:	81 b1       	in	r24, 0x01	; 1
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <atoi>
		
		if(blacklist[sensor_id_index] == -1) return;
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	fc 01       	movw	r30, r24
     314:	e9 5f       	subi	r30, 0xF9	; 249
     316:	ff 4d       	sbci	r31, 0xDF	; 223
     318:	80 81       	ld	r24, Z
     31a:	91 81       	ldd	r25, Z+1	; 0x01
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	09 f4       	brne	.+2      	; 0x322 <__vector_104+0x94>
     320:	77 c0       	rjmp	.+238    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		
		printf("%s\n", packet);
     322:	80 ec       	ldi	r24, 0xC0	; 192
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		
		sensor_id = (char*)malloc(2+1);
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 03 0c 	call	0x1806	; 0x1806 <malloc>
     332:	5c 01       	movw	r10, r24
		memcpy(sensor_id,packet,2);
     334:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <packet>
     338:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <packet+0x1>
     33c:	f5 01       	movw	r30, r10
     33e:	80 83       	st	Z, r24
     340:	91 83       	std	Z+1, r25	; 0x01
		sensor_id[2] = 0;
     342:	12 82       	std	Z+2, r1	; 0x02
		
		command_id = (char*)malloc(2+1);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 03 0c 	call	0x1806	; 0x1806 <malloc>
     34c:	7c 01       	movw	r14, r24
		memcpy(command_id,packet+2,2);
     34e:	80 91 c2 20 	lds	r24, 0x20C2	; 0x8020c2 <packet+0x2>
     352:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <packet+0x3>
     356:	f7 01       	movw	r30, r14
     358:	80 83       	st	Z, r24
     35a:	91 83       	std	Z+1, r25	; 0x01
		command_id[2] = 0;
     35c:	12 82       	std	Z+2, r1	; 0x02
		
		command_data = (char*)malloc(len+1);
     35e:	c6 01       	movw	r24, r12
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	0e 94 03 0c 	call	0x1806	; 0x1806 <malloc>
     366:	6c 01       	movw	r12, r24
		memcpy(command_data,packet+4,len);
     368:	10 e0       	ldi	r17, 0x00	; 0
     36a:	a8 01       	movw	r20, r16
     36c:	64 ec       	ldi	r22, 0xC4	; 196
     36e:	70 e2       	ldi	r23, 0x20	; 32
     370:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <memcpy>
		command_data[len] = 0;
     374:	f6 01       	movw	r30, r12
     376:	e0 0f       	add	r30, r16
     378:	f1 1f       	adc	r31, r17
     37a:	10 82       	st	Z, r1
		
		printf("%s: command %s, data %s\n", sensor_id, command_id, command_data);
     37c:	df 92       	push	r13
     37e:	cf 92       	push	r12
     380:	ff 92       	push	r15
     382:	ef 92       	push	r14
     384:	bf 92       	push	r11
     386:	af 92       	push	r10
     388:	80 e3       	ldi	r24, 0x30	; 48
     38a:	90 e2       	ldi	r25, 0x20	; 32
     38c:	9f 93       	push	r25
     38e:	8f 93       	push	r24
     390:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <printf>
		
		if (strcmp(command_id, C_PRINT) == 0)
     394:	69 e4       	ldi	r22, 0x49	; 73
     396:	70 e2       	ldi	r23, 0x20	; 32
     398:	c7 01       	movw	r24, r14
     39a:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <strcmp>
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	89 2b       	or	r24, r25
     3a4:	19 f4       	brne	.+6      	; 0x3ac <__vector_104+0x11e>
		{
			printf("%s\n", command_data);
     3a6:	c6 01       	movw	r24, r12
     3a8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>
		}
		if (strcmp(command_id, C_BLAUW) == 0)
     3ac:	6c e4       	ldi	r22, 0x4C	; 76
     3ae:	70 e2       	ldi	r23, 0x20	; 32
     3b0:	c7 01       	movw	r24, r14
     3b2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <strcmp>
     3b6:	89 2b       	or	r24, r25
     3b8:	41 f4       	brne	.+16     	; 0x3ca <__vector_104+0x13c>
		{
			uint8_t low = atoi(command_data);
     3ba:	c6 01       	movw	r24, r12
     3bc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <atoi>
			TCC0.CCABUF  = low;
     3c0:	99 27       	eor	r25, r25
     3c2:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <__TEXT_REGION_LENGTH__+0x700838>
     3c6:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <__TEXT_REGION_LENGTH__+0x700839>
		}
		if (strcmp(command_id, C_ROOD) == 0)
     3ca:	6f e4       	ldi	r22, 0x4F	; 79
     3cc:	70 e2       	ldi	r23, 0x20	; 32
     3ce:	c7 01       	movw	r24, r14
     3d0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <strcmp>
     3d4:	89 2b       	or	r24, r25
     3d6:	41 f4       	brne	.+16     	; 0x3e8 <__vector_104+0x15a>
		{
			uint8_t low = atoi(command_data);
     3d8:	c6 01       	movw	r24, r12
     3da:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <atoi>
			TCF0.CCBBUF  = low;
     3de:	99 27       	eor	r25, r25
     3e0:	80 93 3a 0b 	sts	0x0B3A, r24	; 0x800b3a <__TEXT_REGION_LENGTH__+0x700b3a>
     3e4:	90 93 3b 0b 	sts	0x0B3B, r25	; 0x800b3b <__TEXT_REGION_LENGTH__+0x700b3b>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e8:	8f e3       	ldi	r24, 0x3F	; 63
     3ea:	9c e9       	ldi	r25, 0x9C	; 156
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <__vector_104+0x15e>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <__vector_104+0x164>
     3f2:	00 00       	nop
		}
		
		_delay_ms(5);
	}
	
	if (tx) {
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 23       	and	r24, r24
     3f8:	59 f0       	breq	.+22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		nrfStopListening();
     3fa:	0e 94 9d 04 	call	0x93a	; 0x93a <nrfStopListening>
     3fe:	ef e3       	ldi	r30, 0x3F	; 63
     400:	fc e9       	ldi	r31, 0x9C	; 156
     402:	31 97       	sbiw	r30, 0x01	; 1
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     408:	00 00       	nop
		_delay_ms(5);
		sending = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 06 20 	sts	0x2006, r24	; 0x802006 <sending>
	}
}
     410:	23 96       	adiw	r28, 0x03	; 3
     412:	cd bf       	out	0x3d, r28	; 61
     414:	de bf       	out	0x3e, r29	; 62
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	ff 91       	pop	r31
     41c:	ef 91       	pop	r30
     41e:	bf 91       	pop	r27
     420:	af 91       	pop	r26
     422:	9f 91       	pop	r25
     424:	8f 91       	pop	r24
     426:	7f 91       	pop	r23
     428:	6f 91       	pop	r22
     42a:	5f 91       	pop	r21
     42c:	4f 91       	pop	r20
     42e:	3f 91       	pop	r19
     430:	2f 91       	pop	r18
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	bf 90       	pop	r11
     440:	af 90       	pop	r10
     442:	0f 90       	pop	r0
     444:	0b be       	out	0x3b, r0	; 59
     446:	0f 90       	pop	r0
     448:	0f be       	out	0x3f, r0	; 63
     44a:	0f 90       	pop	r0
     44c:	1f 90       	pop	r1
     44e:	18 95       	reti

00000450 <init_pwm>:

void init_pwm(void)
{
	PORTC.OUTCLR = PIN0_bm;
     450:	a0 e4       	ldi	r26, 0x40	; 64
     452:	b6 e0       	ldi	r27, 0x06	; 6
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	16 96       	adiw	r26, 0x06	; 6
     458:	9c 93       	st	X, r25
     45a:	16 97       	sbiw	r26, 0x06	; 6
	PORTF.OUTCLR = PIN1_bm|PIN0_bm;
     45c:	e0 ea       	ldi	r30, 0xA0	; 160
     45e:	f6 e0       	ldi	r31, 0x06	; 6
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	86 83       	std	Z+6, r24	; 0x06
	PORTC.DIRSET = PIN0_bm;               // PC0 output (blue)
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	9c 93       	st	X, r25
	PORTF.DIRSET = PIN0_bm|PIN1_bm;       // PF0, PF1  output (green red)
     468:	81 83       	std	Z+1, r24	; 0x01

	TCC0.CTRLB   = TC0_CCAEN_bm | TC_WGMODE_SINGLESLOPE_gc;
     46a:	e0 e0       	ldi	r30, 0x00	; 0
     46c:	f8 e0       	ldi	r31, 0x08	; 8
     46e:	83 e1       	ldi	r24, 0x13	; 19
     470:	81 83       	std	Z+1, r24	; 0x01
	TCC0.CTRLA   = TC_CLKSEL_DIV8_gc;    // f = FCPU/(N*PER) = 32M/(8*20000) = 200 Hz
     472:	24 e0       	ldi	r18, 0x04	; 4
     474:	20 83       	st	Z, r18
	TCC0.PER     = 20000;
     476:	80 e2       	ldi	r24, 0x20	; 32
     478:	9e e4       	ldi	r25, 0x4E	; 78
     47a:	86 a3       	std	Z+38, r24	; 0x26
     47c:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CCA     = 0;
     47e:	10 a6       	std	Z+40, r1	; 0x28
     480:	11 a6       	std	Z+41, r1	; 0x29

	TCF0.CTRLB   = TC0_CCAEN_bm | TC0_CCBEN_bm  | TC_WGMODE_SINGLESLOPE_gc;
     482:	e0 e0       	ldi	r30, 0x00	; 0
     484:	fb e0       	ldi	r31, 0x0B	; 11
     486:	33 e3       	ldi	r19, 0x33	; 51
     488:	31 83       	std	Z+1, r19	; 0x01
	TCF0.CTRLA   = TC_CLKSEL_DIV8_gc;
     48a:	20 83       	st	Z, r18
	TCF0.PER     = 20000;
     48c:	86 a3       	std	Z+38, r24	; 0x26
     48e:	97 a3       	std	Z+39, r25	; 0x27
	TCF0.CCA     = 0;
     490:	10 a6       	std	Z+40, r1	; 0x28
     492:	11 a6       	std	Z+41, r1	; 0x29
	TCF0.CCB     = 0;
     494:	12 a6       	std	Z+42, r1	; 0x2a
     496:	13 a6       	std	Z+43, r1	; 0x2b
     498:	08 95       	ret

0000049a <init_nrf>:
}

void init_nrf(void)
{
	nrfspiInit();
     49a:	0e 94 93 06 	call	0xd26	; 0xd26 <nrfspiInit>
	// Check SPI Connection
	if (nrfVerifySPIConnection())   PORTF.OUTSET = PIN0_bm;
     49e:	0e 94 74 06 	call	0xce8	; 0xce8 <nrfVerifySPIConnection>
     4a2:	88 23       	and	r24, r24
     4a4:	21 f0       	breq	.+8      	; 0x4ae <init_nrf+0x14>
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <init_nrf+0x1a>
	else                             PORTF.OUTSET = PIN1_bm;
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>

	nrfBegin();
     4b4:	0e 94 4b 06 	call	0xc96	; 0xc96 <nrfBegin>

	nrfSetRetries(NRF_SETUP_ARD_1000US_gc, NRF_SETUP_ARC_8RETRANSMIT_gc);
     4b8:	68 e0       	ldi	r22, 0x08	; 8
     4ba:	80 e3       	ldi	r24, 0x30	; 48
     4bc:	0e 94 ef 05 	call	0xbde	; 0xbde <nrfSetRetries>
	nrfSetPALevel(NRF_RF_SETUP_PWR_6DBM_gc);
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <nrfSetPALevel>
	nrfSetDataRate(NRF_RF_SETUP_RF_DR_250K_gc);
     4c6:	80 e2       	ldi	r24, 0x20	; 32
     4c8:	0e 94 cb 05 	call	0xb96	; 0xb96 <nrfSetDataRate>
	nrfSetCRCLength(NRF_CONFIG_CRC_16_gc);
     4cc:	8c e0       	ldi	r24, 0x0C	; 12
     4ce:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <nrfSetCRCLength>
	nrfSetChannel(48);
     4d2:	80 e3       	ldi	r24, 0x30	; 48
     4d4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <nrfSetChannel>
	nrfSetAutoAck(1);
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	0e 94 b1 05 	call	0xb62	; 0xb62 <nrfSetAutoAck>
	nrfEnableDynamicPayloads();
     4de:	0e 94 70 05 	call	0xae0	; 0xae0 <nrfEnableDynamicPayloads>

	nrfClearInterruptBits();
     4e2:	0e 94 46 06 	call	0xc8c	; 0xc8c <nrfClearInterruptBits>
	nrfFlushRx();
     4e6:	0e 94 4a 04 	call	0x894	; 0x894 <nrfFlushRx>
	nrfFlushTx();
     4ea:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfFlushTx>

	// Interrupt Pin
	PORTF.INT0MASK |= PIN6_bm;
     4ee:	e0 ea       	ldi	r30, 0xA0	; 160
     4f0:	f6 e0       	ldi	r31, 0x06	; 6
     4f2:	82 85       	ldd	r24, Z+10	; 0x0a
     4f4:	80 64       	ori	r24, 0x40	; 64
     4f6:	82 87       	std	Z+10, r24	; 0x0a
	PORTF.PIN6CTRL  = PORT_ISC_FALLING_gc;
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.INTCTRL   = (PORTF.INTCTRL & ~PORT_INT0LVL_gm) |
     4fc:	81 85       	ldd	r24, Z+9	; 0x09
     4fe:	8c 7f       	andi	r24, 0xFC	; 252
     500:	81 60       	ori	r24, 0x01	; 1
     502:	81 87       	std	Z+9, r24	; 0x09
	PORT_INT0LVL_LO_gc;

	nrfOpenWritingPipe(pipes[0]);
     504:	83 e1       	ldi	r24, 0x13	; 19
     506:	90 e2       	ldi	r25, 0x20	; 32
     508:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <nrfOpenWritingPipe>
	nrfOpenReadingPipe(1,pipes[1]);
     50c:	69 e1       	ldi	r22, 0x19	; 25
     50e:	70 e2       	ldi	r23, 0x20	; 32
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 18 05 	call	0xa30	; 0xa30 <nrfOpenReadingPipe>
     516:	08 95       	ret

00000518 <getLine>:
}

uint8_t getLine(char *s)
{
     518:	ef 92       	push	r14
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	8c 01       	movw	r16, r24
	uint8_t c;
	uint8_t i = 0;
     524:	c0 e0       	ldi	r28, 0x00	; 0

	while ( (c = getchar()) != '\r') {
     526:	0f 2e       	mov	r0, r31
     528:	fb e6       	ldi	r31, 0x6B	; 107
     52a:	ef 2e       	mov	r14, r31
     52c:	f3 e2       	ldi	r31, 0x23	; 35
     52e:	ff 2e       	mov	r15, r31
     530:	f0 2d       	mov	r31, r0
     532:	04 c0       	rjmp	.+8      	; 0x53c <getLine+0x24>
		*s = c;
     534:	f8 01       	movw	r30, r16
     536:	81 93       	st	Z+, r24
     538:	8f 01       	movw	r16, r30
		s++;
		i++;
     53a:	cf 5f       	subi	r28, 0xFF	; 255
uint8_t getLine(char *s)
{
	uint8_t c;
	uint8_t i = 0;

	while ( (c = getchar()) != '\r') {
     53c:	f7 01       	movw	r30, r14
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fgetc>
     546:	8d 30       	cpi	r24, 0x0D	; 13
     548:	a9 f7       	brne	.-22     	; 0x534 <getLine+0x1c>
		*s = c;
		s++;
		i++;
	}
	*s = '\0';
     54a:	f8 01       	movw	r30, r16
     54c:	10 82       	st	Z, r1

	return i;
}
     54e:	8c 2f       	mov	r24, r28
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	08 95       	ret

0000055c <nrfSendCommand>:

void nrfSendCommand(char *command)
{
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
	nrfStopListening();
     562:	0e 94 9d 04 	call	0x93a	; 0x93a <nrfStopListening>
	nrfWrite( (uint8_t *) command, strlen(command) );
     566:	fe 01       	movw	r30, r28
     568:	01 90       	ld	r0, Z+
     56a:	00 20       	and	r0, r0
     56c:	e9 f7       	brne	.-6      	; 0x568 <nrfSendCommand+0xc>
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	bf 01       	movw	r22, r30
     572:	6c 1b       	sub	r22, r28
     574:	7d 0b       	sbc	r23, r29
     576:	ce 01       	movw	r24, r28
     578:	0e 94 40 06 	call	0xc80	; 0xc80 <nrfWrite>
     57c:	8f e3       	ldi	r24, 0x3F	; 63
     57e:	9c e9       	ldi	r25, 0x9C	; 156
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <nrfSendCommand+0x24>
     584:	00 c0       	rjmp	.+0      	; 0x586 <nrfSendCommand+0x2a>
     586:	00 00       	nop
	_delay_ms(5);
	nrfStartListening();
     588:	0e 94 68 04 	call	0x8d0	; 0x8d0 <nrfStartListening>
     58c:	8f e3       	ldi	r24, 0x3F	; 63
     58e:	9c e9       	ldi	r25, 0x9C	; 156
     590:	01 97       	sbiw	r24, 0x01	; 1
     592:	f1 f7       	brne	.-4      	; 0x590 <nrfSendCommand+0x34>
     594:	00 c0       	rjmp	.+0      	; 0x596 <nrfSendCommand+0x3a>
     596:	00 00       	nop
	_delay_ms(5);
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <main>:

int main(void)
{
	uint16_t length;

	Config32MHzClock_Ext16M();
     59e:	0e 94 25 01 	call	0x24a	; 0x24a <Config32MHzClock_Ext16M>

	init_pwm();
     5a2:	0e 94 28 02 	call	0x450	; 0x450 <init_pwm>
	init_nrf();
     5a6:	0e 94 4d 02 	call	0x49a	; 0x49a <init_nrf>

	init_stream(F_CPU);
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	78 e4       	ldi	r23, 0x48	; 72
     5ae:	88 ee       	ldi	r24, 0xE8	; 232
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 30 07 	call	0xe60	; 0xe60 <init_stream>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	81 60       	ori	r24, 0x01	; 1
     5be:	82 83       	std	Z+2, r24	; 0x02
	sei();
     5c0:	78 94       	sei

	clear_screen();
     5c2:	82 e5       	ldi	r24, 0x52	; 82
     5c4:	90 e2       	ldi	r25, 0x20	; 32
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <printf>
	printf("Master\n");
     5ce:	8e e5       	ldi	r24, 0x5E	; 94
     5d0:	90 e2       	ldi	r25, 0x20	; 32
     5d2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <puts>

	nrfStartListening();
     5d6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <nrfStartListening>
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
					printf("Toggled sensor %s, status: %d\n", buffer, blacklist[sensor_id_index]);
					nrfSendCommand("Toggled sensor!");
					continue;
				}

				printf("sent: %s\n", buffer);
     5de:	c4 e9       	ldi	r28, 0x94	; 148
     5e0:	d0 e2       	ldi	r29, 0x20	; 32
				
				if (buffer[0]=='S')
				{
					int sensor_id_index = atoi(buffer[1]);
					blacklist[sensor_id_index]=blacklist[sensor_id_index]*-1;
					printf("Toggled sensor %s, status: %d\n", buffer, blacklist[sensor_id_index]);
     5e2:	05 e6       	ldi	r16, 0x65	; 101
     5e4:	10 e2       	ldi	r17, 0x20	; 32
	printf("Master\n");

	nrfStartListening();
	
	while (1) {
		if (sending) {
     5e6:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <sending>
     5ea:	88 23       	and	r24, r24
     5ec:	e1 f3       	breq	.-8      	; 0x5e6 <main+0x48>
			if ( (length = getLine(buffer)) > 0) {
     5ee:	80 ee       	ldi	r24, 0xE0	; 224
     5f0:	90 e2       	ldi	r25, 0x20	; 32
     5f2:	0e 94 8c 02 	call	0x518	; 0x518 <getLine>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	a9 f3       	breq	.-22     	; 0x5e6 <main+0x48>
				buffer[length] = '\0';
     5fc:	fc 01       	movw	r30, r24
     5fe:	e0 52       	subi	r30, 0x20	; 32
     600:	ff 4d       	sbci	r31, 0xDF	; 223
     602:	10 82       	st	Z, r1
				
				if (buffer[0]=='S')
     604:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <buffer>
     608:	83 35       	cpi	r24, 0x53	; 83
     60a:	51 f5       	brne	.+84     	; 0x660 <main+0xc2>
				{
					int sensor_id_index = atoi(buffer[1]);
     60c:	0f 2e       	mov	r0, r31
     60e:	f0 ee       	ldi	r31, 0xE0	; 224
     610:	ef 2e       	mov	r14, r31
     612:	f0 e2       	ldi	r31, 0x20	; 32
     614:	ff 2e       	mov	r15, r31
     616:	f0 2d       	mov	r31, r0
     618:	f7 01       	movw	r30, r14
     61a:	81 81       	ldd	r24, Z+1	; 0x01
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <atoi>
					blacklist[sensor_id_index]=blacklist[sensor_id_index]*-1;
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	fc 01       	movw	r30, r24
     628:	e9 5f       	subi	r30, 0xF9	; 249
     62a:	ff 4d       	sbci	r31, 0xDF	; 223
     62c:	20 81       	ld	r18, Z
     62e:	31 81       	ldd	r19, Z+1	; 0x01
     630:	31 95       	neg	r19
     632:	21 95       	neg	r18
     634:	31 09       	sbc	r19, r1
     636:	20 83       	st	Z, r18
     638:	31 83       	std	Z+1, r19	; 0x01
					printf("Toggled sensor %s, status: %d\n", buffer, blacklist[sensor_id_index]);
     63a:	3f 93       	push	r19
     63c:	2f 93       	push	r18
     63e:	ff 92       	push	r15
     640:	ef 92       	push	r14
     642:	1f 93       	push	r17
     644:	0f 93       	push	r16
     646:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <printf>
					nrfSendCommand("Toggled sensor!");
     64a:	84 e8       	ldi	r24, 0x84	; 132
     64c:	90 e2       	ldi	r25, 0x20	; 32
     64e:	0e 94 ae 02 	call	0x55c	; 0x55c <nrfSendCommand>
					continue;
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	c3 cf       	rjmp	.-122    	; 0x5e6 <main+0x48>
				}

				printf("sent: %s\n", buffer);
     660:	80 ee       	ldi	r24, 0xE0	; 224
     662:	90 e2       	ldi	r25, 0x20	; 32
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <printf>
				nrfSendCommand(buffer);
     670:	80 ee       	ldi	r24, 0xE0	; 224
     672:	90 e2       	ldi	r25, 0x20	; 32
     674:	0e 94 ae 02 	call	0x55c	; 0x55c <nrfSendCommand>
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	b2 cf       	rjmp	.-156    	; 0x5e6 <main+0x48>

00000682 <nrfReadRegister>:
 * \brief   Disbale CRC
 */
void nrfDisableCRC( void )
{
  uint8_t config = nrfReadRegister(REG_CONFIG) & ~NRF_CONFIG_EN_CRC_bm;
  nrfWriteRegister( REG_CONFIG, config );
     682:	1f 93       	push	r17
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	c0 ea       	ldi	r28, 0xA0	; 160
     68a:	d6 e0       	ldi	r29, 0x06	; 6
     68c:	10 e2       	ldi	r17, 0x20	; 32
     68e:	1e 83       	std	Y+6, r17	; 0x06
     690:	8f 71       	andi	r24, 0x1F	; 31
     692:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     69c:	1d 83       	std	Y+5, r17	; 0x05
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <nrfWriteRegisterMulti>:
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	7b 01       	movw	r14, r22
     6b6:	c4 2f       	mov	r28, r20
     6b8:	90 e2       	ldi	r25, 0x20	; 32
     6ba:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     6be:	8f 71       	andi	r24, 0x1F	; 31
     6c0:	80 62       	ori	r24, 0x20	; 32
     6c2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     6c6:	d8 2e       	mov	r13, r24
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	8c 0f       	add	r24, r28
     6cc:	cc 23       	and	r28, r28
     6ce:	69 f0       	breq	.+26     	; 0x6ea <nrfWriteRegisterMulti+0x44>
     6d0:	e7 01       	movw	r28, r14
     6d2:	08 2f       	mov	r16, r24
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	0e 0d       	add	r16, r14
     6dc:	1f 1d       	adc	r17, r15
     6de:	89 91       	ld	r24, Y+
     6e0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     6e4:	c0 17       	cp	r28, r16
     6e6:	d1 07       	cpc	r29, r17
     6e8:	d1 f7       	brne	.-12     	; 0x6de <nrfWriteRegisterMulti+0x38>
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     6f0:	8d 2d       	mov	r24, r13
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	08 95       	ret

00000702 <nrfWriteRegister>:
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	f6 2e       	mov	r15, r22
     70e:	c0 ea       	ldi	r28, 0xA0	; 160
     710:	d6 e0       	ldi	r29, 0x06	; 6
     712:	10 e2       	ldi	r17, 0x20	; 32
     714:	1e 83       	std	Y+6, r17	; 0x06
     716:	8f 71       	andi	r24, 0x1F	; 31
     718:	80 62       	ori	r24, 0x20	; 32
     71a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     71e:	08 2f       	mov	r16, r24
     720:	8f 2d       	mov	r24, r15
     722:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     726:	1d 83       	std	Y+5, r17	; 0x05
     728:	80 2f       	mov	r24, r16
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	08 95       	ret

00000736 <nrfWritePayload>:
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	6c 01       	movw	r12, r24
     74a:	84 2f       	mov	r24, r20
     74c:	c0 91 20 20 	lds	r28, 0x2020	; 0x802020 <fixed_payload_size>
     750:	1c 2f       	mov	r17, r28
     752:	6c 17       	cp	r22, r28
     754:	08 f4       	brcc	.+2      	; 0x758 <nrfWritePayload+0x22>
     756:	16 2f       	mov	r17, r22
     758:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <dynamic_payloads_enabled>
     75c:	91 11       	cpse	r25, r1
     75e:	25 c0       	rjmp	.+74     	; 0x7aa <nrfWritePayload+0x74>
     760:	0c 2f       	mov	r16, r28
     762:	01 1b       	sub	r16, r17
     764:	90 e2       	ldi	r25, 0x20	; 32
     766:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     76a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     76e:	b8 2e       	mov	r11, r24
     770:	ee 24       	eor	r14, r14
     772:	ea 94       	dec	r14
     774:	e1 0e       	add	r14, r17
     776:	11 11       	cpse	r17, r1
     778:	02 c0       	rjmp	.+4      	; 0x77e <nrfWritePayload+0x48>
     77a:	0e c0       	rjmp	.+28     	; 0x798 <nrfWritePayload+0x62>
     77c:	00 e0       	ldi	r16, 0x00	; 0
     77e:	e6 01       	movw	r28, r12
     780:	f1 2c       	mov	r15, r1
     782:	8f ef       	ldi	r24, 0xFF	; 255
     784:	e8 1a       	sub	r14, r24
     786:	f8 0a       	sbc	r15, r24
     788:	ec 0c       	add	r14, r12
     78a:	fd 1c       	adc	r15, r13
     78c:	89 91       	ld	r24, Y+
     78e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     792:	ec 16       	cp	r14, r28
     794:	fd 06       	cpc	r15, r29
     796:	d1 f7       	brne	.-12     	; 0x78c <nrfWritePayload+0x56>
     798:	00 23       	and	r16, r16
     79a:	91 f0       	breq	.+36     	; 0x7c0 <nrfWritePayload+0x8a>
     79c:	c0 2f       	mov	r28, r16
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     7a4:	c1 50       	subi	r28, 0x01	; 1
     7a6:	d9 f7       	brne	.-10     	; 0x79e <nrfWritePayload+0x68>
     7a8:	0b c0       	rjmp	.+22     	; 0x7c0 <nrfWritePayload+0x8a>
     7aa:	90 e2       	ldi	r25, 0x20	; 32
     7ac:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     7b0:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     7b4:	b8 2e       	mov	r11, r24
     7b6:	ee 24       	eor	r14, r14
     7b8:	ea 94       	dec	r14
     7ba:	e1 0e       	add	r14, r17
     7bc:	11 11       	cpse	r17, r1
     7be:	de cf       	rjmp	.-68     	; 0x77c <nrfWritePayload+0x46>
     7c0:	80 e2       	ldi	r24, 0x20	; 32
     7c2:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     7c6:	8b 2d       	mov	r24, r11
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	cf 90       	pop	r12
     7d8:	bf 90       	pop	r11
     7da:	08 95       	ret

000007dc <nrfReadPayload>:
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	6c 01       	movw	r12, r24
     7f0:	c0 91 20 20 	lds	r28, 0x2020	; 0x802020 <fixed_payload_size>
     7f4:	1c 2f       	mov	r17, r28
     7f6:	6c 17       	cp	r22, r28
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <nrfReadPayload+0x20>
     7fa:	16 2f       	mov	r17, r22
     7fc:	80 91 bf 20 	lds	r24, 0x20BF	; 0x8020bf <dynamic_payloads_enabled>
     800:	81 11       	cpse	r24, r1
     802:	27 c0       	rjmp	.+78     	; 0x852 <nrfReadPayload+0x76>
     804:	0c 2f       	mov	r16, r28
     806:	01 1b       	sub	r16, r17
     808:	80 e2       	ldi	r24, 0x20	; 32
     80a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     80e:	81 e6       	ldi	r24, 0x61	; 97
     810:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     814:	b8 2e       	mov	r11, r24
     816:	ee 24       	eor	r14, r14
     818:	ea 94       	dec	r14
     81a:	e1 0e       	add	r14, r17
     81c:	11 11       	cpse	r17, r1
     81e:	02 c0       	rjmp	.+4      	; 0x824 <nrfReadPayload+0x48>
     820:	0f c0       	rjmp	.+30     	; 0x840 <nrfReadPayload+0x64>
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	e6 01       	movw	r28, r12
     826:	f1 2c       	mov	r15, r1
     828:	8f ef       	ldi	r24, 0xFF	; 255
     82a:	e8 1a       	sub	r14, r24
     82c:	f8 0a       	sbc	r15, r24
     82e:	ec 0c       	add	r14, r12
     830:	fd 1c       	adc	r15, r13
     832:	8f ef       	ldi	r24, 0xFF	; 255
     834:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     838:	89 93       	st	Y+, r24
     83a:	ec 16       	cp	r14, r28
     83c:	fd 06       	cpc	r15, r29
     83e:	c9 f7       	brne	.-14     	; 0x832 <nrfReadPayload+0x56>
     840:	00 23       	and	r16, r16
     842:	99 f0       	breq	.+38     	; 0x86a <nrfReadPayload+0x8e>
     844:	c0 2f       	mov	r28, r16
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     84c:	c1 50       	subi	r28, 0x01	; 1
     84e:	d9 f7       	brne	.-10     	; 0x846 <nrfReadPayload+0x6a>
     850:	0c c0       	rjmp	.+24     	; 0x86a <nrfReadPayload+0x8e>
     852:	80 e2       	ldi	r24, 0x20	; 32
     854:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     858:	81 e6       	ldi	r24, 0x61	; 97
     85a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     85e:	b8 2e       	mov	r11, r24
     860:	ee 24       	eor	r14, r14
     862:	ea 94       	dec	r14
     864:	e1 0e       	add	r14, r17
     866:	11 11       	cpse	r17, r1
     868:	dc cf       	rjmp	.-72     	; 0x822 <nrfReadPayload+0x46>
     86a:	80 e2       	ldi	r24, 0x20	; 32
     86c:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     870:	8b 2d       	mov	r24, r11
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	df 90       	pop	r13
     880:	cf 90       	pop	r12
     882:	bf 90       	pop	r11
     884:	08 95       	ret

00000886 <nrfRead>:
     886:	0e 94 ee 03 	call	0x7dc	; 0x7dc <nrfReadPayload>
     88a:	87 e1       	ldi	r24, 0x17	; 23
     88c:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     890:	81 70       	andi	r24, 0x01	; 1
     892:	08 95       	ret

00000894 <nrfFlushRx>:
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	c0 ea       	ldi	r28, 0xA0	; 160
     89c:	d6 e0       	ldi	r29, 0x06	; 6
     89e:	10 e2       	ldi	r17, 0x20	; 32
     8a0:	1e 83       	std	Y+6, r17	; 0x06
     8a2:	82 ee       	ldi	r24, 0xE2	; 226
     8a4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     8a8:	1d 83       	std	Y+5, r17	; 0x05
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <nrfFlushTx>:
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	c0 ea       	ldi	r28, 0xA0	; 160
     8ba:	d6 e0       	ldi	r29, 0x06	; 6
     8bc:	10 e2       	ldi	r17, 0x20	; 32
     8be:	1e 83       	std	Y+6, r17	; 0x06
     8c0:	81 ee       	ldi	r24, 0xE1	; 225
     8c2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     8c6:	1d 83       	std	Y+5, r17	; 0x05
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	08 95       	ret

000008d0 <nrfStartListening>:
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     8d6:	81 fd       	sbrc	r24, 1
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <nrfStartListening+0x22>
     8da:	68 2f       	mov	r22, r24
     8dc:	63 60       	ori	r22, 0x03	; 3
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     8e4:	8f e7       	ldi	r24, 0x7F	; 127
     8e6:	9e e3       	ldi	r25, 0x3E	; 62
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <nrfStartListening+0x18>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <nrfStartListening+0x1e>
     8ee:	00 00       	nop
     8f0:	05 c0       	rjmp	.+10     	; 0x8fc <nrfStartListening+0x2c>
     8f2:	68 2f       	mov	r22, r24
     8f4:	61 60       	ori	r22, 0x01	; 1
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     8fc:	8f e0       	ldi	r24, 0x0F	; 15
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <nrfStartListening+0x30>
     904:	00 c0       	rjmp	.+0      	; 0x906 <nrfStartListening+0x36>
     906:	00 00       	nop
     908:	60 e7       	ldi	r22, 0x70	; 112
     90a:	87 e0       	ldi	r24, 0x07	; 7
     90c:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     910:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     914:	6a eb       	ldi	r22, 0xBA	; 186
     916:	70 e2       	ldi	r23, 0x20	; 32
     918:	8a e0       	ldi	r24, 0x0A	; 10
     91a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWriteRegisterMulti>
     91e:	0e 94 4a 04 	call	0x894	; 0x894 <nrfFlushRx>
     922:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfFlushTx>
     926:	80 e8       	ldi	r24, 0x80	; 128
     928:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     92c:	8f e0       	ldi	r24, 0x0F	; 15
     92e:	94 e0       	ldi	r25, 0x04	; 4
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <nrfStartListening+0x60>
     934:	00 c0       	rjmp	.+0      	; 0x936 <nrfStartListening+0x66>
     936:	00 00       	nop
     938:	08 95       	ret

0000093a <nrfStopListening>:
     93a:	80 e8       	ldi	r24, 0x80	; 128
     93c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     940:	0e 94 4a 04 	call	0x894	; 0x894 <nrfFlushRx>
     944:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfFlushTx>
     948:	08 95       	ret

0000094a <nrfStartWrite>:
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
     954:	16 2f       	mov	r17, r22
     956:	04 2f       	mov	r16, r20
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     95e:	81 fd       	sbrc	r24, 1
     960:	0d c0       	rjmp	.+26     	; 0x97c <nrfStartWrite+0x32>
     962:	68 2f       	mov	r22, r24
     964:	6e 7f       	andi	r22, 0xFE	; 254
     966:	62 60       	ori	r22, 0x02	; 2
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     96e:	8f e7       	ldi	r24, 0x7F	; 127
     970:	9e e3       	ldi	r25, 0x3E	; 62
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <nrfStartWrite+0x28>
     976:	00 c0       	rjmp	.+0      	; 0x978 <nrfStartWrite+0x2e>
     978:	00 00       	nop
     97a:	05 c0       	rjmp	.+10     	; 0x986 <nrfStartWrite+0x3c>
     97c:	68 2f       	mov	r22, r24
     97e:	6e 7f       	andi	r22, 0xFE	; 254
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <nrfStartWrite+0x40>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <nrfStartWrite+0x46>
     990:	00 00       	nop
     992:	40 2f       	mov	r20, r16
     994:	61 2f       	mov	r22, r17
     996:	ce 01       	movw	r24, r28
     998:	0e 94 9b 03 	call	0x736	; 0x736 <nrfWritePayload>
     99c:	e0 ea       	ldi	r30, 0xA0	; 160
     99e:	f6 e0       	ldi	r31, 0x06	; 6
     9a0:	80 e8       	ldi	r24, 0x80	; 128
     9a2:	85 83       	std	Z+5, r24	; 0x05
     9a4:	9a e6       	ldi	r25, 0x6A	; 106
     9a6:	9a 95       	dec	r25
     9a8:	f1 f7       	brne	.-4      	; 0x9a6 <nrfStartWrite+0x5c>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <nrfStartWrite+0x62>
     9ac:	86 83       	std	Z+6, r24	; 0x06
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <nrfWhatHappened>:
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	7c 01       	movw	r14, r24
     9c6:	8b 01       	movw	r16, r22
     9c8:	ea 01       	movw	r28, r20
     9ca:	60 e7       	ldi	r22, 0x70	; 112
     9cc:	87 e0       	ldi	r24, 0x07	; 7
     9ce:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     9d2:	98 2f       	mov	r25, r24
     9d4:	90 72       	andi	r25, 0x20	; 32
     9d6:	f7 01       	movw	r30, r14
     9d8:	90 83       	st	Z, r25
     9da:	98 2f       	mov	r25, r24
     9dc:	90 71       	andi	r25, 0x10	; 16
     9de:	f8 01       	movw	r30, r16
     9e0:	90 83       	st	Z, r25
     9e2:	80 74       	andi	r24, 0x40	; 64
     9e4:	88 83       	st	Y, r24
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	08 95       	ret

000009f4 <nrfOpenWritingPipe>:
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	ec 01       	movw	r28, r24
     9fa:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     9fe:	bc 01       	movw	r22, r24
     a00:	8a e0       	ldi	r24, 0x0A	; 10
     a02:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWriteRegisterMulti>
     a06:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     a0a:	be 01       	movw	r22, r28
     a0c:	80 e1       	ldi	r24, 0x10	; 16
     a0e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWriteRegisterMulti>
     a12:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <fixed_payload_size>
     a16:	60 32       	cpi	r22, 0x20	; 32
     a18:	20 f4       	brcc	.+8      	; 0xa22 <nrfOpenWritingPipe+0x2e>
     a1a:	81 e1       	ldi	r24, 0x11	; 17
     a1c:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <nrfOpenWritingPipe+0x36>
     a22:	60 e2       	ldi	r22, 0x20	; 32
     a24:	81 e1       	ldi	r24, 0x11	; 17
     a26:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <nrfOpenReadingPipe>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	c8 2f       	mov	r28, r24
     a3a:	8b 01       	movw	r16, r22
     a3c:	81 11       	cpse	r24, r1
     a3e:	08 c0       	rjmp	.+16     	; 0xa50 <nrfOpenReadingPipe+0x20>
     a40:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	8a eb       	ldi	r24, 0xBA	; 186
     a48:	90 e2       	ldi	r25, 0x20	; 32
     a4a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <memcpy>
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <nrfOpenReadingPipe+0x28>
     a50:	87 30       	cpi	r24, 0x07	; 7
     a52:	78 f5       	brcc	.+94     	; 0xab2 <nrfOpenReadingPipe+0x82>
     a54:	82 30       	cpi	r24, 0x02	; 2
     a56:	58 f4       	brcc	.+22     	; 0xa6e <nrfOpenReadingPipe+0x3e>
     a58:	ec 2f       	mov	r30, r28
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	ec 54       	subi	r30, 0x4C	; 76
     a5e:	ff 4d       	sbci	r31, 0xDF	; 223
     a60:	40 91 1f 20 	lds	r20, 0x201F	; 0x80201f <addr_width>
     a64:	b8 01       	movw	r22, r16
     a66:	80 81       	ld	r24, Z
     a68:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWriteRegisterMulti>
     a6c:	08 c0       	rjmp	.+16     	; 0xa7e <nrfOpenReadingPipe+0x4e>
     a6e:	e8 2f       	mov	r30, r24
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	ec 54       	subi	r30, 0x4C	; 76
     a74:	ff 4d       	sbci	r31, 0xDF	; 223
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	80 81       	ld	r24, Z
     a7a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <nrfWriteRegisterMulti>
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	fe 01       	movw	r30, r28
     a82:	e2 55       	subi	r30, 0x52	; 82
     a84:	ff 4d       	sbci	r31, 0xDF	; 223
     a86:	60 91 20 20 	lds	r22, 0x2020	; 0x802020 <fixed_payload_size>
     a8a:	80 81       	ld	r24, Z
     a8c:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     a96:	c8 55       	subi	r28, 0x58	; 88
     a98:	df 4d       	sbci	r29, 0xDF	; 223
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	08 80       	ld	r0, Y
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <nrfOpenReadingPipe+0x76>
     aa2:	66 0f       	add	r22, r22
     aa4:	77 1f       	adc	r23, r23
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <nrfOpenReadingPipe+0x72>
     aaa:	68 2b       	or	r22, r24
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <nrfToggleFeatures>:
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	c0 ea       	ldi	r28, 0xA0	; 160
     ac4:	d6 e0       	ldi	r29, 0x06	; 6
     ac6:	10 e2       	ldi	r17, 0x20	; 32
     ac8:	1e 83       	std	Y+6, r17	; 0x06
     aca:	80 e5       	ldi	r24, 0x50	; 80
     acc:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     ad0:	83 e7       	ldi	r24, 0x73	; 115
     ad2:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     ad6:	1d 83       	std	Y+5, r17	; 0x05
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	08 95       	ret

00000ae0 <nrfEnableDynamicPayloads>:
     ae0:	8d e1       	ldi	r24, 0x1D	; 29
     ae2:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     ae6:	68 2f       	mov	r22, r24
     ae8:	64 60       	ori	r22, 0x04	; 4
     aea:	8d e1       	ldi	r24, 0x1D	; 29
     aec:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     af0:	8d e1       	ldi	r24, 0x1D	; 29
     af2:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     af6:	81 11       	cpse	r24, r1
     af8:	0a c0       	rjmp	.+20     	; 0xb0e <nrfEnableDynamicPayloads+0x2e>
     afa:	0e 94 5e 05 	call	0xabc	; 0xabc <nrfToggleFeatures>
     afe:	8d e1       	ldi	r24, 0x1D	; 29
     b00:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     b04:	68 2f       	mov	r22, r24
     b06:	64 60       	ori	r22, 0x04	; 4
     b08:	8d e1       	ldi	r24, 0x1D	; 29
     b0a:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b0e:	8c e1       	ldi	r24, 0x1C	; 28
     b10:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     b14:	68 2f       	mov	r22, r24
     b16:	6f 63       	ori	r22, 0x3F	; 63
     b18:	8c e1       	ldi	r24, 0x1C	; 28
     b1a:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 bf 20 	sts	0x20BF, r24	; 0x8020bf <dynamic_payloads_enabled>
     b24:	08 95       	ret

00000b26 <nrfGetDynamicPayloadSize>:
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	df 93       	push	r29
     b2c:	c0 ea       	ldi	r28, 0xA0	; 160
     b2e:	d6 e0       	ldi	r29, 0x06	; 6
     b30:	10 e2       	ldi	r17, 0x20	; 32
     b32:	1e 83       	std	Y+6, r17	; 0x06
     b34:	80 e6       	ldi	r24, 0x60	; 96
     b36:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     b3a:	8f ef       	ldi	r24, 0xFF	; 255
     b3c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <nrfspiTransfer>
     b40:	1d 83       	std	Y+5, r17	; 0x05
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	08 95       	ret

00000b4a <nrfSetChannel>:
     b4a:	88 23       	and	r24, r24
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <nrfSetChannel+0xe>
     b4e:	68 2f       	mov	r22, r24
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b56:	08 95       	ret
     b58:	6f e7       	ldi	r22, 0x7F	; 127
     b5a:	85 e0       	ldi	r24, 0x05	; 5
     b5c:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b60:	08 95       	ret

00000b62 <nrfSetAutoAck>:
     b62:	88 23       	and	r24, r24
     b64:	29 f0       	breq	.+10     	; 0xb70 <nrfSetAutoAck+0xe>
     b66:	6f e3       	ldi	r22, 0x3F	; 63
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b6e:	08 95       	ret
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b78:	08 95       	ret

00000b7a <nrfSetPALevel>:
     b7a:	cf 93       	push	r28
     b7c:	c8 2f       	mov	r28, r24
     b7e:	86 e0       	ldi	r24, 0x06	; 6
     b80:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     b84:	89 7f       	andi	r24, 0xF9	; 249
     b86:	c6 70       	andi	r28, 0x06	; 6
     b88:	68 2f       	mov	r22, r24
     b8a:	6c 2b       	or	r22, r28
     b8c:	86 e0       	ldi	r24, 0x06	; 6
     b8e:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <nrfSetDataRate>:
     b96:	cf 93       	push	r28
     b98:	c8 2f       	mov	r28, r24
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     ba0:	87 7d       	andi	r24, 0xD7	; 215
     ba2:	9c 2f       	mov	r25, r28
     ba4:	98 72       	andi	r25, 0x28	; 40
     ba6:	68 2f       	mov	r22, r24
     ba8:	69 2b       	or	r22, r25
     baa:	86 e0       	ldi	r24, 0x06	; 6
     bac:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     bb0:	86 e0       	ldi	r24, 0x06	; 6
     bb2:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	c8 13       	cpse	r28, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	89 2f       	mov	r24, r25
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <nrfSetCRCLength>:
     bc2:	cf 93       	push	r28
     bc4:	c8 2f       	mov	r28, r24
     bc6:	80 e0       	ldi	r24, 0x00	; 0
     bc8:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     bcc:	83 7f       	andi	r24, 0xF3	; 243
     bce:	cc 70       	andi	r28, 0x0C	; 12
     bd0:	68 2f       	mov	r22, r24
     bd2:	6c 2b       	or	r22, r28
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     bda:	cf 91       	pop	r28
     bdc:	08 95       	ret

00000bde <nrfSetRetries>:
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     bde:	68 2b       	or	r22, r24
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     be6:	08 95       	ret

00000be8 <nrfGetMaxTimeout>:
 *
 * @return  maximum timeout in us
 */

uint16_t nrfGetMaxTimeout(void){
  uint8_t retries = nrfReadRegister(REG_SETUP_RETR);
     be8:	84 e0       	ldi	r24, 0x04	; 4
     bea:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
  uint8_t delay   = (retries & NRF_SETUP_ARD_gm) >> NRF_SETUP_ARD_gp;
  uint8_t count   = (retries & NRF_SETUP_ARC_gm) >> NRF_SETUP_ARC_gp;

  uint16_t to = 250 * (delay + 1) * (count + 1);

  return to ;
     bee:	28 2f       	mov	r18, r24
     bf0:	22 95       	swap	r18
     bf2:	2f 70       	andi	r18, 0x0F	; 15
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	2f 5f       	subi	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	9a ef       	ldi	r25, 0xFA	; 250
     bfc:	92 9f       	mul	r25, r18
     bfe:	a0 01       	movw	r20, r0
     c00:	93 9f       	mul	r25, r19
     c02:	50 0d       	add	r21, r0
     c04:	11 24       	eor	r1, r1
     c06:	8f 70       	andi	r24, 0x0F	; 15
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	01 96       	adiw	r24, 0x01	; 1
}
     c0c:	9c 01       	movw	r18, r24
     c0e:	42 9f       	mul	r20, r18
     c10:	c0 01       	movw	r24, r0
     c12:	43 9f       	mul	r20, r19
     c14:	90 0d       	add	r25, r0
     c16:	52 9f       	mul	r21, r18
     c18:	90 0d       	add	r25, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	08 95       	ret

00000c1e <nrfWaitForAck>:
// from Wouter + nrfGetMaxTimeout()
// TODO?  iAckTimer zou ook een globale waarde kunnen zijn,
//        die bij init bepaald of bij setRetries gezet wordt
//        is nrfFlushRx nodig ??
uint8_t nrfWaitForAck(void)
{
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
     c22:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <nrfGetMaxTimeout>
     c26:	9c 01       	movw	r18, r24
     c28:	36 95       	lsr	r19
     c2a:	27 95       	ror	r18
     c2c:	36 95       	lsr	r19
     c2e:	27 95       	ror	r18
     c30:	ab e7       	ldi	r26, 0x7B	; 123
     c32:	b4 e1       	ldi	r27, 0x14	; 20
     c34:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <__umulhisi3>
     c38:	ec 01       	movw	r28, r24
     c3a:	d6 95       	lsr	r29
     c3c:	c7 95       	ror	r28
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     c3e:	20 97       	sbiw	r28, 0x00	; 0
     c40:	71 f0       	breq	.+28     	; 0xc5e <nrfWaitForAck+0x40>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     c42:	87 e0       	ldi	r24, 0x07	; 7
     c44:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
    iAckTimer--;
     c48:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c4a:	ef e1       	ldi	r30, 0x1F	; 31
     c4c:	f3 e0       	ldi	r31, 0x03	; 3
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	f1 f7       	brne	.-4      	; 0xc4e <nrfWaitForAck+0x30>
     c52:	00 c0       	rjmp	.+0      	; 0xc54 <nrfWaitForAck+0x36>
     c54:	00 00       	nop
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     c56:	80 73       	andi	r24, 0x30	; 48
     c58:	11 f4       	brne	.+4      	; 0xc5e <nrfWaitForAck+0x40>
     c5a:	20 97       	sbiw	r28, 0x00	; 0
     c5c:	91 f7       	brne	.-28     	; 0xc42 <nrfWaitForAck+0x24>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
    iAckTimer--;
    _delay_us(100);
  }
  iSucces = nrfReadRegister(REG_STATUS) & NRF_STATUS_TX_DS_bm;
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     c64:	c8 2f       	mov	r28, r24

  nrfFlushRx();       // ??
     c66:	0e 94 4a 04 	call	0x894	; 0x894 <nrfFlushRx>
  nrfFlushTx();       // Flush TX FIFO because of MAX_RT
     c6a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfFlushTx>
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm|NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     c6e:	60 e7       	ldi	r22, 0x70	; 112
     c70:	87 e0       	ldi	r24, 0x07	; 7
     c72:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>

  return(iSucces);    // Returns 32 on ACK received, 0 on time out
}
     c76:	8c 2f       	mov	r24, r28
     c78:	80 72       	andi	r24, 0x20	; 32
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <nrfWrite>:
uint8_t nrfWrite( uint8_t* buf, uint8_t len)
{
  uint8_t iReturn;

  //nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD_NO_ACK);
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);
     c80:	40 ea       	ldi	r20, 0xA0	; 160
     c82:	0e 94 a5 04 	call	0x94a	; 0x94a <nrfStartWrite>

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out
     c86:	0e 94 0f 06 	call	0xc1e	; 0xc1e <nrfWaitForAck>

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     c8a:	08 95       	ret

00000c8c <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     c8c:	60 e7       	ldi	r22, 0x70	; 112
     c8e:	87 e0       	ldi	r24, 0x07	; 7
     c90:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     c94:	08 95       	ret

00000c96 <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c96:	8f e3       	ldi	r24, 0x3F	; 63
     c98:	9c e9       	ldi	r25, 0x9C	; 156
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <nrfBegin+0x4>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <nrfBegin+0xa>
     ca0:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     ca2:	6f e5       	ldi	r22, 0x5F	; 95
     ca4:	84 e0       	ldi	r24, 0x04	; 4
     ca6:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     caa:	86 e0       	ldi	r24, 0x06	; 6
     cac:	0e 94 bd 05 	call	0xb7a	; 0xb7a <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     cb0:	80 e2       	ldi	r24, 0x20	; 32
     cb2:	0e 94 cb 05 	call	0xb96	; 0xb96 <nrfSetDataRate>
     cb6:	88 23       	and	r24, r24
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	80 93 21 20 	sts	0x2021, r24	; 0x802021 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	0e 94 cb 05 	call	0xb96	; 0xb96 <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     cc6:	8c e0       	ldi	r24, 0x0C	; 12
     cc8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	8c e1       	ldi	r24, 0x1C	; 28
     cd0:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     cd4:	8c e4       	ldi	r24, 0x4C	; 76
     cd6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     cda:	0e 94 46 06 	call	0xc8c	; 0xc8c <nrfClearInterruptBits>
  nrfFlushRx();
     cde:	0e 94 4a 04 	call	0x894	; 0x894 <nrfFlushRx>
  nrfFlushTx();
     ce2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <nrfFlushTx>
     ce6:	08 95       	ret

00000ce8 <nrfVerifySPIConnection>:
 *          0 (false) if not
 */

// from Wouter
uint8_t nrfVerifySPIConnection(void)
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
  uint8_t iBuffer = 0;
  uint8_t iDataBuffer = 0;

  iDataBuffer = nrfReadRegister(REG_SETUP_RETR);  // Buffer old value
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     cf2:	d8 2f       	mov	r29, r24
  nrfWriteRegister(REG_SETUP_RETR, 0x48);         // Write random value
     cf4:	68 e4       	ldi	r22, 0x48	; 72
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     cfc:	8f e3       	ldi	r24, 0x3F	; 63
     cfe:	9f e1       	ldi	r25, 0x1F	; 31
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <nrfVerifySPIConnection+0x18>
     d04:	00 c0       	rjmp	.+0      	; 0xd06 <nrfVerifySPIConnection+0x1e>
     d06:	00 00       	nop
  _delay_ms(1);
  iBuffer = nrfReadRegister(REG_SETUP_RETR);      // Read value from SPI
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	0e 94 41 03 	call	0x682	; 0x682 <nrfReadRegister>
     d0e:	c8 2f       	mov	r28, r24
  nrfWriteRegister(REG_SETUP_RETR, iDataBuffer);  // Restore old value
     d10:	6d 2f       	mov	r22, r29
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	0e 94 81 03 	call	0x702	; 0x702 <nrfWriteRegister>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	c8 34       	cpi	r28, 0x48	; 72
     d1c:	09 f0       	breq	.+2      	; 0xd20 <nrfVerifySPIConnection+0x38>
     d1e:	80 e0       	ldi	r24, 0x00	; 0

  if (iBuffer == 0x48) return(1);                  // 1 - Value is as expected
  else                 return(0);                  // 0 - Value is different
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     d26:	e0 e4       	ldi	r30, 0x40	; 64
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     d2e:	84 e0       	ldi	r24, 0x04	; 4
     d30:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     d36:	e0 ea       	ldi	r30, 0xA0	; 160
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     d3e:	80 e4       	ldi	r24, 0x40	; 64
     d40:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     d42:	80 e8       	ldi	r24, 0x80	; 128
     d44:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     d46:	e0 ea       	ldi	r30, 0xA0	; 160
     d48:	f8 e0       	ldi	r31, 0x08	; 8
     d4a:	88 e1       	ldi	r24, 0x18	; 24
     d4c:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     d4e:	80 ec       	ldi	r24, 0xC0	; 192
     d50:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     d52:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	86 83       	std	Z+6, r24	; 0x06
     d58:	08 95       	ret

00000d5a <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     d5a:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     d5e:	e0 ea       	ldi	r30, 0xA0	; 160
     d60:	f8 e0       	ldi	r31, 0x08	; 8
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	86 ff       	sbrs	r24, 6
     d66:	fd cf       	rjmp	.-6      	; 0xd62 <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     d68:	e0 ea       	ldi	r30, 0xA0	; 160
     d6a:	f8 e0       	ldi	r31, 0x08	; 8
     d6c:	81 81       	ldd	r24, Z+1	; 0x01
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     d72:	80 81       	ld	r24, Z
}
     d74:	08 95       	ret

00000d76 <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     d76:	cf 93       	push	r28
     d78:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     d7a:	80 e6       	ldi	r24, 0x60	; 96
     d7c:	91 e2       	ldi	r25, 0x21	; 33
     d7e:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_TXBuffer_FreeSpace>
     d82:	88 23       	and	r24, r24
     d84:	d1 f3       	breq	.-12     	; 0xd7a <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     d86:	ca 30       	cpi	r28, 0x0A	; 10
     d88:	29 f4       	brne	.+10     	; 0xd94 <uart_fputc+0x1e>
     d8a:	6d e0       	ldi	r22, 0x0D	; 13
     d8c:	80 e6       	ldi	r24, 0x60	; 96
     d8e:	91 e2       	ldi	r25, 0x21	; 33
     d90:	0e 94 67 07 	call	0xece	; 0xece <uart_putc>
  uart_putc(&uartF0, c);
     d94:	6c 2f       	mov	r22, r28
     d96:	80 e6       	ldi	r24, 0x60	; 96
     d98:	91 e2       	ldi	r25, 0x21	; 33
     d9a:	0e 94 67 07 	call	0xece	; 0xece <uart_putc>

  return 0;
}
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     da6:	80 e6       	ldi	r24, 0x60	; 96
     da8:	91 e2       	ldi	r25, 0x21	; 33
     daa:	0e 94 56 07 	call	0xeac	; 0xeac <uart_getc>
     dae:	81 15       	cp	r24, r1
     db0:	21 e0       	ldi	r18, 0x01	; 1
     db2:	92 07       	cpc	r25, r18
     db4:	c1 f3       	breq	.-16     	; 0xda6 <uart_fgetc>

  return c;
}
     db6:	08 95       	ret

00000db8 <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	0b b6       	in	r0, 0x3b	; 59
     dc4:	0f 92       	push	r0
     dc6:	2f 93       	push	r18
     dc8:	3f 93       	push	r19
     dca:	4f 93       	push	r20
     dcc:	5f 93       	push	r21
     dce:	6f 93       	push	r22
     dd0:	7f 93       	push	r23
     dd2:	8f 93       	push	r24
     dd4:	9f 93       	push	r25
     dd6:	af 93       	push	r26
     dd8:	bf 93       	push	r27
     dda:	ef 93       	push	r30
     ddc:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     dde:	80 e6       	ldi	r24, 0x60	; 96
     de0:	91 e2       	ldi	r25, 0x21	; 33
     de2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <USART_RXComplete>
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     e32:	80 e6       	ldi	r24, 0x60	; 96
     e34:	91 e2       	ldi	r25, 0x21	; 33
     e36:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART_DataRegEmpty>
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0b be       	out	0x3b, r0	; 59
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     e60:	cf 92       	push	r12
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     e6e:	c1 2c       	mov	r12, r1
     e70:	e1 2c       	mov	r14, r1
     e72:	12 ec       	ldi	r17, 0xC2	; 194
     e74:	f1 2e       	mov	r15, r17
     e76:	01 e0       	ldi	r16, 0x01	; 1
     e78:	10 e0       	ldi	r17, 0x00	; 0
     e7a:	60 ea       	ldi	r22, 0xA0	; 160
     e7c:	7b e0       	ldi	r23, 0x0B	; 11
     e7e:	80 e6       	ldi	r24, 0x60	; 96
     e80:	91 e2       	ldi	r25, 0x21	; 33
     e82:	0e 94 a1 08 	call	0x1142	; 0x1142 <init_uart>
  stdout = stdin = &uart_stdinout;
     e86:	eb e6       	ldi	r30, 0x6B	; 107
     e88:	f3 e2       	ldi	r31, 0x23	; 35
     e8a:	82 e2       	ldi	r24, 0x22	; 34
     e8c:	90 e2       	ldi	r25, 0x20	; 32
     e8e:	80 83       	st	Z, r24
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	82 83       	std	Z+2, r24	; 0x02
     e94:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     e96:	e0 ea       	ldi	r30, 0xA0	; 160
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	82 83       	std	Z+2, r24	; 0x02
}
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	cf 90       	pop	r12
     eaa:	08 95       	ret

00000eac <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	0e 94 46 09 	call	0x128c	; 0x128c <USART_RXBufferData_Available>
     eb6:	88 23       	and	r24, r24
     eb8:	29 f0       	breq	.+10     	; 0xec4 <uart_getc+0x18>
     eba:	ce 01       	movw	r24, r28
     ebc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <USART_RXBuffer_GetByte>
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <uart_getc+0x1c>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <uart_putc>:
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
     ed6:	16 2f       	mov	r17, r22
     ed8:	0e 94 10 09 	call	0x1220	; 0x1220 <USART_TXBuffer_FreeSpace>
     edc:	88 23       	and	r24, r24
     ede:	21 f0       	breq	.+8      	; 0xee8 <uart_putc+0x1a>
     ee0:	61 2f       	mov	r22, r17
     ee2:	ce 01       	movw	r24, r28
     ee4:	0e 94 1d 09 	call	0x123a	; 0x123a <USART_TXBuffer_PutByte>
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	08 95       	ret

00000ef0 <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     ef0:	80 3a       	cpi	r24, 0xA0	; 160
     ef2:	28 e0       	ldi	r18, 0x08	; 8
     ef4:	92 07       	cpc	r25, r18
     ef6:	39 f4       	brne	.+14     	; 0xf06 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     ef8:	e0 e4       	ldi	r30, 0x40	; 64
     efa:	f6 e0       	ldi	r31, 0x06	; 6
     efc:	88 e0       	ldi	r24, 0x08	; 8
     efe:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	82 83       	std	Z+2, r24	; 0x02
     return;
     f04:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     f06:	80 3b       	cpi	r24, 0xB0	; 176
     f08:	28 e0       	ldi	r18, 0x08	; 8
     f0a:	92 07       	cpc	r25, r18
     f0c:	39 f4       	brne	.+14     	; 0xf1c <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     f0e:	e0 e4       	ldi	r30, 0x40	; 64
     f10:	f6 e0       	ldi	r31, 0x06	; 6
     f12:	80 e8       	ldi	r24, 0x80	; 128
     f14:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     f16:	80 e4       	ldi	r24, 0x40	; 64
     f18:	82 83       	std	Z+2, r24	; 0x02
     return;
     f1a:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     f1c:	80 3a       	cpi	r24, 0xA0	; 160
     f1e:	29 e0       	ldi	r18, 0x09	; 9
     f20:	92 07       	cpc	r25, r18
     f22:	39 f4       	brne	.+14     	; 0xf32 <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     f24:	e0 e6       	ldi	r30, 0x60	; 96
     f26:	f6 e0       	ldi	r31, 0x06	; 6
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     f2c:	84 e0       	ldi	r24, 0x04	; 4
     f2e:	82 83       	std	Z+2, r24	; 0x02
     return;
     f30:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     f32:	80 3b       	cpi	r24, 0xB0	; 176
     f34:	29 e0       	ldi	r18, 0x09	; 9
     f36:	92 07       	cpc	r25, r18
     f38:	39 f4       	brne	.+14     	; 0xf48 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     f3a:	e0 e6       	ldi	r30, 0x60	; 96
     f3c:	f6 e0       	ldi	r31, 0x06	; 6
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     f42:	80 e4       	ldi	r24, 0x40	; 64
     f44:	82 83       	std	Z+2, r24	; 0x02
     return;
     f46:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
     f48:	80 3a       	cpi	r24, 0xA0	; 160
     f4a:	2a e0       	ldi	r18, 0x0A	; 10
     f4c:	92 07       	cpc	r25, r18
     f4e:	39 f4       	brne	.+14     	; 0xf5e <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
     f50:	e0 e8       	ldi	r30, 0x80	; 128
     f52:	f6 e0       	ldi	r31, 0x06	; 6
     f54:	88 e0       	ldi	r24, 0x08	; 8
     f56:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	82 83       	std	Z+2, r24	; 0x02
     return;
     f5c:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
     f5e:	80 3b       	cpi	r24, 0xB0	; 176
     f60:	2a e0       	ldi	r18, 0x0A	; 10
     f62:	92 07       	cpc	r25, r18
     f64:	39 f4       	brne	.+14     	; 0xf74 <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
     f66:	e0 e8       	ldi	r30, 0x80	; 128
     f68:	f6 e0       	ldi	r31, 0x06	; 6
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
     f6e:	80 e4       	ldi	r24, 0x40	; 64
     f70:	82 83       	std	Z+2, r24	; 0x02
     return;
     f72:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
     f74:	80 3a       	cpi	r24, 0xA0	; 160
     f76:	9b 40       	sbci	r25, 0x0B	; 11
     f78:	31 f4       	brne	.+12     	; 0xf86 <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
     f7a:	e0 ea       	ldi	r30, 0xA0	; 160
     f7c:	f6 e0       	ldi	r31, 0x06	; 6
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
     f82:	84 e0       	ldi	r24, 0x04	; 4
     f84:	82 83       	std	Z+2, r24	; 0x02
     f86:	08 95       	ret

00000f88 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
     f88:	4f 92       	push	r4
     f8a:	5f 92       	push	r5
     f8c:	6f 92       	push	r6
     f8e:	7f 92       	push	r7
     f90:	8f 92       	push	r8
     f92:	9f 92       	push	r9
     f94:	af 92       	push	r10
     f96:	bf 92       	push	r11
     f98:	cf 92       	push	r12
     f9a:	df 92       	push	r13
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	49 01       	movw	r8, r18
     faa:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
     fac:	2e 2d       	mov	r18, r14
     fae:	21 70       	andi	r18, 0x01	; 1
     fb0:	c0 e1       	ldi	r28, 0x10	; 16
     fb2:	d0 e0       	ldi	r29, 0x00	; 0
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <calc_bsel+0x32>
     fb6:	d5 95       	asr	r29
     fb8:	c7 95       	ror	r28
     fba:	2a 95       	dec	r18
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <calc_bsel+0x2e>
  if ( scale < 0 ) {
     fbe:	00 23       	and	r16, r16
     fc0:	0c f0       	brlt	.+2      	; 0xfc4 <calc_bsel+0x3c>
     fc2:	42 c0       	rjmp	.+132    	; 0x1048 <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
     fc4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__floatunsisf>
     fc8:	6b 01       	movw	r12, r22
     fca:	7c 01       	movw	r14, r24
     fcc:	dd 27       	eor	r29, r29
     fce:	be 01       	movw	r22, r28
     fd0:	dd 0f       	add	r29, r29
     fd2:	88 0b       	sbc	r24, r24
     fd4:	99 0b       	sbc	r25, r25
     fd6:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     fda:	2b 01       	movw	r4, r22
     fdc:	3c 01       	movw	r6, r24
     fde:	c5 01       	movw	r24, r10
     fe0:	b4 01       	movw	r22, r8
     fe2:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__floatunsisf>
     fe6:	9b 01       	movw	r18, r22
     fe8:	ac 01       	movw	r20, r24
     fea:	c3 01       	movw	r24, r6
     fec:	b2 01       	movw	r22, r4
     fee:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     ff2:	9b 01       	movw	r18, r22
     ff4:	ac 01       	movw	r20, r24
     ff6:	c7 01       	movw	r24, r14
     ff8:	b6 01       	movw	r22, r12
     ffa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__divsf3>
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e8       	ldi	r20, 0x80	; 128
    1004:	5f e3       	ldi	r21, 0x3F	; 63
    1006:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
    100a:	6b 01       	movw	r12, r22
    100c:	7c 01       	movw	r14, r24
    100e:	11 27       	eor	r17, r17
    1010:	01 95       	neg	r16
    1012:	0c f4       	brge	.+2      	; 0x1016 <calc_bsel+0x8e>
    1014:	10 95       	com	r17
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <calc_bsel+0x98>
    101c:	66 0f       	add	r22, r22
    101e:	77 1f       	adc	r23, r23
    1020:	0a 95       	dec	r16
    1022:	e2 f7       	brpl	.-8      	; 0x101c <calc_bsel+0x94>
    1024:	07 2e       	mov	r0, r23
    1026:	00 0c       	add	r0, r0
    1028:	88 0b       	sbc	r24, r24
    102a:	99 0b       	sbc	r25, r25
    102c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
    103c:	0e 94 a7 0b 	call	0x174e	; 0x174e <round>
    1040:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fixunssfsi>
    1044:	cb 01       	movw	r24, r22
    1046:	3e c0       	rjmp	.+124    	; 0x10c4 <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    1048:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__floatunsisf>
    104c:	6b 01       	movw	r12, r22
    104e:	7c 01       	movw	r14, r24
    1050:	be 01       	movw	r22, r28
    1052:	77 27       	eor	r23, r23
    1054:	07 2e       	mov	r0, r23
    1056:	00 0c       	add	r0, r0
    1058:	88 0b       	sbc	r24, r24
    105a:	99 0b       	sbc	r25, r25
    105c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
    1060:	2b 01       	movw	r4, r22
    1062:	3c 01       	movw	r6, r24
    1064:	c5 01       	movw	r24, r10
    1066:	b4 01       	movw	r22, r8
    1068:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__floatunsisf>
    106c:	9b 01       	movw	r18, r22
    106e:	ac 01       	movw	r20, r24
    1070:	c3 01       	movw	r24, r6
    1072:	b2 01       	movw	r22, r4
    1074:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	c7 01       	movw	r24, r14
    107e:	b6 01       	movw	r22, r12
    1080:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__divsf3>
    1084:	6b 01       	movw	r12, r22
    1086:	7c 01       	movw	r14, r24
    1088:	61 e0       	ldi	r22, 0x01	; 1
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <calc_bsel+0x10a>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	0a 95       	dec	r16
    1094:	e2 f7       	brpl	.-8      	; 0x108e <calc_bsel+0x106>
    1096:	07 2e       	mov	r0, r23
    1098:	00 0c       	add	r0, r0
    109a:	88 0b       	sbc	r24, r24
    109c:	99 0b       	sbc	r25, r25
    109e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__divsf3>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e8       	ldi	r20, 0x80	; 128
    10b4:	5f e3       	ldi	r21, 0x3F	; 63
    10b6:	0e 94 9e 09 	call	0x133c	; 0x133c <__subsf3>
    10ba:	0e 94 a7 0b 	call	0x174e	; 0x174e <round>
    10be:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fixunssfsi>
    10c2:	cb 01       	movw	r24, r22
  }
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	5f 90       	pop	r5
    10e2:	4f 90       	pop	r4
    10e4:	08 95       	ret

000010e6 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	ef 92       	push	r14
    10f8:	0f 93       	push	r16
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	2b 01       	movw	r4, r22
    1100:	3c 01       	movw	r6, r24
    1102:	49 01       	movw	r8, r18
    1104:	5a 01       	movw	r10, r20
    1106:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    1108:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
    110a:	ed 2e       	mov	r14, r29
    110c:	0c 2f       	mov	r16, r28
    110e:	a5 01       	movw	r20, r10
    1110:	94 01       	movw	r18, r8
    1112:	c3 01       	movw	r24, r6
    1114:	b2 01       	movw	r22, r4
    1116:	0e 94 c4 07 	call	0xf88	; 0xf88 <calc_bsel>
    111a:	81 15       	cp	r24, r1
    111c:	90 41       	sbci	r25, 0x10	; 16
    111e:	18 f0       	brcs	.+6      	; 0x1126 <calc_bscale+0x40>
    1120:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    1122:	c8 30       	cpi	r28, 0x08	; 8
    1124:	91 f7       	brne	.-28     	; 0x110a <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
    1126:	8c 2f       	mov	r24, r28
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	0f 91       	pop	r16
    112e:	ef 90       	pop	r14
    1130:	bf 90       	pop	r11
    1132:	af 90       	pop	r10
    1134:	9f 90       	pop	r9
    1136:	8f 90       	pop	r8
    1138:	7f 90       	pop	r7
    113a:	6f 90       	pop	r6
    113c:	5f 90       	pop	r5
    113e:	4f 90       	pop	r4
    1140:	08 95       	ret

00001142 <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    1142:	2f 92       	push	r2
    1144:	3f 92       	push	r3
    1146:	4f 92       	push	r4
    1148:	5f 92       	push	r5
    114a:	6f 92       	push	r6
    114c:	7f 92       	push	r7
    114e:	8f 92       	push	r8
    1150:	9f 92       	push	r9
    1152:	af 92       	push	r10
    1154:	bf 92       	push	r11
    1156:	cf 92       	push	r12
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
    1166:	1b 01       	movw	r2, r22
    1168:	29 01       	movw	r4, r18
    116a:	3a 01       	movw	r6, r20
    116c:	47 01       	movw	r8, r14
    116e:	58 01       	movw	r10, r16
    1170:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
    1172:	0c 2d       	mov	r16, r12
    1174:	a5 01       	movw	r20, r10
    1176:	94 01       	movw	r18, r8
    1178:	c3 01       	movw	r24, r6
    117a:	b2 01       	movw	r22, r4
    117c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <calc_bscale>
    1180:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
    1182:	08 2f       	mov	r16, r24
    1184:	a5 01       	movw	r20, r10
    1186:	94 01       	movw	r18, r8
    1188:	c3 01       	movw	r24, r6
    118a:	b2 01       	movw	r22, r4
    118c:	0e 94 c4 07 	call	0xf88	; 0xf88 <calc_bsel>
    1190:	f8 2e       	mov	r15, r24
    1192:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	b1 01       	movw	r22, r2
    1198:	ce 01       	movw	r24, r28
    119a:	0e 94 02 09 	call	0x1204	; 0x1204 <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
    119e:	e8 81       	ld	r30, Y
    11a0:	f9 81       	ldd	r31, Y+1	; 0x01
    11a2:	83 e0       	ldi	r24, 0x03	; 3
    11a4:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
    11a6:	e8 81       	ld	r30, Y
    11a8:	f9 81       	ldd	r31, Y+1	; 0x01
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	80 61       	ori	r24, 0x10	; 16
    11ae:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
    11b0:	e8 81       	ld	r30, Y
    11b2:	f9 81       	ldd	r31, Y+1	; 0x01
    11b4:	84 81       	ldd	r24, Z+4	; 0x04
    11b6:	88 60       	ori	r24, 0x08	; 8
    11b8:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
    11ba:	e8 81       	ld	r30, Y
    11bc:	f9 81       	ldd	r31, Y+1	; 0x01
    11be:	83 81       	ldd	r24, Z+3	; 0x03
    11c0:	8f 7c       	andi	r24, 0xCF	; 207
    11c2:	80 61       	ori	r24, 0x10	; 16
    11c4:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
    11c6:	e8 81       	ld	r30, Y
    11c8:	f9 81       	ldd	r31, Y+1	; 0x01
    11ca:	f6 82       	std	Z+6, r15	; 0x06
    11cc:	e8 81       	ld	r30, Y
    11ce:	f9 81       	ldd	r31, Y+1	; 0x01
    11d0:	12 95       	swap	r17
    11d2:	10 7f       	andi	r17, 0xF0	; 240
    11d4:	10 2b       	or	r17, r16
    11d6:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
    11d8:	88 81       	ld	r24, Y
    11da:	99 81       	ldd	r25, Y+1	; 0x01
    11dc:	0e 94 78 07 	call	0xef0	; 0xef0 <set_usart_txrx_direction>
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ff 90       	pop	r15
    11ea:	ef 90       	pop	r14
    11ec:	cf 90       	pop	r12
    11ee:	bf 90       	pop	r11
    11f0:	af 90       	pop	r10
    11f2:	9f 90       	pop	r9
    11f4:	8f 90       	pop	r8
    11f6:	7f 90       	pop	r7
    11f8:	6f 90       	pop	r6
    11fa:	5f 90       	pop	r5
    11fc:	4f 90       	pop	r4
    11fe:	3f 90       	pop	r3
    1200:	2f 90       	pop	r2
    1202:	08 95       	ret

00001204 <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
    1204:	fc 01       	movw	r30, r24
    1206:	60 83       	st	Z, r22
    1208:	71 83       	std	Z+1, r23	; 0x01
    120a:	42 83       	std	Z+2, r20	; 0x02
    120c:	ec 5f       	subi	r30, 0xFC	; 252
    120e:	fd 4f       	sbci	r31, 0xFD	; 253
    1210:	10 82       	st	Z, r1
    1212:	31 97       	sbiw	r30, 0x01	; 1
    1214:	10 82       	st	Z, r1
    1216:	33 96       	adiw	r30, 0x03	; 3
    1218:	10 82       	st	Z, r1
    121a:	31 97       	sbiw	r30, 0x01	; 1
    121c:	10 82       	st	Z, r1
    121e:	08 95       	ret

00001220 <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1220:	fc 01       	movw	r30, r24
    1222:	eb 5f       	subi	r30, 0xFB	; 251
    1224:	fd 4f       	sbci	r31, 0xFD	; 253
    1226:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    1228:	31 96       	adiw	r30, 0x01	; 1
    122a:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	92 0f       	add	r25, r18
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	93 13       	cpse	r25, r19
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <USART_TXBuffer_FreeSpace+0x18>
    1236:	80 e0       	ldi	r24, 0x00	; 0
}
    1238:	08 95       	ret

0000123a <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    1240:	dc 01       	movw	r26, r24
    1242:	ab 5f       	subi	r26, 0xFB	; 251
    1244:	bd 4f       	sbci	r27, 0xFD	; 253
    1246:	9c 91       	ld	r25, X
    1248:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	92 13       	cpse	r25, r18
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <USART_TXBuffer_PutByte+0x1c>
    1254:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
    1256:	92 17       	cp	r25, r18
    1258:	b1 f0       	breq	.+44     	; 0x1286 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    125a:	ef 01       	movw	r28, r30
    125c:	cb 5f       	subi	r28, 0xFB	; 251
    125e:	dd 4f       	sbci	r29, 0xFD	; 253
    1260:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
    1262:	df 01       	movw	r26, r30
    1264:	a9 0f       	add	r26, r25
    1266:	b1 1d       	adc	r27, r1
    1268:	ad 5f       	subi	r26, 0xFD	; 253
    126a:	be 4f       	sbci	r27, 0xFE	; 254
    126c:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    126e:	9f 5f       	subi	r25, 0xFF	; 255
    1270:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    1272:	a0 81       	ld	r26, Z
    1274:	b1 81       	ldd	r27, Z+1	; 0x01
    1276:	13 96       	adiw	r26, 0x03	; 3
    1278:	9c 91       	ld	r25, X
    127a:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    127c:	9c 7f       	andi	r25, 0xFC	; 252
    127e:	22 81       	ldd	r18, Z+2	; 0x02
    1280:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    1282:	13 96       	adiw	r26, 0x03	; 3
    1284:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	08 95       	ret

0000128c <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    128c:	fc 01       	movw	r30, r24
    128e:	ed 5f       	subi	r30, 0xFD	; 253
    1290:	fd 4f       	sbci	r31, 0xFD	; 253
    1292:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    1294:	31 96       	adiw	r30, 0x01	; 1
    1296:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	29 13       	cpse	r18, r25
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <USART_RXBufferData_Available+0x14>
    129e:	80 e0       	ldi	r24, 0x00	; 0
}
    12a0:	08 95       	ret

000012a2 <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    12a2:	fc 01       	movw	r30, r24
    12a4:	ec 5f       	subi	r30, 0xFC	; 252
    12a6:	fd 4f       	sbci	r31, 0xFD	; 253
    12a8:	20 81       	ld	r18, Z
    12aa:	dc 01       	movw	r26, r24
    12ac:	a2 0f       	add	r26, r18
    12ae:	b1 1d       	adc	r27, r1
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    12b4:	90 81       	ld	r25, Z
    12b6:	9f 5f       	subi	r25, 0xFF	; 255
    12b8:	90 83       	st	Z, r25

	return ans;
}
    12ba:	08 95       	ret

000012bc <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    12bc:	fc 01       	movw	r30, r24
    12be:	ed 5f       	subi	r30, 0xFD	; 253
    12c0:	fd 4f       	sbci	r31, 0xFD	; 253
    12c2:	20 81       	ld	r18, Z
    12c4:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    12c6:	31 96       	adiw	r30, 0x01	; 1
    12c8:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    12ca:	dc 01       	movw	r26, r24
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    12d4:	23 17       	cp	r18, r19
    12d6:	59 f0       	breq	.+22     	; 0x12ee <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    12d8:	fc 01       	movw	r30, r24
    12da:	ed 5f       	subi	r30, 0xFD	; 253
    12dc:	fd 4f       	sbci	r31, 0xFD	; 253
    12de:	30 81       	ld	r19, Z
    12e0:	a3 0f       	add	r26, r19
    12e2:	b1 1d       	adc	r27, r1
    12e4:	13 96       	adiw	r26, 0x03	; 3
    12e6:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    12e8:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    12f0:	08 95       	ret

000012f2 <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    12f6:	fc 01       	movw	r30, r24
    12f8:	ea 5f       	subi	r30, 0xFA	; 250
    12fa:	fd 4f       	sbci	r31, 0xFD	; 253
    12fc:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    12fe:	31 97       	sbiw	r30, 0x01	; 1
    1300:	20 81       	ld	r18, Z
    1302:	32 13       	cpse	r19, r18
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    1306:	dc 01       	movw	r26, r24
    1308:	ed 91       	ld	r30, X+
    130a:	fc 91       	ld	r31, X
    130c:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    130e:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    1310:	83 83       	std	Z+3, r24	; 0x03
    1312:	11 c0       	rjmp	.+34     	; 0x1336 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    1314:	fc 01       	movw	r30, r24
    1316:	ea 5f       	subi	r30, 0xFA	; 250
    1318:	fd 4f       	sbci	r31, 0xFD	; 253
    131a:	20 81       	ld	r18, Z
    131c:	dc 01       	movw	r26, r24
    131e:	a2 0f       	add	r26, r18
    1320:	b1 1d       	adc	r27, r1
    1322:	ad 5f       	subi	r26, 0xFD	; 253
    1324:	be 4f       	sbci	r27, 0xFE	; 254
    1326:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    1328:	ec 01       	movw	r28, r24
    132a:	a8 81       	ld	r26, Y
    132c:	b9 81       	ldd	r27, Y+1	; 0x01
    132e:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    1330:	80 81       	ld	r24, Z
    1332:	8f 5f       	subi	r24, 0xFF	; 255
    1334:	80 83       	st	Z, r24
	}
}
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret

0000133c <__subsf3>:
    133c:	50 58       	subi	r21, 0x80	; 128

0000133e <__addsf3>:
    133e:	bb 27       	eor	r27, r27
    1340:	aa 27       	eor	r26, r26
    1342:	0e 94 b6 09 	call	0x136c	; 0x136c <__addsf3x>
    1346:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_round>
    134a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscA>
    134e:	38 f0       	brcs	.+14     	; 0x135e <__addsf3+0x20>
    1350:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscB>
    1354:	20 f0       	brcs	.+8      	; 0x135e <__addsf3+0x20>
    1356:	39 f4       	brne	.+14     	; 0x1366 <__addsf3+0x28>
    1358:	9f 3f       	cpi	r25, 0xFF	; 255
    135a:	19 f4       	brne	.+6      	; 0x1362 <__addsf3+0x24>
    135c:	26 f4       	brtc	.+8      	; 0x1366 <__addsf3+0x28>
    135e:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_nan>
    1362:	0e f4       	brtc	.+2      	; 0x1366 <__addsf3+0x28>
    1364:	e0 95       	com	r30
    1366:	e7 fb       	bst	r30, 7
    1368:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_inf>

0000136c <__addsf3x>:
    136c:	e9 2f       	mov	r30, r25
    136e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_split3>
    1372:	58 f3       	brcs	.-42     	; 0x134a <__addsf3+0xc>
    1374:	ba 17       	cp	r27, r26
    1376:	62 07       	cpc	r22, r18
    1378:	73 07       	cpc	r23, r19
    137a:	84 07       	cpc	r24, r20
    137c:	95 07       	cpc	r25, r21
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__addsf3x+0x1c>
    1380:	79 f4       	brne	.+30     	; 0x13a0 <__addsf3x+0x34>
    1382:	a6 f5       	brtc	.+104    	; 0x13ec <__addsf3x+0x80>
    1384:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__fp_zero>
    1388:	0e f4       	brtc	.+2      	; 0x138c <__addsf3x+0x20>
    138a:	e0 95       	com	r30
    138c:	0b 2e       	mov	r0, r27
    138e:	ba 2f       	mov	r27, r26
    1390:	a0 2d       	mov	r26, r0
    1392:	0b 01       	movw	r0, r22
    1394:	b9 01       	movw	r22, r18
    1396:	90 01       	movw	r18, r0
    1398:	0c 01       	movw	r0, r24
    139a:	ca 01       	movw	r24, r20
    139c:	a0 01       	movw	r20, r0
    139e:	11 24       	eor	r1, r1
    13a0:	ff 27       	eor	r31, r31
    13a2:	59 1b       	sub	r21, r25
    13a4:	99 f0       	breq	.+38     	; 0x13cc <__addsf3x+0x60>
    13a6:	59 3f       	cpi	r21, 0xF9	; 249
    13a8:	50 f4       	brcc	.+20     	; 0x13be <__addsf3x+0x52>
    13aa:	50 3e       	cpi	r21, 0xE0	; 224
    13ac:	68 f1       	brcs	.+90     	; 0x1408 <__addsf3x+0x9c>
    13ae:	1a 16       	cp	r1, r26
    13b0:	f0 40       	sbci	r31, 0x00	; 0
    13b2:	a2 2f       	mov	r26, r18
    13b4:	23 2f       	mov	r18, r19
    13b6:	34 2f       	mov	r19, r20
    13b8:	44 27       	eor	r20, r20
    13ba:	58 5f       	subi	r21, 0xF8	; 248
    13bc:	f3 cf       	rjmp	.-26     	; 0x13a4 <__addsf3x+0x38>
    13be:	46 95       	lsr	r20
    13c0:	37 95       	ror	r19
    13c2:	27 95       	ror	r18
    13c4:	a7 95       	ror	r26
    13c6:	f0 40       	sbci	r31, 0x00	; 0
    13c8:	53 95       	inc	r21
    13ca:	c9 f7       	brne	.-14     	; 0x13be <__addsf3x+0x52>
    13cc:	7e f4       	brtc	.+30     	; 0x13ec <__addsf3x+0x80>
    13ce:	1f 16       	cp	r1, r31
    13d0:	ba 0b       	sbc	r27, r26
    13d2:	62 0b       	sbc	r22, r18
    13d4:	73 0b       	sbc	r23, r19
    13d6:	84 0b       	sbc	r24, r20
    13d8:	ba f0       	brmi	.+46     	; 0x1408 <__addsf3x+0x9c>
    13da:	91 50       	subi	r25, 0x01	; 1
    13dc:	a1 f0       	breq	.+40     	; 0x1406 <__addsf3x+0x9a>
    13de:	ff 0f       	add	r31, r31
    13e0:	bb 1f       	adc	r27, r27
    13e2:	66 1f       	adc	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	c2 f7       	brpl	.-16     	; 0x13da <__addsf3x+0x6e>
    13ea:	0e c0       	rjmp	.+28     	; 0x1408 <__addsf3x+0x9c>
    13ec:	ba 0f       	add	r27, r26
    13ee:	62 1f       	adc	r22, r18
    13f0:	73 1f       	adc	r23, r19
    13f2:	84 1f       	adc	r24, r20
    13f4:	48 f4       	brcc	.+18     	; 0x1408 <__addsf3x+0x9c>
    13f6:	87 95       	ror	r24
    13f8:	77 95       	ror	r23
    13fa:	67 95       	ror	r22
    13fc:	b7 95       	ror	r27
    13fe:	f7 95       	ror	r31
    1400:	9e 3f       	cpi	r25, 0xFE	; 254
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__addsf3x+0x9a>
    1404:	b0 cf       	rjmp	.-160    	; 0x1366 <__addsf3+0x28>
    1406:	93 95       	inc	r25
    1408:	88 0f       	add	r24, r24
    140a:	08 f0       	brcs	.+2      	; 0x140e <__addsf3x+0xa2>
    140c:	99 27       	eor	r25, r25
    140e:	ee 0f       	add	r30, r30
    1410:	97 95       	ror	r25
    1412:	87 95       	ror	r24
    1414:	08 95       	ret

00001416 <__divsf3>:
    1416:	0e 94 1f 0a 	call	0x143e	; 0x143e <__divsf3x>
    141a:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_round>
    141e:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscB>
    1422:	58 f0       	brcs	.+22     	; 0x143a <__divsf3+0x24>
    1424:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscA>
    1428:	40 f0       	brcs	.+16     	; 0x143a <__divsf3+0x24>
    142a:	29 f4       	brne	.+10     	; 0x1436 <__divsf3+0x20>
    142c:	5f 3f       	cpi	r21, 0xFF	; 255
    142e:	29 f0       	breq	.+10     	; 0x143a <__divsf3+0x24>
    1430:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_inf>
    1434:	51 11       	cpse	r21, r1
    1436:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_szero>
    143a:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_nan>

0000143e <__divsf3x>:
    143e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_split3>
    1442:	68 f3       	brcs	.-38     	; 0x141e <__divsf3+0x8>

00001444 <__divsf3_pse>:
    1444:	99 23       	and	r25, r25
    1446:	b1 f3       	breq	.-20     	; 0x1434 <__divsf3+0x1e>
    1448:	55 23       	and	r21, r21
    144a:	91 f3       	breq	.-28     	; 0x1430 <__divsf3+0x1a>
    144c:	95 1b       	sub	r25, r21
    144e:	55 0b       	sbc	r21, r21
    1450:	bb 27       	eor	r27, r27
    1452:	aa 27       	eor	r26, r26
    1454:	62 17       	cp	r22, r18
    1456:	73 07       	cpc	r23, r19
    1458:	84 07       	cpc	r24, r20
    145a:	38 f0       	brcs	.+14     	; 0x146a <__divsf3_pse+0x26>
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	44 1f       	adc	r20, r20
    1466:	aa 1f       	adc	r26, r26
    1468:	a9 f3       	breq	.-22     	; 0x1454 <__divsf3_pse+0x10>
    146a:	35 d0       	rcall	.+106    	; 0x14d6 <__divsf3_pse+0x92>
    146c:	0e 2e       	mov	r0, r30
    146e:	3a f0       	brmi	.+14     	; 0x147e <__divsf3_pse+0x3a>
    1470:	e0 e8       	ldi	r30, 0x80	; 128
    1472:	32 d0       	rcall	.+100    	; 0x14d8 <__divsf3_pse+0x94>
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	e6 95       	lsr	r30
    147a:	00 1c       	adc	r0, r0
    147c:	ca f7       	brpl	.-14     	; 0x1470 <__divsf3_pse+0x2c>
    147e:	2b d0       	rcall	.+86     	; 0x14d6 <__divsf3_pse+0x92>
    1480:	fe 2f       	mov	r31, r30
    1482:	29 d0       	rcall	.+82     	; 0x14d6 <__divsf3_pse+0x92>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	bb 1f       	adc	r27, r27
    148c:	26 17       	cp	r18, r22
    148e:	37 07       	cpc	r19, r23
    1490:	48 07       	cpc	r20, r24
    1492:	ab 07       	cpc	r26, r27
    1494:	b0 e8       	ldi	r27, 0x80	; 128
    1496:	09 f0       	breq	.+2      	; 0x149a <__divsf3_pse+0x56>
    1498:	bb 0b       	sbc	r27, r27
    149a:	80 2d       	mov	r24, r0
    149c:	bf 01       	movw	r22, r30
    149e:	ff 27       	eor	r31, r31
    14a0:	93 58       	subi	r25, 0x83	; 131
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	3a f0       	brmi	.+14     	; 0x14b4 <__divsf3_pse+0x70>
    14a6:	9e 3f       	cpi	r25, 0xFE	; 254
    14a8:	51 05       	cpc	r21, r1
    14aa:	78 f0       	brcs	.+30     	; 0x14ca <__divsf3_pse+0x86>
    14ac:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_inf>
    14b0:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_szero>
    14b4:	5f 3f       	cpi	r21, 0xFF	; 255
    14b6:	e4 f3       	brlt	.-8      	; 0x14b0 <__divsf3_pse+0x6c>
    14b8:	98 3e       	cpi	r25, 0xE8	; 232
    14ba:	d4 f3       	brlt	.-12     	; 0x14b0 <__divsf3_pse+0x6c>
    14bc:	86 95       	lsr	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	b7 95       	ror	r27
    14c4:	f7 95       	ror	r31
    14c6:	9f 5f       	subi	r25, 0xFF	; 255
    14c8:	c9 f7       	brne	.-14     	; 0x14bc <__divsf3_pse+0x78>
    14ca:	88 0f       	add	r24, r24
    14cc:	91 1d       	adc	r25, r1
    14ce:	96 95       	lsr	r25
    14d0:	87 95       	ror	r24
    14d2:	97 f9       	bld	r25, 7
    14d4:	08 95       	ret
    14d6:	e1 e0       	ldi	r30, 0x01	; 1
    14d8:	66 0f       	add	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	bb 1f       	adc	r27, r27
    14e0:	62 17       	cp	r22, r18
    14e2:	73 07       	cpc	r23, r19
    14e4:	84 07       	cpc	r24, r20
    14e6:	ba 07       	cpc	r27, r26
    14e8:	20 f0       	brcs	.+8      	; 0x14f2 <__divsf3_pse+0xae>
    14ea:	62 1b       	sub	r22, r18
    14ec:	73 0b       	sbc	r23, r19
    14ee:	84 0b       	sbc	r24, r20
    14f0:	ba 0b       	sbc	r27, r26
    14f2:	ee 1f       	adc	r30, r30
    14f4:	88 f7       	brcc	.-30     	; 0x14d8 <__divsf3_pse+0x94>
    14f6:	e0 95       	com	r30
    14f8:	08 95       	ret

000014fa <__fixunssfsi>:
    14fa:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_splitA>
    14fe:	88 f0       	brcs	.+34     	; 0x1522 <__fixunssfsi+0x28>
    1500:	9f 57       	subi	r25, 0x7F	; 127
    1502:	98 f0       	brcs	.+38     	; 0x152a <__fixunssfsi+0x30>
    1504:	b9 2f       	mov	r27, r25
    1506:	99 27       	eor	r25, r25
    1508:	b7 51       	subi	r27, 0x17	; 23
    150a:	b0 f0       	brcs	.+44     	; 0x1538 <__fixunssfsi+0x3e>
    150c:	e1 f0       	breq	.+56     	; 0x1546 <__fixunssfsi+0x4c>
    150e:	66 0f       	add	r22, r22
    1510:	77 1f       	adc	r23, r23
    1512:	88 1f       	adc	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	1a f0       	brmi	.+6      	; 0x151e <__fixunssfsi+0x24>
    1518:	ba 95       	dec	r27
    151a:	c9 f7       	brne	.-14     	; 0x150e <__fixunssfsi+0x14>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <__fixunssfsi+0x4c>
    151e:	b1 30       	cpi	r27, 0x01	; 1
    1520:	91 f0       	breq	.+36     	; 0x1546 <__fixunssfsi+0x4c>
    1522:	0e 94 33 0b 	call	0x1666	; 0x1666 <__fp_zero>
    1526:	b1 e0       	ldi	r27, 0x01	; 1
    1528:	08 95       	ret
    152a:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__fp_zero>
    152e:	67 2f       	mov	r22, r23
    1530:	78 2f       	mov	r23, r24
    1532:	88 27       	eor	r24, r24
    1534:	b8 5f       	subi	r27, 0xF8	; 248
    1536:	39 f0       	breq	.+14     	; 0x1546 <__fixunssfsi+0x4c>
    1538:	b9 3f       	cpi	r27, 0xF9	; 249
    153a:	cc f3       	brlt	.-14     	; 0x152e <__fixunssfsi+0x34>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b3 95       	inc	r27
    1544:	d9 f7       	brne	.-10     	; 0x153c <__fixunssfsi+0x42>
    1546:	3e f4       	brtc	.+14     	; 0x1556 <__fixunssfsi+0x5c>
    1548:	90 95       	com	r25
    154a:	80 95       	com	r24
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__floatunsisf>:
    1558:	e8 94       	clt
    155a:	09 c0       	rjmp	.+18     	; 0x156e <__floatsisf+0x12>

0000155c <__floatsisf>:
    155c:	97 fb       	bst	r25, 7
    155e:	3e f4       	brtc	.+14     	; 0x156e <__floatsisf+0x12>
    1560:	90 95       	com	r25
    1562:	80 95       	com	r24
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	99 23       	and	r25, r25
    1570:	a9 f0       	breq	.+42     	; 0x159c <__floatsisf+0x40>
    1572:	f9 2f       	mov	r31, r25
    1574:	96 e9       	ldi	r25, 0x96	; 150
    1576:	bb 27       	eor	r27, r27
    1578:	93 95       	inc	r25
    157a:	f6 95       	lsr	r31
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	f1 11       	cpse	r31, r1
    1586:	f8 cf       	rjmp	.-16     	; 0x1578 <__floatsisf+0x1c>
    1588:	fa f4       	brpl	.+62     	; 0x15c8 <__floatsisf+0x6c>
    158a:	bb 0f       	add	r27, r27
    158c:	11 f4       	brne	.+4      	; 0x1592 <__floatsisf+0x36>
    158e:	60 ff       	sbrs	r22, 0
    1590:	1b c0       	rjmp	.+54     	; 0x15c8 <__floatsisf+0x6c>
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <__floatsisf+0x6c>
    159c:	88 23       	and	r24, r24
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__floatsisf+0x48>
    15a0:	96 e9       	ldi	r25, 0x96	; 150
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <__floatsisf+0x6a>
    15a4:	77 23       	and	r23, r23
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <__floatsisf+0x54>
    15a8:	9e e8       	ldi	r25, 0x8E	; 142
    15aa:	87 2f       	mov	r24, r23
    15ac:	76 2f       	mov	r23, r22
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <__floatsisf+0x5e>
    15b0:	66 23       	and	r22, r22
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <__floatsisf+0x74>
    15b4:	96 e8       	ldi	r25, 0x86	; 134
    15b6:	86 2f       	mov	r24, r22
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	2a f0       	brmi	.+10     	; 0x15c8 <__floatsisf+0x6c>
    15be:	9a 95       	dec	r25
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	da f7       	brpl	.-10     	; 0x15be <__floatsisf+0x62>
    15c8:	88 0f       	add	r24, r24
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	97 f9       	bld	r25, 7
    15d0:	08 95       	ret

000015d2 <__fp_inf>:
    15d2:	97 f9       	bld	r25, 7
    15d4:	9f 67       	ori	r25, 0x7F	; 127
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	08 95       	ret

000015de <__fp_nan>:
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	80 ec       	ldi	r24, 0xC0	; 192
    15e2:	08 95       	ret

000015e4 <__fp_pscA>:
    15e4:	00 24       	eor	r0, r0
    15e6:	0a 94       	dec	r0
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	18 06       	cpc	r1, r24
    15ee:	09 06       	cpc	r0, r25
    15f0:	08 95       	ret

000015f2 <__fp_pscB>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	05 06       	cpc	r0, r21
    15fe:	08 95       	ret

00001600 <__fp_round>:
    1600:	09 2e       	mov	r0, r25
    1602:	03 94       	inc	r0
    1604:	00 0c       	add	r0, r0
    1606:	11 f4       	brne	.+4      	; 0x160c <__fp_round+0xc>
    1608:	88 23       	and	r24, r24
    160a:	52 f0       	brmi	.+20     	; 0x1620 <__fp_round+0x20>
    160c:	bb 0f       	add	r27, r27
    160e:	40 f4       	brcc	.+16     	; 0x1620 <__fp_round+0x20>
    1610:	bf 2b       	or	r27, r31
    1612:	11 f4       	brne	.+4      	; 0x1618 <__fp_round+0x18>
    1614:	60 ff       	sbrs	r22, 0
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__fp_round+0x20>
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__fp_split3>:
    1622:	57 fd       	sbrc	r21, 7
    1624:	90 58       	subi	r25, 0x80	; 128
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	59 f0       	breq	.+22     	; 0x1642 <__fp_splitA+0x10>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	71 f0       	breq	.+28     	; 0x164c <__fp_splitA+0x1a>
    1630:	47 95       	ror	r20

00001632 <__fp_splitA>:
    1632:	88 0f       	add	r24, r24
    1634:	97 fb       	bst	r25, 7
    1636:	99 1f       	adc	r25, r25
    1638:	61 f0       	breq	.+24     	; 0x1652 <__fp_splitA+0x20>
    163a:	9f 3f       	cpi	r25, 0xFF	; 255
    163c:	79 f0       	breq	.+30     	; 0x165c <__fp_splitA+0x2a>
    163e:	87 95       	ror	r24
    1640:	08 95       	ret
    1642:	12 16       	cp	r1, r18
    1644:	13 06       	cpc	r1, r19
    1646:	14 06       	cpc	r1, r20
    1648:	55 1f       	adc	r21, r21
    164a:	f2 cf       	rjmp	.-28     	; 0x1630 <__fp_split3+0xe>
    164c:	46 95       	lsr	r20
    164e:	f1 df       	rcall	.-30     	; 0x1632 <__fp_splitA>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <__fp_splitA+0x30>
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	99 1f       	adc	r25, r25
    165a:	f1 cf       	rjmp	.-30     	; 0x163e <__fp_splitA+0xc>
    165c:	86 95       	lsr	r24
    165e:	71 05       	cpc	r23, r1
    1660:	61 05       	cpc	r22, r1
    1662:	08 94       	sec
    1664:	08 95       	ret

00001666 <__fp_zero>:
    1666:	e8 94       	clt

00001668 <__fp_szero>:
    1668:	bb 27       	eor	r27, r27
    166a:	66 27       	eor	r22, r22
    166c:	77 27       	eor	r23, r23
    166e:	cb 01       	movw	r24, r22
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <__mulsf3>:
    1674:	0e 94 4d 0b 	call	0x169a	; 0x169a <__mulsf3x>
    1678:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_round>
    167c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_pscA>
    1680:	38 f0       	brcs	.+14     	; 0x1690 <__mulsf3+0x1c>
    1682:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__fp_pscB>
    1686:	20 f0       	brcs	.+8      	; 0x1690 <__mulsf3+0x1c>
    1688:	95 23       	and	r25, r21
    168a:	11 f0       	breq	.+4      	; 0x1690 <__mulsf3+0x1c>
    168c:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_inf>
    1690:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__fp_nan>
    1694:	11 24       	eor	r1, r1
    1696:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_szero>

0000169a <__mulsf3x>:
    169a:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_split3>
    169e:	70 f3       	brcs	.-36     	; 0x167c <__mulsf3+0x8>

000016a0 <__mulsf3_pse>:
    16a0:	95 9f       	mul	r25, r21
    16a2:	c1 f3       	breq	.-16     	; 0x1694 <__mulsf3+0x20>
    16a4:	95 0f       	add	r25, r21
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	55 1f       	adc	r21, r21
    16aa:	62 9f       	mul	r22, r18
    16ac:	f0 01       	movw	r30, r0
    16ae:	72 9f       	mul	r23, r18
    16b0:	bb 27       	eor	r27, r27
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	63 9f       	mul	r22, r19
    16b8:	aa 27       	eor	r26, r26
    16ba:	f0 0d       	add	r31, r0
    16bc:	b1 1d       	adc	r27, r1
    16be:	aa 1f       	adc	r26, r26
    16c0:	64 9f       	mul	r22, r20
    16c2:	66 27       	eor	r22, r22
    16c4:	b0 0d       	add	r27, r0
    16c6:	a1 1d       	adc	r26, r1
    16c8:	66 1f       	adc	r22, r22
    16ca:	82 9f       	mul	r24, r18
    16cc:	22 27       	eor	r18, r18
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	73 9f       	mul	r23, r19
    16d6:	b0 0d       	add	r27, r0
    16d8:	a1 1d       	adc	r26, r1
    16da:	62 1f       	adc	r22, r18
    16dc:	83 9f       	mul	r24, r19
    16de:	a0 0d       	add	r26, r0
    16e0:	61 1d       	adc	r22, r1
    16e2:	22 1f       	adc	r18, r18
    16e4:	74 9f       	mul	r23, r20
    16e6:	33 27       	eor	r19, r19
    16e8:	a0 0d       	add	r26, r0
    16ea:	61 1d       	adc	r22, r1
    16ec:	23 1f       	adc	r18, r19
    16ee:	84 9f       	mul	r24, r20
    16f0:	60 0d       	add	r22, r0
    16f2:	21 1d       	adc	r18, r1
    16f4:	82 2f       	mov	r24, r18
    16f6:	76 2f       	mov	r23, r22
    16f8:	6a 2f       	mov	r22, r26
    16fa:	11 24       	eor	r1, r1
    16fc:	9f 57       	subi	r25, 0x7F	; 127
    16fe:	50 40       	sbci	r21, 0x00	; 0
    1700:	9a f0       	brmi	.+38     	; 0x1728 <__mulsf3_pse+0x88>
    1702:	f1 f0       	breq	.+60     	; 0x1740 <__mulsf3_pse+0xa0>
    1704:	88 23       	and	r24, r24
    1706:	4a f0       	brmi	.+18     	; 0x171a <__mulsf3_pse+0x7a>
    1708:	ee 0f       	add	r30, r30
    170a:	ff 1f       	adc	r31, r31
    170c:	bb 1f       	adc	r27, r27
    170e:	66 1f       	adc	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__mulsf3_pse+0x64>
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	51 05       	cpc	r21, r1
    171e:	80 f0       	brcs	.+32     	; 0x1740 <__mulsf3_pse+0xa0>
    1720:	0c 94 e9 0a 	jmp	0x15d2	; 0x15d2 <__fp_inf>
    1724:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_szero>
    1728:	5f 3f       	cpi	r21, 0xFF	; 255
    172a:	e4 f3       	brlt	.-8      	; 0x1724 <__mulsf3_pse+0x84>
    172c:	98 3e       	cpi	r25, 0xE8	; 232
    172e:	d4 f3       	brlt	.-12     	; 0x1724 <__mulsf3_pse+0x84>
    1730:	86 95       	lsr	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	e7 95       	ror	r30
    173c:	9f 5f       	subi	r25, 0xFF	; 255
    173e:	c1 f7       	brne	.-16     	; 0x1730 <__mulsf3_pse+0x90>
    1740:	fe 2b       	or	r31, r30
    1742:	88 0f       	add	r24, r24
    1744:	91 1d       	adc	r25, r1
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret

0000174e <round>:
    174e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__fp_splitA>
    1752:	e8 f0       	brcs	.+58     	; 0x178e <round+0x40>
    1754:	9e 37       	cpi	r25, 0x7E	; 126
    1756:	e8 f0       	brcs	.+58     	; 0x1792 <round+0x44>
    1758:	96 39       	cpi	r25, 0x96	; 150
    175a:	b8 f4       	brcc	.+46     	; 0x178a <round+0x3c>
    175c:	9e 38       	cpi	r25, 0x8E	; 142
    175e:	48 f4       	brcc	.+18     	; 0x1772 <round+0x24>
    1760:	67 2f       	mov	r22, r23
    1762:	78 2f       	mov	r23, r24
    1764:	88 27       	eor	r24, r24
    1766:	98 5f       	subi	r25, 0xF8	; 248
    1768:	f9 cf       	rjmp	.-14     	; 0x175c <round+0xe>
    176a:	86 95       	lsr	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	93 95       	inc	r25
    1772:	95 39       	cpi	r25, 0x95	; 149
    1774:	d0 f3       	brcs	.-12     	; 0x176a <round+0x1c>
    1776:	b6 2f       	mov	r27, r22
    1778:	b1 70       	andi	r27, 0x01	; 1
    177a:	6b 0f       	add	r22, r27
    177c:	71 1d       	adc	r23, r1
    177e:	81 1d       	adc	r24, r1
    1780:	20 f4       	brcc	.+8      	; 0x178a <round+0x3c>
    1782:	87 95       	ror	r24
    1784:	77 95       	ror	r23
    1786:	67 95       	ror	r22
    1788:	93 95       	inc	r25
    178a:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_mintl>
    178e:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__fp_mpack>
    1792:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_szero>

00001796 <__fp_mintl>:
    1796:	88 23       	and	r24, r24
    1798:	71 f4       	brne	.+28     	; 0x17b6 <__fp_mintl+0x20>
    179a:	77 23       	and	r23, r23
    179c:	21 f0       	breq	.+8      	; 0x17a6 <__fp_mintl+0x10>
    179e:	98 50       	subi	r25, 0x08	; 8
    17a0:	87 2b       	or	r24, r23
    17a2:	76 2f       	mov	r23, r22
    17a4:	07 c0       	rjmp	.+14     	; 0x17b4 <__fp_mintl+0x1e>
    17a6:	66 23       	and	r22, r22
    17a8:	11 f4       	brne	.+4      	; 0x17ae <__fp_mintl+0x18>
    17aa:	99 27       	eor	r25, r25
    17ac:	0d c0       	rjmp	.+26     	; 0x17c8 <__fp_mintl+0x32>
    17ae:	90 51       	subi	r25, 0x10	; 16
    17b0:	86 2b       	or	r24, r22
    17b2:	70 e0       	ldi	r23, 0x00	; 0
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	2a f0       	brmi	.+10     	; 0x17c2 <__fp_mintl+0x2c>
    17b8:	9a 95       	dec	r25
    17ba:	66 0f       	add	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	88 1f       	adc	r24, r24
    17c0:	da f7       	brpl	.-10     	; 0x17b8 <__fp_mintl+0x22>
    17c2:	88 0f       	add	r24, r24
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	97 f9       	bld	r25, 7
    17ca:	08 95       	ret

000017cc <__fp_mpack>:
    17cc:	9f 3f       	cpi	r25, 0xFF	; 255
    17ce:	31 f0       	breq	.+12     	; 0x17dc <__fp_mpack_finite+0xc>

000017d0 <__fp_mpack_finite>:
    17d0:	91 50       	subi	r25, 0x01	; 1
    17d2:	20 f4       	brcc	.+8      	; 0x17dc <__fp_mpack_finite+0xc>
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	88 0f       	add	r24, r24
    17de:	91 1d       	adc	r25, r1
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	97 f9       	bld	r25, 7
    17e6:	08 95       	ret

000017e8 <__umulhisi3>:
    17e8:	a2 9f       	mul	r26, r18
    17ea:	b0 01       	movw	r22, r0
    17ec:	b3 9f       	mul	r27, r19
    17ee:	c0 01       	movw	r24, r0
    17f0:	a3 9f       	mul	r26, r19
    17f2:	70 0d       	add	r23, r0
    17f4:	81 1d       	adc	r24, r1
    17f6:	11 24       	eor	r1, r1
    17f8:	91 1d       	adc	r25, r1
    17fa:	b2 9f       	mul	r27, r18
    17fc:	70 0d       	add	r23, r0
    17fe:	81 1d       	adc	r24, r1
    1800:	11 24       	eor	r1, r1
    1802:	91 1d       	adc	r25, r1
    1804:	08 95       	ret

00001806 <malloc>:
    1806:	0f 93       	push	r16
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
    180e:	82 30       	cpi	r24, 0x02	; 2
    1810:	91 05       	cpc	r25, r1
    1812:	10 f4       	brcc	.+4      	; 0x1818 <malloc+0x12>
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	e0 91 69 23 	lds	r30, 0x2369	; 0x802369 <__flp>
    181c:	f0 91 6a 23 	lds	r31, 0x236A	; 0x80236a <__flp+0x1>
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	a0 e0       	ldi	r26, 0x00	; 0
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	30 97       	sbiw	r30, 0x00	; 0
    182a:	19 f1       	breq	.+70     	; 0x1872 <malloc+0x6c>
    182c:	40 81       	ld	r20, Z
    182e:	51 81       	ldd	r21, Z+1	; 0x01
    1830:	02 81       	ldd	r16, Z+2	; 0x02
    1832:	13 81       	ldd	r17, Z+3	; 0x03
    1834:	48 17       	cp	r20, r24
    1836:	59 07       	cpc	r21, r25
    1838:	c8 f0       	brcs	.+50     	; 0x186c <malloc+0x66>
    183a:	84 17       	cp	r24, r20
    183c:	95 07       	cpc	r25, r21
    183e:	69 f4       	brne	.+26     	; 0x185a <malloc+0x54>
    1840:	10 97       	sbiw	r26, 0x00	; 0
    1842:	31 f0       	breq	.+12     	; 0x1850 <malloc+0x4a>
    1844:	12 96       	adiw	r26, 0x02	; 2
    1846:	0c 93       	st	X, r16
    1848:	12 97       	sbiw	r26, 0x02	; 2
    184a:	13 96       	adiw	r26, 0x03	; 3
    184c:	1c 93       	st	X, r17
    184e:	27 c0       	rjmp	.+78     	; 0x189e <malloc+0x98>
    1850:	00 93 69 23 	sts	0x2369, r16	; 0x802369 <__flp>
    1854:	10 93 6a 23 	sts	0x236A, r17	; 0x80236a <__flp+0x1>
    1858:	22 c0       	rjmp	.+68     	; 0x189e <malloc+0x98>
    185a:	21 15       	cp	r18, r1
    185c:	31 05       	cpc	r19, r1
    185e:	19 f0       	breq	.+6      	; 0x1866 <malloc+0x60>
    1860:	42 17       	cp	r20, r18
    1862:	53 07       	cpc	r21, r19
    1864:	18 f4       	brcc	.+6      	; 0x186c <malloc+0x66>
    1866:	9a 01       	movw	r18, r20
    1868:	bd 01       	movw	r22, r26
    186a:	ef 01       	movw	r28, r30
    186c:	df 01       	movw	r26, r30
    186e:	f8 01       	movw	r30, r16
    1870:	db cf       	rjmp	.-74     	; 0x1828 <malloc+0x22>
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	f9 f0       	breq	.+62     	; 0x18b6 <malloc+0xb0>
    1878:	28 1b       	sub	r18, r24
    187a:	39 0b       	sbc	r19, r25
    187c:	24 30       	cpi	r18, 0x04	; 4
    187e:	31 05       	cpc	r19, r1
    1880:	80 f4       	brcc	.+32     	; 0x18a2 <malloc+0x9c>
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	9b 81       	ldd	r25, Y+3	; 0x03
    1886:	61 15       	cp	r22, r1
    1888:	71 05       	cpc	r23, r1
    188a:	21 f0       	breq	.+8      	; 0x1894 <malloc+0x8e>
    188c:	fb 01       	movw	r30, r22
    188e:	82 83       	std	Z+2, r24	; 0x02
    1890:	93 83       	std	Z+3, r25	; 0x03
    1892:	04 c0       	rjmp	.+8      	; 0x189c <malloc+0x96>
    1894:	80 93 69 23 	sts	0x2369, r24	; 0x802369 <__flp>
    1898:	90 93 6a 23 	sts	0x236A, r25	; 0x80236a <__flp+0x1>
    189c:	fe 01       	movw	r30, r28
    189e:	32 96       	adiw	r30, 0x02	; 2
    18a0:	44 c0       	rjmp	.+136    	; 0x192a <malloc+0x124>
    18a2:	fe 01       	movw	r30, r28
    18a4:	e2 0f       	add	r30, r18
    18a6:	f3 1f       	adc	r31, r19
    18a8:	81 93       	st	Z+, r24
    18aa:	91 93       	st	Z+, r25
    18ac:	22 50       	subi	r18, 0x02	; 2
    18ae:	31 09       	sbc	r19, r1
    18b0:	28 83       	st	Y, r18
    18b2:	39 83       	std	Y+1, r19	; 0x01
    18b4:	3a c0       	rjmp	.+116    	; 0x192a <malloc+0x124>
    18b6:	20 91 67 23 	lds	r18, 0x2367	; 0x802367 <__brkval>
    18ba:	30 91 68 23 	lds	r19, 0x2368	; 0x802368 <__brkval+0x1>
    18be:	23 2b       	or	r18, r19
    18c0:	41 f4       	brne	.+16     	; 0x18d2 <malloc+0xcc>
    18c2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    18c6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    18ca:	20 93 67 23 	sts	0x2367, r18	; 0x802367 <__brkval>
    18ce:	30 93 68 23 	sts	0x2368, r19	; 0x802368 <__brkval+0x1>
    18d2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    18d6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    18da:	21 15       	cp	r18, r1
    18dc:	31 05       	cpc	r19, r1
    18de:	41 f4       	brne	.+16     	; 0x18f0 <malloc+0xea>
    18e0:	2d b7       	in	r18, 0x3d	; 61
    18e2:	3e b7       	in	r19, 0x3e	; 62
    18e4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    18e8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    18ec:	24 1b       	sub	r18, r20
    18ee:	35 0b       	sbc	r19, r21
    18f0:	e0 91 67 23 	lds	r30, 0x2367	; 0x802367 <__brkval>
    18f4:	f0 91 68 23 	lds	r31, 0x2368	; 0x802368 <__brkval+0x1>
    18f8:	e2 17       	cp	r30, r18
    18fa:	f3 07       	cpc	r31, r19
    18fc:	a0 f4       	brcc	.+40     	; 0x1926 <malloc+0x120>
    18fe:	2e 1b       	sub	r18, r30
    1900:	3f 0b       	sbc	r19, r31
    1902:	28 17       	cp	r18, r24
    1904:	39 07       	cpc	r19, r25
    1906:	78 f0       	brcs	.+30     	; 0x1926 <malloc+0x120>
    1908:	ac 01       	movw	r20, r24
    190a:	4e 5f       	subi	r20, 0xFE	; 254
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	24 17       	cp	r18, r20
    1910:	35 07       	cpc	r19, r21
    1912:	48 f0       	brcs	.+18     	; 0x1926 <malloc+0x120>
    1914:	4e 0f       	add	r20, r30
    1916:	5f 1f       	adc	r21, r31
    1918:	40 93 67 23 	sts	0x2367, r20	; 0x802367 <__brkval>
    191c:	50 93 68 23 	sts	0x2368, r21	; 0x802368 <__brkval+0x1>
    1920:	81 93       	st	Z+, r24
    1922:	91 93       	st	Z+, r25
    1924:	02 c0       	rjmp	.+4      	; 0x192a <malloc+0x124>
    1926:	e0 e0       	ldi	r30, 0x00	; 0
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	cf 01       	movw	r24, r30
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <free>:
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	09 f4       	brne	.+2      	; 0x1940 <free+0xa>
    193e:	81 c0       	rjmp	.+258    	; 0x1a42 <free+0x10c>
    1940:	fc 01       	movw	r30, r24
    1942:	32 97       	sbiw	r30, 0x02	; 2
    1944:	12 82       	std	Z+2, r1	; 0x02
    1946:	13 82       	std	Z+3, r1	; 0x03
    1948:	a0 91 69 23 	lds	r26, 0x2369	; 0x802369 <__flp>
    194c:	b0 91 6a 23 	lds	r27, 0x236A	; 0x80236a <__flp+0x1>
    1950:	10 97       	sbiw	r26, 0x00	; 0
    1952:	81 f4       	brne	.+32     	; 0x1974 <free+0x3e>
    1954:	20 81       	ld	r18, Z
    1956:	31 81       	ldd	r19, Z+1	; 0x01
    1958:	82 0f       	add	r24, r18
    195a:	93 1f       	adc	r25, r19
    195c:	20 91 67 23 	lds	r18, 0x2367	; 0x802367 <__brkval>
    1960:	30 91 68 23 	lds	r19, 0x2368	; 0x802368 <__brkval+0x1>
    1964:	28 17       	cp	r18, r24
    1966:	39 07       	cpc	r19, r25
    1968:	51 f5       	brne	.+84     	; 0x19be <free+0x88>
    196a:	e0 93 67 23 	sts	0x2367, r30	; 0x802367 <__brkval>
    196e:	f0 93 68 23 	sts	0x2368, r31	; 0x802368 <__brkval+0x1>
    1972:	67 c0       	rjmp	.+206    	; 0x1a42 <free+0x10c>
    1974:	ed 01       	movw	r28, r26
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	ce 17       	cp	r28, r30
    197c:	df 07       	cpc	r29, r31
    197e:	40 f4       	brcc	.+16     	; 0x1990 <free+0x5a>
    1980:	4a 81       	ldd	r20, Y+2	; 0x02
    1982:	5b 81       	ldd	r21, Y+3	; 0x03
    1984:	9e 01       	movw	r18, r28
    1986:	41 15       	cp	r20, r1
    1988:	51 05       	cpc	r21, r1
    198a:	f1 f0       	breq	.+60     	; 0x19c8 <free+0x92>
    198c:	ea 01       	movw	r28, r20
    198e:	f5 cf       	rjmp	.-22     	; 0x197a <free+0x44>
    1990:	c2 83       	std	Z+2, r28	; 0x02
    1992:	d3 83       	std	Z+3, r29	; 0x03
    1994:	40 81       	ld	r20, Z
    1996:	51 81       	ldd	r21, Z+1	; 0x01
    1998:	84 0f       	add	r24, r20
    199a:	95 1f       	adc	r25, r21
    199c:	c8 17       	cp	r28, r24
    199e:	d9 07       	cpc	r29, r25
    19a0:	59 f4       	brne	.+22     	; 0x19b8 <free+0x82>
    19a2:	88 81       	ld	r24, Y
    19a4:	99 81       	ldd	r25, Y+1	; 0x01
    19a6:	84 0f       	add	r24, r20
    19a8:	95 1f       	adc	r25, r21
    19aa:	02 96       	adiw	r24, 0x02	; 2
    19ac:	80 83       	st	Z, r24
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	9b 81       	ldd	r25, Y+3	; 0x03
    19b4:	82 83       	std	Z+2, r24	; 0x02
    19b6:	93 83       	std	Z+3, r25	; 0x03
    19b8:	21 15       	cp	r18, r1
    19ba:	31 05       	cpc	r19, r1
    19bc:	29 f4       	brne	.+10     	; 0x19c8 <free+0x92>
    19be:	e0 93 69 23 	sts	0x2369, r30	; 0x802369 <__flp>
    19c2:	f0 93 6a 23 	sts	0x236A, r31	; 0x80236a <__flp+0x1>
    19c6:	3d c0       	rjmp	.+122    	; 0x1a42 <free+0x10c>
    19c8:	e9 01       	movw	r28, r18
    19ca:	ea 83       	std	Y+2, r30	; 0x02
    19cc:	fb 83       	std	Y+3, r31	; 0x03
    19ce:	49 91       	ld	r20, Y+
    19d0:	59 91       	ld	r21, Y+
    19d2:	c4 0f       	add	r28, r20
    19d4:	d5 1f       	adc	r29, r21
    19d6:	ec 17       	cp	r30, r28
    19d8:	fd 07       	cpc	r31, r29
    19da:	61 f4       	brne	.+24     	; 0x19f4 <free+0xbe>
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	84 0f       	add	r24, r20
    19e2:	95 1f       	adc	r25, r21
    19e4:	02 96       	adiw	r24, 0x02	; 2
    19e6:	e9 01       	movw	r28, r18
    19e8:	88 83       	st	Y, r24
    19ea:	99 83       	std	Y+1, r25	; 0x01
    19ec:	82 81       	ldd	r24, Z+2	; 0x02
    19ee:	93 81       	ldd	r25, Z+3	; 0x03
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	9b 83       	std	Y+3, r25	; 0x03
    19f4:	e0 e0       	ldi	r30, 0x00	; 0
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	12 96       	adiw	r26, 0x02	; 2
    19fa:	8d 91       	ld	r24, X+
    19fc:	9c 91       	ld	r25, X
    19fe:	13 97       	sbiw	r26, 0x03	; 3
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	19 f0       	breq	.+6      	; 0x1a0a <free+0xd4>
    1a04:	fd 01       	movw	r30, r26
    1a06:	dc 01       	movw	r26, r24
    1a08:	f7 cf       	rjmp	.-18     	; 0x19f8 <free+0xc2>
    1a0a:	8d 91       	ld	r24, X+
    1a0c:	9c 91       	ld	r25, X
    1a0e:	11 97       	sbiw	r26, 0x01	; 1
    1a10:	9d 01       	movw	r18, r26
    1a12:	2e 5f       	subi	r18, 0xFE	; 254
    1a14:	3f 4f       	sbci	r19, 0xFF	; 255
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	20 91 67 23 	lds	r18, 0x2367	; 0x802367 <__brkval>
    1a1e:	30 91 68 23 	lds	r19, 0x2368	; 0x802368 <__brkval+0x1>
    1a22:	28 17       	cp	r18, r24
    1a24:	39 07       	cpc	r19, r25
    1a26:	69 f4       	brne	.+26     	; 0x1a42 <free+0x10c>
    1a28:	30 97       	sbiw	r30, 0x00	; 0
    1a2a:	29 f4       	brne	.+10     	; 0x1a36 <free+0x100>
    1a2c:	10 92 69 23 	sts	0x2369, r1	; 0x802369 <__flp>
    1a30:	10 92 6a 23 	sts	0x236A, r1	; 0x80236a <__flp+0x1>
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <free+0x104>
    1a36:	12 82       	std	Z+2, r1	; 0x02
    1a38:	13 82       	std	Z+3, r1	; 0x03
    1a3a:	a0 93 67 23 	sts	0x2367, r26	; 0x802367 <__brkval>
    1a3e:	b0 93 68 23 	sts	0x2368, r27	; 0x802368 <__brkval+0x1>
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <atoi>:
    1a48:	fc 01       	movw	r30, r24
    1a4a:	88 27       	eor	r24, r24
    1a4c:	99 27       	eor	r25, r25
    1a4e:	e8 94       	clt
    1a50:	21 91       	ld	r18, Z+
    1a52:	20 32       	cpi	r18, 0x20	; 32
    1a54:	e9 f3       	breq	.-6      	; 0x1a50 <atoi+0x8>
    1a56:	29 30       	cpi	r18, 0x09	; 9
    1a58:	10 f0       	brcs	.+4      	; 0x1a5e <atoi+0x16>
    1a5a:	2e 30       	cpi	r18, 0x0E	; 14
    1a5c:	c8 f3       	brcs	.-14     	; 0x1a50 <atoi+0x8>
    1a5e:	2b 32       	cpi	r18, 0x2B	; 43
    1a60:	41 f0       	breq	.+16     	; 0x1a72 <atoi+0x2a>
    1a62:	2d 32       	cpi	r18, 0x2D	; 45
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <atoi+0x2c>
    1a66:	68 94       	set
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <atoi+0x2a>
    1a6a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <__mulhi_const_10>
    1a6e:	82 0f       	add	r24, r18
    1a70:	91 1d       	adc	r25, r1
    1a72:	21 91       	ld	r18, Z+
    1a74:	20 53       	subi	r18, 0x30	; 48
    1a76:	2a 30       	cpi	r18, 0x0A	; 10
    1a78:	c0 f3       	brcs	.-16     	; 0x1a6a <atoi+0x22>
    1a7a:	1e f4       	brtc	.+6      	; 0x1a82 <atoi+0x3a>
    1a7c:	90 95       	com	r25
    1a7e:	81 95       	neg	r24
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	08 95       	ret

00001a84 <memcpy>:
    1a84:	fb 01       	movw	r30, r22
    1a86:	dc 01       	movw	r26, r24
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <memcpy+0xa>
    1a8a:	01 90       	ld	r0, Z+
    1a8c:	0d 92       	st	X+, r0
    1a8e:	41 50       	subi	r20, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	d8 f7       	brcc	.-10     	; 0x1a8a <memcpy+0x6>
    1a94:	08 95       	ret

00001a96 <strcmp>:
    1a96:	fb 01       	movw	r30, r22
    1a98:	dc 01       	movw	r26, r24
    1a9a:	8d 91       	ld	r24, X+
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	80 19       	sub	r24, r0
    1aa0:	01 10       	cpse	r0, r1
    1aa2:	d9 f3       	breq	.-10     	; 0x1a9a <strcmp+0x4>
    1aa4:	99 0b       	sbc	r25, r25
    1aa6:	08 95       	ret

00001aa8 <__mulhi_const_10>:
    1aa8:	7a e0       	ldi	r23, 0x0A	; 10
    1aaa:	97 9f       	mul	r25, r23
    1aac:	90 2d       	mov	r25, r0
    1aae:	87 9f       	mul	r24, r23
    1ab0:	80 2d       	mov	r24, r0
    1ab2:	91 0d       	add	r25, r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	08 95       	ret

00001ab8 <fgetc>:
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	ec 01       	movw	r28, r24
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	20 ff       	sbrs	r18, 0
    1ac2:	33 c0       	rjmp	.+102    	; 0x1b2a <fgetc+0x72>
    1ac4:	26 ff       	sbrs	r18, 6
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <fgetc+0x24>
    1ac8:	2f 7b       	andi	r18, 0xBF	; 191
    1aca:	2b 83       	std	Y+3, r18	; 0x03
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	8e 83       	std	Y+6, r24	; 0x06
    1ad4:	9f 83       	std	Y+7, r25	; 0x07
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	29 c0       	rjmp	.+82     	; 0x1b2e <fgetc+0x76>
    1adc:	22 ff       	sbrs	r18, 2
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <fgetc+0x46>
    1ae0:	e8 81       	ld	r30, Y
    1ae2:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae4:	80 81       	ld	r24, Z
    1ae6:	08 2e       	mov	r0, r24
    1ae8:	00 0c       	add	r0, r0
    1aea:	99 0b       	sbc	r25, r25
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	19 f4       	brne	.+6      	; 0x1af6 <fgetc+0x3e>
    1af0:	20 62       	ori	r18, 0x20	; 32
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	1a c0       	rjmp	.+52     	; 0x1b2a <fgetc+0x72>
    1af6:	31 96       	adiw	r30, 0x01	; 1
    1af8:	e8 83       	st	Y, r30
    1afa:	f9 83       	std	Y+1, r31	; 0x01
    1afc:	0e c0       	rjmp	.+28     	; 0x1b1a <fgetc+0x62>
    1afe:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b00:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b02:	19 95       	eicall
    1b04:	97 ff       	sbrs	r25, 7
    1b06:	09 c0       	rjmp	.+18     	; 0x1b1a <fgetc+0x62>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	11 f0       	breq	.+4      	; 0x1b12 <fgetc+0x5a>
    1b0e:	80 e2       	ldi	r24, 0x20	; 32
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <fgetc+0x5c>
    1b12:	80 e1       	ldi	r24, 0x10	; 16
    1b14:	82 2b       	or	r24, r18
    1b16:	8b 83       	std	Y+3, r24	; 0x03
    1b18:	08 c0       	rjmp	.+16     	; 0x1b2a <fgetc+0x72>
    1b1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	2e 83       	std	Y+6, r18	; 0x06
    1b24:	3f 83       	std	Y+7, r19	; 0x07
    1b26:	99 27       	eor	r25, r25
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <fgetc+0x76>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <printf>:
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	ae 01       	movw	r20, r28
    1b3e:	4a 5f       	subi	r20, 0xFA	; 250
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	fa 01       	movw	r30, r20
    1b44:	61 91       	ld	r22, Z+
    1b46:	71 91       	ld	r23, Z+
    1b48:	af 01       	movw	r20, r30
    1b4a:	80 91 6d 23 	lds	r24, 0x236D	; 0x80236d <__iob+0x2>
    1b4e:	90 91 6e 23 	lds	r25, 0x236E	; 0x80236e <__iob+0x3>
    1b52:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <vfprintf>
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <puts>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	e0 91 6d 23 	lds	r30, 0x236D	; 0x80236d <__iob+0x2>
    1b68:	f0 91 6e 23 	lds	r31, 0x236E	; 0x80236e <__iob+0x3>
    1b6c:	23 81       	ldd	r18, Z+3	; 0x03
    1b6e:	21 ff       	sbrs	r18, 1
    1b70:	1b c0       	rjmp	.+54     	; 0x1ba8 <puts+0x4c>
    1b72:	8c 01       	movw	r16, r24
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
    1b76:	c0 e0       	ldi	r28, 0x00	; 0
    1b78:	f8 01       	movw	r30, r16
    1b7a:	81 91       	ld	r24, Z+
    1b7c:	8f 01       	movw	r16, r30
    1b7e:	60 91 6d 23 	lds	r22, 0x236D	; 0x80236d <__iob+0x2>
    1b82:	70 91 6e 23 	lds	r23, 0x236E	; 0x80236e <__iob+0x3>
    1b86:	db 01       	movw	r26, r22
    1b88:	18 96       	adiw	r26, 0x08	; 8
    1b8a:	ed 91       	ld	r30, X+
    1b8c:	fc 91       	ld	r31, X
    1b8e:	19 97       	sbiw	r26, 0x09	; 9
    1b90:	88 23       	and	r24, r24
    1b92:	31 f0       	breq	.+12     	; 0x1ba0 <puts+0x44>
    1b94:	19 95       	eicall
    1b96:	89 2b       	or	r24, r25
    1b98:	79 f3       	breq	.-34     	; 0x1b78 <puts+0x1c>
    1b9a:	df ef       	ldi	r29, 0xFF	; 255
    1b9c:	cf ef       	ldi	r28, 0xFF	; 255
    1b9e:	ec cf       	rjmp	.-40     	; 0x1b78 <puts+0x1c>
    1ba0:	8a e0       	ldi	r24, 0x0A	; 10
    1ba2:	19 95       	eicall
    1ba4:	89 2b       	or	r24, r25
    1ba6:	19 f0       	breq	.+6      	; 0x1bae <puts+0x52>
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <puts+0x56>
    1bae:	8d 2f       	mov	r24, r29
    1bb0:	9c 2f       	mov	r25, r28
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <vfprintf>:
    1bbc:	2f 92       	push	r2
    1bbe:	3f 92       	push	r3
    1bc0:	4f 92       	push	r4
    1bc2:	5f 92       	push	r5
    1bc4:	6f 92       	push	r6
    1bc6:	7f 92       	push	r7
    1bc8:	8f 92       	push	r8
    1bca:	9f 92       	push	r9
    1bcc:	af 92       	push	r10
    1bce:	bf 92       	push	r11
    1bd0:	cf 92       	push	r12
    1bd2:	df 92       	push	r13
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	2b 97       	sbiw	r28, 0x0b	; 11
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	6c 01       	movw	r12, r24
    1bec:	7b 01       	movw	r14, r22
    1bee:	8a 01       	movw	r16, r20
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	16 82       	std	Z+6, r1	; 0x06
    1bf4:	17 82       	std	Z+7, r1	; 0x07
    1bf6:	83 81       	ldd	r24, Z+3	; 0x03
    1bf8:	81 ff       	sbrs	r24, 1
    1bfa:	cc c1       	rjmp	.+920    	; 0x1f94 <vfprintf+0x3d8>
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	01 96       	adiw	r24, 0x01	; 1
    1c00:	3c 01       	movw	r6, r24
    1c02:	f6 01       	movw	r30, r12
    1c04:	93 81       	ldd	r25, Z+3	; 0x03
    1c06:	f7 01       	movw	r30, r14
    1c08:	93 fd       	sbrc	r25, 3
    1c0a:	85 91       	lpm	r24, Z+
    1c0c:	93 ff       	sbrs	r25, 3
    1c0e:	81 91       	ld	r24, Z+
    1c10:	7f 01       	movw	r14, r30
    1c12:	88 23       	and	r24, r24
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <vfprintf+0x5c>
    1c16:	ba c1       	rjmp	.+884    	; 0x1f8c <vfprintf+0x3d0>
    1c18:	85 32       	cpi	r24, 0x25	; 37
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <vfprintf+0x6e>
    1c1c:	93 fd       	sbrc	r25, 3
    1c1e:	85 91       	lpm	r24, Z+
    1c20:	93 ff       	sbrs	r25, 3
    1c22:	81 91       	ld	r24, Z+
    1c24:	7f 01       	movw	r14, r30
    1c26:	85 32       	cpi	r24, 0x25	; 37
    1c28:	29 f4       	brne	.+10     	; 0x1c34 <vfprintf+0x78>
    1c2a:	b6 01       	movw	r22, r12
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1c32:	e7 cf       	rjmp	.-50     	; 0x1c02 <vfprintf+0x46>
    1c34:	91 2c       	mov	r9, r1
    1c36:	21 2c       	mov	r2, r1
    1c38:	31 2c       	mov	r3, r1
    1c3a:	ff e1       	ldi	r31, 0x1F	; 31
    1c3c:	f3 15       	cp	r31, r3
    1c3e:	d8 f0       	brcs	.+54     	; 0x1c76 <vfprintf+0xba>
    1c40:	8b 32       	cpi	r24, 0x2B	; 43
    1c42:	79 f0       	breq	.+30     	; 0x1c62 <vfprintf+0xa6>
    1c44:	38 f4       	brcc	.+14     	; 0x1c54 <vfprintf+0x98>
    1c46:	80 32       	cpi	r24, 0x20	; 32
    1c48:	79 f0       	breq	.+30     	; 0x1c68 <vfprintf+0xac>
    1c4a:	83 32       	cpi	r24, 0x23	; 35
    1c4c:	a1 f4       	brne	.+40     	; 0x1c76 <vfprintf+0xba>
    1c4e:	23 2d       	mov	r18, r3
    1c50:	20 61       	ori	r18, 0x10	; 16
    1c52:	1d c0       	rjmp	.+58     	; 0x1c8e <vfprintf+0xd2>
    1c54:	8d 32       	cpi	r24, 0x2D	; 45
    1c56:	61 f0       	breq	.+24     	; 0x1c70 <vfprintf+0xb4>
    1c58:	80 33       	cpi	r24, 0x30	; 48
    1c5a:	69 f4       	brne	.+26     	; 0x1c76 <vfprintf+0xba>
    1c5c:	23 2d       	mov	r18, r3
    1c5e:	21 60       	ori	r18, 0x01	; 1
    1c60:	16 c0       	rjmp	.+44     	; 0x1c8e <vfprintf+0xd2>
    1c62:	83 2d       	mov	r24, r3
    1c64:	82 60       	ori	r24, 0x02	; 2
    1c66:	38 2e       	mov	r3, r24
    1c68:	e3 2d       	mov	r30, r3
    1c6a:	e4 60       	ori	r30, 0x04	; 4
    1c6c:	3e 2e       	mov	r3, r30
    1c6e:	2a c0       	rjmp	.+84     	; 0x1cc4 <vfprintf+0x108>
    1c70:	f3 2d       	mov	r31, r3
    1c72:	f8 60       	ori	r31, 0x08	; 8
    1c74:	1d c0       	rjmp	.+58     	; 0x1cb0 <vfprintf+0xf4>
    1c76:	37 fc       	sbrc	r3, 7
    1c78:	2d c0       	rjmp	.+90     	; 0x1cd4 <vfprintf+0x118>
    1c7a:	20 ed       	ldi	r18, 0xD0	; 208
    1c7c:	28 0f       	add	r18, r24
    1c7e:	2a 30       	cpi	r18, 0x0A	; 10
    1c80:	40 f0       	brcs	.+16     	; 0x1c92 <vfprintf+0xd6>
    1c82:	8e 32       	cpi	r24, 0x2E	; 46
    1c84:	b9 f4       	brne	.+46     	; 0x1cb4 <vfprintf+0xf8>
    1c86:	36 fc       	sbrc	r3, 6
    1c88:	81 c1       	rjmp	.+770    	; 0x1f8c <vfprintf+0x3d0>
    1c8a:	23 2d       	mov	r18, r3
    1c8c:	20 64       	ori	r18, 0x40	; 64
    1c8e:	32 2e       	mov	r3, r18
    1c90:	19 c0       	rjmp	.+50     	; 0x1cc4 <vfprintf+0x108>
    1c92:	36 fe       	sbrs	r3, 6
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0xe6>
    1c96:	8a e0       	ldi	r24, 0x0A	; 10
    1c98:	98 9e       	mul	r9, r24
    1c9a:	20 0d       	add	r18, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	92 2e       	mov	r9, r18
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <vfprintf+0x108>
    1ca2:	ea e0       	ldi	r30, 0x0A	; 10
    1ca4:	2e 9e       	mul	r2, r30
    1ca6:	20 0d       	add	r18, r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	22 2e       	mov	r2, r18
    1cac:	f3 2d       	mov	r31, r3
    1cae:	f0 62       	ori	r31, 0x20	; 32
    1cb0:	3f 2e       	mov	r3, r31
    1cb2:	08 c0       	rjmp	.+16     	; 0x1cc4 <vfprintf+0x108>
    1cb4:	8c 36       	cpi	r24, 0x6C	; 108
    1cb6:	21 f4       	brne	.+8      	; 0x1cc0 <vfprintf+0x104>
    1cb8:	83 2d       	mov	r24, r3
    1cba:	80 68       	ori	r24, 0x80	; 128
    1cbc:	38 2e       	mov	r3, r24
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <vfprintf+0x108>
    1cc0:	88 36       	cpi	r24, 0x68	; 104
    1cc2:	41 f4       	brne	.+16     	; 0x1cd4 <vfprintf+0x118>
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	93 fd       	sbrc	r25, 3
    1cc8:	85 91       	lpm	r24, Z+
    1cca:	93 ff       	sbrs	r25, 3
    1ccc:	81 91       	ld	r24, Z+
    1cce:	7f 01       	movw	r14, r30
    1cd0:	81 11       	cpse	r24, r1
    1cd2:	b3 cf       	rjmp	.-154    	; 0x1c3a <vfprintf+0x7e>
    1cd4:	98 2f       	mov	r25, r24
    1cd6:	9f 7d       	andi	r25, 0xDF	; 223
    1cd8:	95 54       	subi	r25, 0x45	; 69
    1cda:	93 30       	cpi	r25, 0x03	; 3
    1cdc:	28 f4       	brcc	.+10     	; 0x1ce8 <vfprintf+0x12c>
    1cde:	0c 5f       	subi	r16, 0xFC	; 252
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	9f e3       	ldi	r25, 0x3F	; 63
    1ce4:	99 83       	std	Y+1, r25	; 0x01
    1ce6:	0d c0       	rjmp	.+26     	; 0x1d02 <vfprintf+0x146>
    1ce8:	83 36       	cpi	r24, 0x63	; 99
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <vfprintf+0x13c>
    1cec:	83 37       	cpi	r24, 0x73	; 115
    1cee:	71 f0       	breq	.+28     	; 0x1d0c <vfprintf+0x150>
    1cf0:	83 35       	cpi	r24, 0x53	; 83
    1cf2:	09 f0       	breq	.+2      	; 0x1cf6 <vfprintf+0x13a>
    1cf4:	59 c0       	rjmp	.+178    	; 0x1da8 <vfprintf+0x1ec>
    1cf6:	21 c0       	rjmp	.+66     	; 0x1d3a <vfprintf+0x17e>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	80 81       	ld	r24, Z
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	0e 5f       	subi	r16, 0xFE	; 254
    1d00:	1f 4f       	sbci	r17, 0xFF	; 255
    1d02:	88 24       	eor	r8, r8
    1d04:	83 94       	inc	r8
    1d06:	91 2c       	mov	r9, r1
    1d08:	53 01       	movw	r10, r6
    1d0a:	13 c0       	rjmp	.+38     	; 0x1d32 <vfprintf+0x176>
    1d0c:	28 01       	movw	r4, r16
    1d0e:	f2 e0       	ldi	r31, 0x02	; 2
    1d10:	4f 0e       	add	r4, r31
    1d12:	51 1c       	adc	r5, r1
    1d14:	f8 01       	movw	r30, r16
    1d16:	a0 80       	ld	r10, Z
    1d18:	b1 80       	ldd	r11, Z+1	; 0x01
    1d1a:	36 fe       	sbrs	r3, 6
    1d1c:	03 c0       	rjmp	.+6      	; 0x1d24 <vfprintf+0x168>
    1d1e:	69 2d       	mov	r22, r9
    1d20:	70 e0       	ldi	r23, 0x00	; 0
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <vfprintf+0x16c>
    1d24:	6f ef       	ldi	r22, 0xFF	; 255
    1d26:	7f ef       	ldi	r23, 0xFF	; 255
    1d28:	c5 01       	movw	r24, r10
    1d2a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <strnlen>
    1d2e:	4c 01       	movw	r8, r24
    1d30:	82 01       	movw	r16, r4
    1d32:	f3 2d       	mov	r31, r3
    1d34:	ff 77       	andi	r31, 0x7F	; 127
    1d36:	3f 2e       	mov	r3, r31
    1d38:	16 c0       	rjmp	.+44     	; 0x1d66 <vfprintf+0x1aa>
    1d3a:	28 01       	movw	r4, r16
    1d3c:	22 e0       	ldi	r18, 0x02	; 2
    1d3e:	42 0e       	add	r4, r18
    1d40:	51 1c       	adc	r5, r1
    1d42:	f8 01       	movw	r30, r16
    1d44:	a0 80       	ld	r10, Z
    1d46:	b1 80       	ldd	r11, Z+1	; 0x01
    1d48:	36 fe       	sbrs	r3, 6
    1d4a:	03 c0       	rjmp	.+6      	; 0x1d52 <vfprintf+0x196>
    1d4c:	69 2d       	mov	r22, r9
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <vfprintf+0x19a>
    1d52:	6f ef       	ldi	r22, 0xFF	; 255
    1d54:	7f ef       	ldi	r23, 0xFF	; 255
    1d56:	c5 01       	movw	r24, r10
    1d58:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <strnlen_P>
    1d5c:	4c 01       	movw	r8, r24
    1d5e:	f3 2d       	mov	r31, r3
    1d60:	f0 68       	ori	r31, 0x80	; 128
    1d62:	3f 2e       	mov	r3, r31
    1d64:	82 01       	movw	r16, r4
    1d66:	33 fc       	sbrc	r3, 3
    1d68:	1b c0       	rjmp	.+54     	; 0x1da0 <vfprintf+0x1e4>
    1d6a:	82 2d       	mov	r24, r2
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	88 16       	cp	r8, r24
    1d70:	99 06       	cpc	r9, r25
    1d72:	b0 f4       	brcc	.+44     	; 0x1da0 <vfprintf+0x1e4>
    1d74:	b6 01       	movw	r22, r12
    1d76:	80 e2       	ldi	r24, 0x20	; 32
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1d7e:	2a 94       	dec	r2
    1d80:	f4 cf       	rjmp	.-24     	; 0x1d6a <vfprintf+0x1ae>
    1d82:	f5 01       	movw	r30, r10
    1d84:	37 fc       	sbrc	r3, 7
    1d86:	85 91       	lpm	r24, Z+
    1d88:	37 fe       	sbrs	r3, 7
    1d8a:	81 91       	ld	r24, Z+
    1d8c:	5f 01       	movw	r10, r30
    1d8e:	b6 01       	movw	r22, r12
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1d96:	21 10       	cpse	r2, r1
    1d98:	2a 94       	dec	r2
    1d9a:	21 e0       	ldi	r18, 0x01	; 1
    1d9c:	82 1a       	sub	r8, r18
    1d9e:	91 08       	sbc	r9, r1
    1da0:	81 14       	cp	r8, r1
    1da2:	91 04       	cpc	r9, r1
    1da4:	71 f7       	brne	.-36     	; 0x1d82 <vfprintf+0x1c6>
    1da6:	e8 c0       	rjmp	.+464    	; 0x1f78 <vfprintf+0x3bc>
    1da8:	84 36       	cpi	r24, 0x64	; 100
    1daa:	11 f0       	breq	.+4      	; 0x1db0 <vfprintf+0x1f4>
    1dac:	89 36       	cpi	r24, 0x69	; 105
    1dae:	41 f5       	brne	.+80     	; 0x1e00 <vfprintf+0x244>
    1db0:	f8 01       	movw	r30, r16
    1db2:	37 fe       	sbrs	r3, 7
    1db4:	07 c0       	rjmp	.+14     	; 0x1dc4 <vfprintf+0x208>
    1db6:	60 81       	ld	r22, Z
    1db8:	71 81       	ldd	r23, Z+1	; 0x01
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	93 81       	ldd	r25, Z+3	; 0x03
    1dbe:	0c 5f       	subi	r16, 0xFC	; 252
    1dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc2:	08 c0       	rjmp	.+16     	; 0x1dd4 <vfprintf+0x218>
    1dc4:	60 81       	ld	r22, Z
    1dc6:	71 81       	ldd	r23, Z+1	; 0x01
    1dc8:	07 2e       	mov	r0, r23
    1dca:	00 0c       	add	r0, r0
    1dcc:	88 0b       	sbc	r24, r24
    1dce:	99 0b       	sbc	r25, r25
    1dd0:	0e 5f       	subi	r16, 0xFE	; 254
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	f3 2d       	mov	r31, r3
    1dd6:	ff 76       	andi	r31, 0x6F	; 111
    1dd8:	3f 2e       	mov	r3, r31
    1dda:	97 ff       	sbrs	r25, 7
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <vfprintf+0x234>
    1dde:	90 95       	com	r25
    1de0:	80 95       	com	r24
    1de2:	70 95       	com	r23
    1de4:	61 95       	neg	r22
    1de6:	7f 4f       	sbci	r23, 0xFF	; 255
    1de8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dea:	9f 4f       	sbci	r25, 0xFF	; 255
    1dec:	f0 68       	ori	r31, 0x80	; 128
    1dee:	3f 2e       	mov	r3, r31
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	a3 01       	movw	r20, r6
    1df6:	0e 94 34 10 	call	0x2068	; 0x2068 <__ultoa_invert>
    1dfa:	88 2e       	mov	r8, r24
    1dfc:	86 18       	sub	r8, r6
    1dfe:	45 c0       	rjmp	.+138    	; 0x1e8a <vfprintf+0x2ce>
    1e00:	85 37       	cpi	r24, 0x75	; 117
    1e02:	31 f4       	brne	.+12     	; 0x1e10 <vfprintf+0x254>
    1e04:	23 2d       	mov	r18, r3
    1e06:	2f 7e       	andi	r18, 0xEF	; 239
    1e08:	b2 2e       	mov	r11, r18
    1e0a:	2a e0       	ldi	r18, 0x0A	; 10
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	25 c0       	rjmp	.+74     	; 0x1e5a <vfprintf+0x29e>
    1e10:	93 2d       	mov	r25, r3
    1e12:	99 7f       	andi	r25, 0xF9	; 249
    1e14:	b9 2e       	mov	r11, r25
    1e16:	8f 36       	cpi	r24, 0x6F	; 111
    1e18:	c1 f0       	breq	.+48     	; 0x1e4a <vfprintf+0x28e>
    1e1a:	18 f4       	brcc	.+6      	; 0x1e22 <vfprintf+0x266>
    1e1c:	88 35       	cpi	r24, 0x58	; 88
    1e1e:	79 f0       	breq	.+30     	; 0x1e3e <vfprintf+0x282>
    1e20:	b5 c0       	rjmp	.+362    	; 0x1f8c <vfprintf+0x3d0>
    1e22:	80 37       	cpi	r24, 0x70	; 112
    1e24:	19 f0       	breq	.+6      	; 0x1e2c <vfprintf+0x270>
    1e26:	88 37       	cpi	r24, 0x78	; 120
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <vfprintf+0x276>
    1e2a:	b0 c0       	rjmp	.+352    	; 0x1f8c <vfprintf+0x3d0>
    1e2c:	e9 2f       	mov	r30, r25
    1e2e:	e0 61       	ori	r30, 0x10	; 16
    1e30:	be 2e       	mov	r11, r30
    1e32:	b4 fe       	sbrs	r11, 4
    1e34:	0d c0       	rjmp	.+26     	; 0x1e50 <vfprintf+0x294>
    1e36:	fb 2d       	mov	r31, r11
    1e38:	f4 60       	ori	r31, 0x04	; 4
    1e3a:	bf 2e       	mov	r11, r31
    1e3c:	09 c0       	rjmp	.+18     	; 0x1e50 <vfprintf+0x294>
    1e3e:	34 fe       	sbrs	r3, 4
    1e40:	0a c0       	rjmp	.+20     	; 0x1e56 <vfprintf+0x29a>
    1e42:	29 2f       	mov	r18, r25
    1e44:	26 60       	ori	r18, 0x06	; 6
    1e46:	b2 2e       	mov	r11, r18
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <vfprintf+0x29a>
    1e4a:	28 e0       	ldi	r18, 0x08	; 8
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <vfprintf+0x29e>
    1e50:	20 e1       	ldi	r18, 0x10	; 16
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0x29e>
    1e56:	20 e1       	ldi	r18, 0x10	; 16
    1e58:	32 e0       	ldi	r19, 0x02	; 2
    1e5a:	f8 01       	movw	r30, r16
    1e5c:	b7 fe       	sbrs	r11, 7
    1e5e:	07 c0       	rjmp	.+14     	; 0x1e6e <vfprintf+0x2b2>
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	0c 5f       	subi	r16, 0xFC	; 252
    1e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <vfprintf+0x2be>
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 5f       	subi	r16, 0xFE	; 254
    1e78:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7a:	a3 01       	movw	r20, r6
    1e7c:	0e 94 34 10 	call	0x2068	; 0x2068 <__ultoa_invert>
    1e80:	88 2e       	mov	r8, r24
    1e82:	86 18       	sub	r8, r6
    1e84:	fb 2d       	mov	r31, r11
    1e86:	ff 77       	andi	r31, 0x7F	; 127
    1e88:	3f 2e       	mov	r3, r31
    1e8a:	36 fe       	sbrs	r3, 6
    1e8c:	0d c0       	rjmp	.+26     	; 0x1ea8 <vfprintf+0x2ec>
    1e8e:	23 2d       	mov	r18, r3
    1e90:	2e 7f       	andi	r18, 0xFE	; 254
    1e92:	a2 2e       	mov	r10, r18
    1e94:	89 14       	cp	r8, r9
    1e96:	58 f4       	brcc	.+22     	; 0x1eae <vfprintf+0x2f2>
    1e98:	34 fe       	sbrs	r3, 4
    1e9a:	0b c0       	rjmp	.+22     	; 0x1eb2 <vfprintf+0x2f6>
    1e9c:	32 fc       	sbrc	r3, 2
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <vfprintf+0x2f6>
    1ea0:	83 2d       	mov	r24, r3
    1ea2:	8e 7e       	andi	r24, 0xEE	; 238
    1ea4:	a8 2e       	mov	r10, r24
    1ea6:	05 c0       	rjmp	.+10     	; 0x1eb2 <vfprintf+0x2f6>
    1ea8:	b8 2c       	mov	r11, r8
    1eaa:	a3 2c       	mov	r10, r3
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <vfprintf+0x2f8>
    1eae:	b8 2c       	mov	r11, r8
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <vfprintf+0x2f8>
    1eb2:	b9 2c       	mov	r11, r9
    1eb4:	a4 fe       	sbrs	r10, 4
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <vfprintf+0x31a>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e8 0d       	add	r30, r8
    1ebc:	f1 1d       	adc	r31, r1
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 33       	cpi	r24, 0x30	; 48
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <vfprintf+0x310>
    1ec4:	9a 2d       	mov	r25, r10
    1ec6:	99 7e       	andi	r25, 0xE9	; 233
    1ec8:	a9 2e       	mov	r10, r25
    1eca:	09 c0       	rjmp	.+18     	; 0x1ede <vfprintf+0x322>
    1ecc:	a2 fe       	sbrs	r10, 2
    1ece:	06 c0       	rjmp	.+12     	; 0x1edc <vfprintf+0x320>
    1ed0:	b3 94       	inc	r11
    1ed2:	b3 94       	inc	r11
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <vfprintf+0x322>
    1ed6:	8a 2d       	mov	r24, r10
    1ed8:	86 78       	andi	r24, 0x86	; 134
    1eda:	09 f0       	breq	.+2      	; 0x1ede <vfprintf+0x322>
    1edc:	b3 94       	inc	r11
    1ede:	a3 fc       	sbrc	r10, 3
    1ee0:	11 c0       	rjmp	.+34     	; 0x1f04 <vfprintf+0x348>
    1ee2:	a0 fe       	sbrs	r10, 0
    1ee4:	06 c0       	rjmp	.+12     	; 0x1ef2 <vfprintf+0x336>
    1ee6:	b2 14       	cp	r11, r2
    1ee8:	88 f4       	brcc	.+34     	; 0x1f0c <vfprintf+0x350>
    1eea:	28 0c       	add	r2, r8
    1eec:	92 2c       	mov	r9, r2
    1eee:	9b 18       	sub	r9, r11
    1ef0:	0e c0       	rjmp	.+28     	; 0x1f0e <vfprintf+0x352>
    1ef2:	b2 14       	cp	r11, r2
    1ef4:	60 f4       	brcc	.+24     	; 0x1f0e <vfprintf+0x352>
    1ef6:	b6 01       	movw	r22, r12
    1ef8:	80 e2       	ldi	r24, 0x20	; 32
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f00:	b3 94       	inc	r11
    1f02:	f7 cf       	rjmp	.-18     	; 0x1ef2 <vfprintf+0x336>
    1f04:	b2 14       	cp	r11, r2
    1f06:	18 f4       	brcc	.+6      	; 0x1f0e <vfprintf+0x352>
    1f08:	2b 18       	sub	r2, r11
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <vfprintf+0x354>
    1f0c:	98 2c       	mov	r9, r8
    1f0e:	21 2c       	mov	r2, r1
    1f10:	a4 fe       	sbrs	r10, 4
    1f12:	10 c0       	rjmp	.+32     	; 0x1f34 <vfprintf+0x378>
    1f14:	b6 01       	movw	r22, r12
    1f16:	80 e3       	ldi	r24, 0x30	; 48
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f1e:	a2 fe       	sbrs	r10, 2
    1f20:	17 c0       	rjmp	.+46     	; 0x1f50 <vfprintf+0x394>
    1f22:	a1 fc       	sbrc	r10, 1
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <vfprintf+0x370>
    1f26:	88 e7       	ldi	r24, 0x78	; 120
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 c0       	rjmp	.+4      	; 0x1f30 <vfprintf+0x374>
    1f2c:	88 e5       	ldi	r24, 0x58	; 88
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b6 01       	movw	r22, r12
    1f32:	0c c0       	rjmp	.+24     	; 0x1f4c <vfprintf+0x390>
    1f34:	8a 2d       	mov	r24, r10
    1f36:	86 78       	andi	r24, 0x86	; 134
    1f38:	59 f0       	breq	.+22     	; 0x1f50 <vfprintf+0x394>
    1f3a:	a1 fe       	sbrs	r10, 1
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <vfprintf+0x386>
    1f3e:	8b e2       	ldi	r24, 0x2B	; 43
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <vfprintf+0x388>
    1f42:	80 e2       	ldi	r24, 0x20	; 32
    1f44:	a7 fc       	sbrc	r10, 7
    1f46:	8d e2       	ldi	r24, 0x2D	; 45
    1f48:	b6 01       	movw	r22, r12
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f50:	89 14       	cp	r8, r9
    1f52:	38 f4       	brcc	.+14     	; 0x1f62 <vfprintf+0x3a6>
    1f54:	b6 01       	movw	r22, r12
    1f56:	80 e3       	ldi	r24, 0x30	; 48
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f5e:	9a 94       	dec	r9
    1f60:	f7 cf       	rjmp	.-18     	; 0x1f50 <vfprintf+0x394>
    1f62:	8a 94       	dec	r8
    1f64:	f3 01       	movw	r30, r6
    1f66:	e8 0d       	add	r30, r8
    1f68:	f1 1d       	adc	r31, r1
    1f6a:	80 81       	ld	r24, Z
    1f6c:	b6 01       	movw	r22, r12
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f74:	81 10       	cpse	r8, r1
    1f76:	f5 cf       	rjmp	.-22     	; 0x1f62 <vfprintf+0x3a6>
    1f78:	22 20       	and	r2, r2
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <vfprintf+0x3c2>
    1f7c:	42 ce       	rjmp	.-892    	; 0x1c02 <vfprintf+0x46>
    1f7e:	b6 01       	movw	r22, r12
    1f80:	80 e2       	ldi	r24, 0x20	; 32
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <fputc>
    1f88:	2a 94       	dec	r2
    1f8a:	f6 cf       	rjmp	.-20     	; 0x1f78 <vfprintf+0x3bc>
    1f8c:	f6 01       	movw	r30, r12
    1f8e:	86 81       	ldd	r24, Z+6	; 0x06
    1f90:	97 81       	ldd	r25, Z+7	; 0x07
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <vfprintf+0x3dc>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	2b 96       	adiw	r28, 0x0b	; 11
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	de bf       	out	0x3e, r29	; 62
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	cf 90       	pop	r12
    1fae:	bf 90       	pop	r11
    1fb0:	af 90       	pop	r10
    1fb2:	9f 90       	pop	r9
    1fb4:	8f 90       	pop	r8
    1fb6:	7f 90       	pop	r7
    1fb8:	6f 90       	pop	r6
    1fba:	5f 90       	pop	r5
    1fbc:	4f 90       	pop	r4
    1fbe:	3f 90       	pop	r3
    1fc0:	2f 90       	pop	r2
    1fc2:	08 95       	ret

00001fc4 <strnlen_P>:
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	05 90       	lpm	r0, Z+
    1fc8:	61 50       	subi	r22, 0x01	; 1
    1fca:	70 40       	sbci	r23, 0x00	; 0
    1fcc:	01 10       	cpse	r0, r1
    1fce:	d8 f7       	brcc	.-10     	; 0x1fc6 <strnlen_P+0x2>
    1fd0:	80 95       	com	r24
    1fd2:	90 95       	com	r25
    1fd4:	8e 0f       	add	r24, r30
    1fd6:	9f 1f       	adc	r25, r31
    1fd8:	08 95       	ret

00001fda <strnlen>:
    1fda:	fc 01       	movw	r30, r24
    1fdc:	61 50       	subi	r22, 0x01	; 1
    1fde:	70 40       	sbci	r23, 0x00	; 0
    1fe0:	01 90       	ld	r0, Z+
    1fe2:	01 10       	cpse	r0, r1
    1fe4:	d8 f7       	brcc	.-10     	; 0x1fdc <strnlen+0x2>
    1fe6:	80 95       	com	r24
    1fe8:	90 95       	com	r25
    1fea:	8e 0f       	add	r24, r30
    1fec:	9f 1f       	adc	r25, r31
    1fee:	08 95       	ret

00001ff0 <fputc>:
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	23 81       	ldd	r18, Z+3	; 0x03
    1ffc:	21 fd       	sbrc	r18, 1
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <fputc+0x16>
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	9f ef       	ldi	r25, 0xFF	; 255
    2004:	2c c0       	rjmp	.+88     	; 0x205e <fputc+0x6e>
    2006:	22 ff       	sbrs	r18, 2
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <fputc+0x46>
    200a:	46 81       	ldd	r20, Z+6	; 0x06
    200c:	57 81       	ldd	r21, Z+7	; 0x07
    200e:	24 81       	ldd	r18, Z+4	; 0x04
    2010:	35 81       	ldd	r19, Z+5	; 0x05
    2012:	42 17       	cp	r20, r18
    2014:	53 07       	cpc	r21, r19
    2016:	44 f4       	brge	.+16     	; 0x2028 <fputc+0x38>
    2018:	a0 81       	ld	r26, Z
    201a:	b1 81       	ldd	r27, Z+1	; 0x01
    201c:	9d 01       	movw	r18, r26
    201e:	2f 5f       	subi	r18, 0xFF	; 255
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    2022:	20 83       	st	Z, r18
    2024:	31 83       	std	Z+1, r19	; 0x01
    2026:	8c 93       	st	X, r24
    2028:	26 81       	ldd	r18, Z+6	; 0x06
    202a:	37 81       	ldd	r19, Z+7	; 0x07
    202c:	2f 5f       	subi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	26 83       	std	Z+6, r18	; 0x06
    2032:	37 83       	std	Z+7, r19	; 0x07
    2034:	14 c0       	rjmp	.+40     	; 0x205e <fputc+0x6e>
    2036:	8b 01       	movw	r16, r22
    2038:	ec 01       	movw	r28, r24
    203a:	fb 01       	movw	r30, r22
    203c:	00 84       	ldd	r0, Z+8	; 0x08
    203e:	f1 85       	ldd	r31, Z+9	; 0x09
    2040:	e0 2d       	mov	r30, r0
    2042:	19 95       	eicall
    2044:	89 2b       	or	r24, r25
    2046:	e1 f6       	brne	.-72     	; 0x2000 <fputc+0x10>
    2048:	d8 01       	movw	r26, r16
    204a:	16 96       	adiw	r26, 0x06	; 6
    204c:	8d 91       	ld	r24, X+
    204e:	9c 91       	ld	r25, X
    2050:	17 97       	sbiw	r26, 0x07	; 7
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	16 96       	adiw	r26, 0x06	; 6
    2056:	8d 93       	st	X+, r24
    2058:	9c 93       	st	X, r25
    205a:	17 97       	sbiw	r26, 0x07	; 7
    205c:	ce 01       	movw	r24, r28
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <__ultoa_invert>:
    2068:	fa 01       	movw	r30, r20
    206a:	aa 27       	eor	r26, r26
    206c:	28 30       	cpi	r18, 0x08	; 8
    206e:	51 f1       	breq	.+84     	; 0x20c4 <__ultoa_invert+0x5c>
    2070:	20 31       	cpi	r18, 0x10	; 16
    2072:	81 f1       	breq	.+96     	; 0x20d4 <__ultoa_invert+0x6c>
    2074:	e8 94       	clt
    2076:	6f 93       	push	r22
    2078:	6e 7f       	andi	r22, 0xFE	; 254
    207a:	6e 5f       	subi	r22, 0xFE	; 254
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8f 4f       	sbci	r24, 0xFF	; 255
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	af 4f       	sbci	r26, 0xFF	; 255
    2084:	b1 e0       	ldi	r27, 0x01	; 1
    2086:	3e d0       	rcall	.+124    	; 0x2104 <__ultoa_invert+0x9c>
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	3c d0       	rcall	.+120    	; 0x2104 <__ultoa_invert+0x9c>
    208c:	67 0f       	add	r22, r23
    208e:	78 1f       	adc	r23, r24
    2090:	89 1f       	adc	r24, r25
    2092:	9a 1f       	adc	r25, r26
    2094:	a1 1d       	adc	r26, r1
    2096:	68 0f       	add	r22, r24
    2098:	79 1f       	adc	r23, r25
    209a:	8a 1f       	adc	r24, r26
    209c:	91 1d       	adc	r25, r1
    209e:	a1 1d       	adc	r26, r1
    20a0:	6a 0f       	add	r22, r26
    20a2:	71 1d       	adc	r23, r1
    20a4:	81 1d       	adc	r24, r1
    20a6:	91 1d       	adc	r25, r1
    20a8:	a1 1d       	adc	r26, r1
    20aa:	20 d0       	rcall	.+64     	; 0x20ec <__ultoa_invert+0x84>
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <__ultoa_invert+0x48>
    20ae:	68 94       	set
    20b0:	3f 91       	pop	r19
    20b2:	2a e0       	ldi	r18, 0x0A	; 10
    20b4:	26 9f       	mul	r18, r22
    20b6:	11 24       	eor	r1, r1
    20b8:	30 19       	sub	r19, r0
    20ba:	30 5d       	subi	r19, 0xD0	; 208
    20bc:	31 93       	st	Z+, r19
    20be:	de f6       	brtc	.-74     	; 0x2076 <__ultoa_invert+0xe>
    20c0:	cf 01       	movw	r24, r30
    20c2:	08 95       	ret
    20c4:	46 2f       	mov	r20, r22
    20c6:	47 70       	andi	r20, 0x07	; 7
    20c8:	40 5d       	subi	r20, 0xD0	; 208
    20ca:	41 93       	st	Z+, r20
    20cc:	b3 e0       	ldi	r27, 0x03	; 3
    20ce:	0f d0       	rcall	.+30     	; 0x20ee <__ultoa_invert+0x86>
    20d0:	c9 f7       	brne	.-14     	; 0x20c4 <__ultoa_invert+0x5c>
    20d2:	f6 cf       	rjmp	.-20     	; 0x20c0 <__ultoa_invert+0x58>
    20d4:	46 2f       	mov	r20, r22
    20d6:	4f 70       	andi	r20, 0x0F	; 15
    20d8:	40 5d       	subi	r20, 0xD0	; 208
    20da:	4a 33       	cpi	r20, 0x3A	; 58
    20dc:	18 f0       	brcs	.+6      	; 0x20e4 <__ultoa_invert+0x7c>
    20de:	49 5d       	subi	r20, 0xD9	; 217
    20e0:	31 fd       	sbrc	r19, 1
    20e2:	40 52       	subi	r20, 0x20	; 32
    20e4:	41 93       	st	Z+, r20
    20e6:	02 d0       	rcall	.+4      	; 0x20ec <__ultoa_invert+0x84>
    20e8:	a9 f7       	brne	.-22     	; 0x20d4 <__ultoa_invert+0x6c>
    20ea:	ea cf       	rjmp	.-44     	; 0x20c0 <__ultoa_invert+0x58>
    20ec:	b4 e0       	ldi	r27, 0x04	; 4
    20ee:	a6 95       	lsr	r26
    20f0:	97 95       	ror	r25
    20f2:	87 95       	ror	r24
    20f4:	77 95       	ror	r23
    20f6:	67 95       	ror	r22
    20f8:	ba 95       	dec	r27
    20fa:	c9 f7       	brne	.-14     	; 0x20ee <__ultoa_invert+0x86>
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	61 05       	cpc	r22, r1
    2100:	71 05       	cpc	r23, r1
    2102:	08 95       	ret
    2104:	9b 01       	movw	r18, r22
    2106:	ac 01       	movw	r20, r24
    2108:	0a 2e       	mov	r0, r26
    210a:	06 94       	lsr	r0
    210c:	57 95       	ror	r21
    210e:	47 95       	ror	r20
    2110:	37 95       	ror	r19
    2112:	27 95       	ror	r18
    2114:	ba 95       	dec	r27
    2116:	c9 f7       	brne	.-14     	; 0x210a <__ultoa_invert+0xa2>
    2118:	62 0f       	add	r22, r18
    211a:	73 1f       	adc	r23, r19
    211c:	84 1f       	adc	r24, r20
    211e:	95 1f       	adc	r25, r21
    2120:	a0 1d       	adc	r26, r0
    2122:	08 95       	ret

00002124 <_exit>:
    2124:	f8 94       	cli

00002126 <__stop_program>:
    2126:	ff cf       	rjmp	.-2      	; 0x2126 <__stop_program>
