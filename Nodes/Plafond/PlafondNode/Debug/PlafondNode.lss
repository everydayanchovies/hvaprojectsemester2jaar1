
PlafondNode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000212a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00802000  0000212a  000021be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000237  00802084  00802084  00002242  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002242  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008f04  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000041e7  00000000  00000000  0000b584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002296  00000000  00000000  0000f76b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  00011a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000049a0  00000000  00000000  0001257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003310  00000000  00000000  00016f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0001a22c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
       4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
       c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      10:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      14:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      18:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      1c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      20:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      24:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      28:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      2c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      30:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      34:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      38:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      3c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      40:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      44:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      48:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      4c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      50:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      54:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      58:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      5c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      60:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      64:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      68:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      6c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      70:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      74:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      78:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      7c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      80:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      84:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      88:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      8c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      90:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      94:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      98:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      9c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      dc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
      fc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     100:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     104:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     108:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     10c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     110:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     114:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     118:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     11c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     120:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     124:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     128:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     12c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     130:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     134:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     138:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     13c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     140:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     144:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     148:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     14c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     150:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     154:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     158:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     15c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     160:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     164:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     168:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     16c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     170:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     174:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     178:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     17c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     180:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     184:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     188:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     18c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     190:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     194:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     198:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     19c:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a0:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_104>
     1a4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1a8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ac:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1b8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1bc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1c8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1cc:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1d8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1dc:	0c 94 39 07 	jmp	0xe72	; 0xe72 <__vector_119>
     1e0:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__vector_120>
     1e4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1e8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1ec:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f0:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f4:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>
     1f8:	0c 94 23 01 	jmp	0x246	; 0x246 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 30 07 	jmp	0xe60	; 0xe60 <uart_fgetc>
     200:	0c 94 18 07 	jmp	0xe30	; 0xe30 <uart_fputc>

00000204 <__ctors_end>:
     204:	11 24       	eor	r1, r1
     206:	1f be       	out	0x3f, r1	; 63
     208:	cf ef       	ldi	r28, 0xFF	; 255
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df e5       	ldi	r29, 0x5F	; 95
     20e:	de bf       	out	0x3e, r29	; 62
     210:	00 e0       	ldi	r16, 0x00	; 0
     212:	0c bf       	out	0x3c, r16	; 60

00000214 <__do_copy_data>:
     214:	10 e2       	ldi	r17, 0x20	; 32
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e2       	ldi	r27, 0x20	; 32
     21a:	ea e2       	ldi	r30, 0x2A	; 42
     21c:	f1 e2       	ldi	r31, 0x21	; 33
     21e:	00 e0       	ldi	r16, 0x00	; 0
     220:	0b bf       	out	0x3b, r16	; 59
     222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
     224:	07 90       	elpm	r0, Z+
     226:	0d 92       	st	X+, r0
     228:	a4 38       	cpi	r26, 0x84	; 132
     22a:	b1 07       	cpc	r27, r17
     22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>

0000022e <__do_clear_bss>:
     22e:	22 e2       	ldi	r18, 0x22	; 34
     230:	a4 e8       	ldi	r26, 0x84	; 132
     232:	b0 e2       	ldi	r27, 0x20	; 32
     234:	01 c0       	rjmp	.+2      	; 0x238 <.do_clear_bss_start>

00000236 <.do_clear_bss_loop>:
     236:	1d 92       	st	X+, r1

00000238 <.do_clear_bss_start>:
     238:	ab 3b       	cpi	r26, 0xBB	; 187
     23a:	b2 07       	cpc	r27, r18
     23c:	e1 f7       	brne	.-8      	; 0x236 <.do_clear_bss_loop>
     23e:	0e 94 26 03 	call	0x64c	; 0x64c <main>
     242:	0c 94 93 10 	jmp	0x2126	; 0x2126 <_exit>

00000246 <__bad_interrupt>:
     246:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024a <readCalibrationByte>:
#include <stddef.h>

uint8_t readCalibrationByte(uint8_t index) {
  uint8_t result;

  NVM.CMD = NVM_CMD_READ_CALIB_ROW_gc;
     24a:	a0 ec       	ldi	r26, 0xC0	; 192
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	92 e0       	ldi	r25, 0x02	; 2
     250:	1a 96       	adiw	r26, 0x0a	; 10
     252:	9c 93       	st	X, r25
     254:	1a 97       	sbiw	r26, 0x0a	; 10
  result = pgm_read_byte(index);
     256:	e8 2f       	mov	r30, r24
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	84 91       	lpm	r24, Z
  NVM.CMD = NVM_CMD_NO_OPERATION_gc;
     25c:	1a 96       	adiw	r26, 0x0a	; 10
     25e:	1c 92       	st	X, r1

  return result;
}
     260:	08 95       	ret

00000262 <init_adc>:

void init_adc(void)
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
  ADCA.CALL = readCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     266:	80 e2       	ldi	r24, 0x20	; 32
     268:	0e 94 25 01 	call	0x24a	; 0x24a <readCalibrationByte>
     26c:	c0 e0       	ldi	r28, 0x00	; 0
     26e:	d2 e0       	ldi	r29, 0x02	; 2
     270:	8c 87       	std	Y+12, r24	; 0x0c
  ADCA.CALH = readCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     272:	81 e2       	ldi	r24, 0x21	; 33
     274:	0e 94 25 01 	call	0x24a	; 0x24a <readCalibrationByte>
     278:	8d 87       	std	Y+13, r24	; 0x0d

  PORTA.DIRCLR     = PIN2_bm|PIN1_bm|PIN0_bm;          // pins configured as input
     27a:	97 e0       	ldi	r25, 0x07	; 7
     27c:	90 93 02 06 	sts	0x0602, r25	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
  ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN2_gc |           // PA1 to + channel 0
     280:	87 e1       	ldi	r24, 0x17	; 23
     282:	89 ab       	std	Y+49, r24	; 0x31
                     ADC_CH_MUXNEG_INTGND_MODE3_gc;    // internal ground to - channel 0
  ADCA.CH2.CTRL    = ADC_CH_INPUTMODE_DIFF_gc;         // channel 0 differential
     284:	82 e0       	ldi	r24, 0x02	; 2
     286:	88 ab       	std	Y+48, r24	; 0x30
  ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN1_gc |           // PA1 to + channel 0
     288:	2f e0       	ldi	r18, 0x0F	; 15
     28a:	29 a7       	std	Y+41, r18	; 0x29
                     ADC_CH_MUXNEG_INTGND_MODE3_gc;    // internal ground to - channel 0
  ADCA.CH1.CTRL    = ADC_CH_INPUTMODE_DIFF_gc;         // channel 0 differential
     28c:	88 a7       	std	Y+40, r24	; 0x28
  ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN0_gc |           // PA0 to + channel 0
     28e:	99 a3       	std	Y+33, r25	; 0x21
                     ADC_CH_MUXNEG_INTGND_MODE3_gc;    // internal ground to - channel 0
  ADCA.CH0.CTRL    = ADC_CH_INPUTMODE_DIFF_gc;         // channel 0 differential
     290:	88 a3       	std	Y+32, r24	; 0x20
  ADCA.REFCTRL     = ADC_REFSEL_INTVCC_gc;             // internal VCC/1.6 reference
     292:	90 e1       	ldi	r25, 0x10	; 16
     294:	9a 83       	std	Y+2, r25	; 0x02
  ADCA.CTRLB       = ADC_RESOLUTION_12BIT_gc |         // 12 bit conversion
     296:	99 83       	std	Y+1, r25	; 0x01
                     ADC_CONMODE_bm;                   // signed
  ADCA.PRESCALER   = ADC_PRESCALER_DIV16_gc;           // 32MHz/128 is 256 kHz
     298:	8c 83       	std	Y+4, r24	; 0x04
  ADCA.CTRLA       = ADC_ENABLE_bm;                    // enable adc
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	88 83       	st	Y, r24
}
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <Config32MHzClock_Ext16M>:
 *
 * \return void
 */
void Config32MHzClock_Ext16M(void)
{
  OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc |
     2a4:	e0 e5       	ldi	r30, 0x50	; 80
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	8b ec       	ldi	r24, 0xCB	; 203
     2aa:	82 83       	std	Z+2, r24	; 0x02
  OSC_XOSCSEL_XTAL_16KCLK_gc;
  OSC.CTRL |= OSC_XOSCEN_bm;
     2ac:	80 81       	ld	r24, Z
     2ae:	88 60       	ori	r24, 0x08	; 8
     2b0:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_XOSCRDY_bm) );
     2b2:	81 81       	ldd	r24, Z+1	; 0x01
     2b4:	83 ff       	sbrs	r24, 3
     2b6:	fd cf       	rjmp	.-6      	; 0x2b2 <Config32MHzClock_Ext16M+0xe>

  OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc |
     2b8:	e0 e5       	ldi	r30, 0x50	; 80
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	82 ec       	ldi	r24, 0xC2	; 194
     2be:	85 83       	std	Z+5, r24	; 0x05
  (OSC_PLLFAC_gm & 2);
  OSC.CTRL |= OSC_PLLEN_bm;
     2c0:	80 81       	ld	r24, Z
     2c2:	80 61       	ori	r24, 0x10	; 16
     2c4:	80 83       	st	Z, r24
  while ( ! (OSC.STATUS & OSC_PLLRDY_bm) );
     2c6:	81 81       	ldd	r24, Z+1	; 0x01
     2c8:	84 ff       	sbrs	r24, 4
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <Config32MHzClock_Ext16M+0x22>

  CCP = CCP_IOREG_gc;
     2cc:	88 ed       	ldi	r24, 0xD8	; 216
     2ce:	84 bf       	out	0x34, r24	; 52
  CLK.CTRL = CLK_SCLKSEL_PLL_gc;
     2d0:	84 e0       	ldi	r24, 0x04	; 4
     2d2:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
  OSC.CTRL &= ~OSC_RC2MEN_bm;
     2d6:	e0 e5       	ldi	r30, 0x50	; 80
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	8e 7f       	andi	r24, 0xFE	; 254
     2de:	80 83       	st	Z, r24
  OSC.CTRL &= ~OSC_RC32MEN_bm;
     2e0:	80 81       	ld	r24, Z
     2e2:	8d 7f       	andi	r24, 0xFD	; 253
     2e4:	80 83       	st	Z, r24
     2e6:	08 95       	ret

000002e8 <__vector_104>:
		_delay_ms(DEBOUNCE_PERIOD_MS);
		while ( bit_is_clear(PORTD.IN,PIN3_bp) ) ;
		return 1;
	}
	return 0;
}
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	0b b6       	in	r0, 0x3b	; 59
     2f4:	0f 92       	push	r0
     2f6:	af 92       	push	r10
     2f8:	bf 92       	push	r11
     2fa:	cf 92       	push	r12
     2fc:	df 92       	push	r13
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	00 d0       	rcall	.+0      	; 0x324 <__vector_104+0x3c>
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	ae 01       	movw	r20, r28
     32a:	4d 5f       	subi	r20, 0xFD	; 253
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	be 01       	movw	r22, r28
     330:	6e 5f       	subi	r22, 0xFE	; 254
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	ce 01       	movw	r24, r28
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	0e 94 58 05 	call	0xab0	; 0xab0 <nrfWhatHappened>
     33c:	8b 81       	ldd	r24, Y+3	; 0x03
     33e:	88 23       	and	r24, r24
     340:	09 f4       	brne	.+2      	; 0x344 <__vector_104+0x5c>
     342:	ab c0       	rjmp	.+342    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     344:	0e 94 0f 06 	call	0xc1e	; 0xc1e <nrfGetDynamicPayloadSize>
     348:	08 2f       	mov	r16, r24
     34a:	68 2f       	mov	r22, r24
     34c:	8a e8       	ldi	r24, 0x8A	; 138
     34e:	90 e2       	ldi	r25, 0x20	; 32
     350:	0e 94 bf 04 	call	0x97e	; 0x97e <nrfRead>
     354:	10 e0       	ldi	r17, 0x00	; 0
     356:	f8 01       	movw	r30, r16
     358:	e6 57       	subi	r30, 0x76	; 118
     35a:	ff 4d       	sbci	r31, 0xDF	; 223
     35c:	10 82       	st	Z, r1
     35e:	1f 92       	push	r1
     360:	1f 92       	push	r1
     362:	1f 92       	push	r1
     364:	1f 92       	push	r1
     366:	1f 92       	push	r1
     368:	1f 92       	push	r1
     36a:	85 e2       	ldi	r24, 0x25	; 37
     36c:	90 e2       	ldi	r25, 0x20	; 32
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <printf>
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <malloc>
     37e:	7c 01       	movw	r14, r24
     380:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <packet>
     384:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <packet+0x1>
     388:	f7 01       	movw	r30, r14
     38a:	80 83       	st	Z, r24
     38c:	91 83       	std	Z+1, r25	; 0x01
     38e:	12 82       	std	Z+2, r1	; 0x02
     390:	83 e0       	ldi	r24, 0x03	; 3
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <malloc>
     398:	6c 01       	movw	r12, r24
     39a:	80 91 8c 20 	lds	r24, 0x208C	; 0x80208c <packet+0x2>
     39e:	90 91 8d 20 	lds	r25, 0x208D	; 0x80208d <packet+0x3>
     3a2:	f6 01       	movw	r30, r12
     3a4:	80 83       	st	Z, r24
     3a6:	91 83       	std	Z+1, r25	; 0x01
     3a8:	12 82       	std	Z+2, r1	; 0x02
     3aa:	c8 01       	movw	r24, r16
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <malloc>
     3b2:	5c 01       	movw	r10, r24
     3b4:	a8 01       	movw	r20, r16
     3b6:	6e e8       	ldi	r22, 0x8E	; 142
     3b8:	70 e2       	ldi	r23, 0x20	; 32
     3ba:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <memcpy>
     3be:	f5 01       	movw	r30, r10
     3c0:	e0 0f       	add	r30, r16
     3c2:	f1 1f       	adc	r31, r17
     3c4:	10 82       	st	Z, r1
     3c6:	6e e3       	ldi	r22, 0x3E	; 62
     3c8:	70 e2       	ldi	r23, 0x20	; 32
     3ca:	c7 01       	movw	r24, r14
     3cc:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strcmp>
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	89 2b       	or	r24, r25
     3d6:	09 f0       	breq	.+2      	; 0x3da <__vector_104+0xf2>
     3d8:	60 c0       	rjmp	.+192    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     3da:	bf 92       	push	r11
     3dc:	af 92       	push	r10
     3de:	df 92       	push	r13
     3e0:	cf 92       	push	r12
     3e2:	ff 92       	push	r15
     3e4:	ef 92       	push	r14
     3e6:	85 e2       	ldi	r24, 0x25	; 37
     3e8:	90 e2       	ldi	r25, 0x20	; 32
     3ea:	9f 93       	push	r25
     3ec:	8f 93       	push	r24
     3ee:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <printf>
     3f2:	61 e4       	ldi	r22, 0x41	; 65
     3f4:	70 e2       	ldi	r23, 0x20	; 32
     3f6:	c6 01       	movw	r24, r12
     3f8:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <strcmp>
     3fc:	cd bf       	out	0x3d, r28	; 61
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	89 2b       	or	r24, r25
     402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     404:	44 c0       	rjmp	.+136    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     406:	c5 01       	movw	r24, r10
     408:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <atoi>
     40c:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <led_pwm>
     410:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <led_pwm+0x1>
     414:	a9 01       	movw	r20, r18
     416:	49 5e       	subi	r20, 0xE9	; 233
     418:	53 40       	sbci	r21, 0x03	; 3
     41a:	4f 33       	cpi	r20, 0x3F	; 63
     41c:	5f 41       	sbci	r21, 0x1F	; 31
     41e:	68 f4       	brcc	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     420:	64 e6       	ldi	r22, 0x64	; 100
     422:	68 9f       	mul	r22, r24
     424:	a0 01       	movw	r20, r0
     426:	69 9f       	mul	r22, r25
     428:	50 0d       	add	r21, r0
     42a:	11 24       	eor	r1, r1
     42c:	24 0f       	add	r18, r20
     42e:	35 1f       	adc	r19, r21
     430:	20 93 12 20 	sts	0x2012, r18	; 0x802012 <led_pwm>
     434:	30 93 13 20 	sts	0x2013, r19	; 0x802013 <led_pwm+0x1>
     438:	14 c0       	rjmp	.+40     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     43a:	29 3e       	cpi	r18, 0xE9	; 233
     43c:	63 e0       	ldi	r22, 0x03	; 3
     43e:	36 07       	cpc	r19, r22
     440:	3c f4       	brge	.+14     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     442:	8d ee       	ldi	r24, 0xED	; 237
     444:	93 e0       	ldi	r25, 0x03	; 3
     446:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <led_pwm>
     44a:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <led_pwm+0x1>
     44e:	09 c0       	rjmp	.+18     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     450:	28 32       	cpi	r18, 0x28	; 40
     452:	33 42       	sbci	r19, 0x23	; 35
     454:	34 f0       	brlt	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     456:	83 e2       	ldi	r24, 0x23	; 35
     458:	93 e2       	ldi	r25, 0x23	; 35
     45a:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <led_pwm>
     45e:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <led_pwm+0x1>
     462:	20 91 12 20 	lds	r18, 0x2012	; 0x802012 <led_pwm>
     466:	30 91 13 20 	lds	r19, 0x2013	; 0x802013 <led_pwm+0x1>
     46a:	82 2f       	mov	r24, r18
     46c:	93 2f       	mov	r25, r19
     46e:	80 93 28 09 	sts	0x0928, r24	; 0x800928 <__TEXT_REGION_LENGTH__+0x700928>
     472:	90 93 29 09 	sts	0x0929, r25	; 0x800929 <__TEXT_REGION_LENGTH__+0x700929>
     476:	3f 93       	push	r19
     478:	2f 93       	push	r18
     47a:	84 e4       	ldi	r24, 0x44	; 68
     47c:	90 e2       	ldi	r25, 0x20	; 32
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <printf>
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	ef e3       	ldi	r30, 0x3F	; 63
     490:	fc e9       	ldi	r31, 0x9C	; 156
     492:	31 97       	sbiw	r30, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     496:	00 c0       	rjmp	.+0      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     498:	00 00       	nop
     49a:	23 96       	adiw	r28, 0x03	; 3
     49c:	cd bf       	out	0x3d, r28	; 61
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	bf 91       	pop	r27
     4aa:	af 91       	pop	r26
     4ac:	9f 91       	pop	r25
     4ae:	8f 91       	pop	r24
     4b0:	7f 91       	pop	r23
     4b2:	6f 91       	pop	r22
     4b4:	5f 91       	pop	r21
     4b6:	4f 91       	pop	r20
     4b8:	3f 91       	pop	r19
     4ba:	2f 91       	pop	r18
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	ef 90       	pop	r14
     4c4:	df 90       	pop	r13
     4c6:	cf 90       	pop	r12
     4c8:	bf 90       	pop	r11
     4ca:	af 90       	pop	r10
     4cc:	0f 90       	pop	r0
     4ce:	0b be       	out	0x3b, r0	; 59
     4d0:	0f 90       	pop	r0
     4d2:	0f be       	out	0x3f, r0	; 63
     4d4:	0f 90       	pop	r0
     4d6:	1f 90       	pop	r1
     4d8:	18 95       	reti

000004da <init_pwm>:
     4da:	e0 e6       	ldi	r30, 0x60	; 96
     4dc:	f6 e0       	ldi	r31, 0x06	; 6
     4de:	88 e0       	ldi	r24, 0x08	; 8
     4e0:	82 83       	std	Z+2, r24	; 0x02
     4e2:	88 e1       	ldi	r24, 0x18	; 24
     4e4:	83 8b       	std	Z+19, r24	; 0x13
     4e6:	90 e1       	ldi	r25, 0x10	; 16
     4e8:	92 83       	std	Z+2, r25	; 0x02
     4ea:	84 8b       	std	Z+20, r24	; 0x14
     4ec:	84 e0       	ldi	r24, 0x04	; 4
     4ee:	81 83       	std	Z+1, r24	; 0x01
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	81 83       	std	Z+1, r24	; 0x01
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	81 83       	std	Z+1, r24	; 0x01
     4f8:	a0 e0       	ldi	r26, 0x00	; 0
     4fa:	b9 e0       	ldi	r27, 0x09	; 9
     4fc:	83 e1       	ldi	r24, 0x13	; 19
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	8c 93       	st	X, r24
     502:	11 97       	sbiw	r26, 0x01	; 1
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	8c 93       	st	X, r24
     508:	8f e0       	ldi	r24, 0x0F	; 15
     50a:	97 e2       	ldi	r25, 0x27	; 39
     50c:	96 96       	adiw	r26, 0x26	; 38
     50e:	8d 93       	st	X+, r24
     510:	9c 93       	st	X, r25
     512:	97 97       	sbiw	r26, 0x27	; 39
     514:	80 91 12 20 	lds	r24, 0x2012	; 0x802012 <led_pwm>
     518:	90 91 13 20 	lds	r25, 0x2013	; 0x802013 <led_pwm+0x1>
     51c:	98 96       	adiw	r26, 0x28	; 40
     51e:	8d 93       	st	X+, r24
     520:	9c 93       	st	X, r25
     522:	99 97       	sbiw	r26, 0x29	; 41
     524:	80 e2       	ldi	r24, 0x20	; 32
     526:	82 83       	std	Z+2, r24	; 0x02
     528:	08 95       	ret

0000052a <init_nrf>:
     52a:	0e 94 f0 06 	call	0xde0	; 0xde0 <nrfspiInit>
     52e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <nrfBegin>
     532:	68 e0       	ldi	r22, 0x08	; 8
     534:	80 e3       	ldi	r24, 0x30	; 48
     536:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <nrfSetRetries>
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	0e 94 39 06 	call	0xc72	; 0xc72 <nrfSetPALevel>
     540:	80 e2       	ldi	r24, 0x20	; 32
     542:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfSetDataRate>
     546:	8c e0       	ldi	r24, 0x0C	; 12
     548:	0e 94 5d 06 	call	0xcba	; 0xcba <nrfSetCRCLength>
     54c:	80 e3       	ldi	r24, 0x30	; 48
     54e:	0e 94 21 06 	call	0xc42	; 0xc42 <nrfSetChannel>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 2d 06 	call	0xc5a	; 0xc5a <nrfSetAutoAck>
     558:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <nrfEnableDynamicPayloads>
     55c:	0e 94 c2 06 	call	0xd84	; 0xd84 <nrfClearInterruptBits>
     560:	0e 94 c6 04 	call	0x98c	; 0x98c <nrfFlushRx>
     564:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrfFlushTx>
     568:	e0 ea       	ldi	r30, 0xA0	; 160
     56a:	f6 e0       	ldi	r31, 0x06	; 6
     56c:	82 85       	ldd	r24, Z+10	; 0x0a
     56e:	80 64       	ori	r24, 0x40	; 64
     570:	82 87       	std	Z+10, r24	; 0x0a
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	86 8b       	std	Z+22, r24	; 0x16
     576:	81 85       	ldd	r24, Z+9	; 0x09
     578:	81 60       	ori	r24, 0x01	; 1
     57a:	81 87       	std	Z+9, r24	; 0x09
     57c:	8c e0       	ldi	r24, 0x0C	; 12
     57e:	90 e2       	ldi	r25, 0x20	; 32
     580:	0e 94 76 05 	call	0xaec	; 0xaec <nrfOpenWritingPipe>
     584:	66 e0       	ldi	r22, 0x06	; 6
     586:	70 e2       	ldi	r23, 0x20	; 32
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 94 05 	call	0xb28	; 0xb28 <nrfOpenReadingPipe>
     58e:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <nrfStartListening>
     592:	08 95       	ret

00000594 <concat>:

char* concat(const char *s1, const char *s2)
{
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	cf 93       	push	r28
     59e:	df 93       	push	r29
     5a0:	8c 01       	movw	r16, r24
     5a2:	eb 01       	movw	r28, r22
	char *result = malloc(strlen(s1)+strlen(s2)+1);//+1 for the null-terminator
     5a4:	fc 01       	movw	r30, r24
     5a6:	01 90       	ld	r0, Z+
     5a8:	00 20       	and	r0, r0
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <concat+0x12>
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	cf 01       	movw	r24, r30
     5b0:	80 1b       	sub	r24, r16
     5b2:	91 0b       	sbc	r25, r17
     5b4:	fb 01       	movw	r30, r22
     5b6:	01 90       	ld	r0, Z+
     5b8:	00 20       	and	r0, r0
     5ba:	e9 f7       	brne	.-6      	; 0x5b6 <concat+0x22>
     5bc:	31 97       	sbiw	r30, 0x01	; 1
     5be:	e6 1b       	sub	r30, r22
     5c0:	f7 0b       	sbc	r31, r23
     5c2:	8e 0f       	add	r24, r30
     5c4:	9f 1f       	adc	r25, r31
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <malloc>
     5cc:	7c 01       	movw	r14, r24
	//in real code you would check for errors in malloc here
	strcpy(result, s1);
     5ce:	b8 01       	movw	r22, r16
     5d0:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <strcpy>
	strcat(result, s2);
     5d4:	be 01       	movw	r22, r28
     5d6:	c7 01       	movw	r24, r14
     5d8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <strcat>
	return result;
}
     5dc:	c7 01       	movw	r24, r14
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	ff 90       	pop	r15
     5e8:	ef 90       	pop	r14
     5ea:	08 95       	ret

000005ec <stuur>:

void stuur(char* command_id, char* command_data){
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	8c 01       	movw	r16, r24
     5f6:	eb 01       	movw	r28, r22
	nrfStopListening();
     5f8:	0e 94 19 05 	call	0xa32	; 0xa32 <nrfStopListening>
	
	char* command = SENSOR_NAME;
	
	command = concat(command, command_id);
     5fc:	b8 01       	movw	r22, r16
     5fe:	8e e3       	ldi	r24, 0x3E	; 62
     600:	90 e2       	ldi	r25, 0x20	; 32
     602:	0e 94 ca 02 	call	0x594	; 0x594 <concat>
	command = concat(command, command_data);
     606:	be 01       	movw	r22, r28
     608:	0e 94 ca 02 	call	0x594	; 0x594 <concat>
	
	nrfWrite( (uint8_t *) command, strlen(command) );
     60c:	fc 01       	movw	r30, r24
     60e:	01 90       	ld	r0, Z+
     610:	00 20       	and	r0, r0
     612:	e9 f7       	brne	.-6      	; 0x60e <stuur+0x22>
     614:	31 97       	sbiw	r30, 0x01	; 1
     616:	bf 01       	movw	r22, r30
     618:	68 1b       	sub	r22, r24
     61a:	79 0b       	sbc	r23, r25
     61c:	0e 94 bc 06 	call	0xd78	; 0xd78 <nrfWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	89 ef       	ldi	r24, 0xF9	; 249
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	21 50       	subi	r18, 0x01	; 1
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	90 40       	sbci	r25, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <stuur+0x3a>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <stuur+0x44>
     630:	00 00       	nop
	
	_delay_ms(10);
	
	nrfStartListening();
     632:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <nrfStartListening>
     636:	8f e3       	ldi	r24, 0x3F	; 63
     638:	9c e9       	ldi	r25, 0x9C	; 156
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <stuur+0x4e>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <stuur+0x54>
     640:	00 00       	nop
	_delay_ms(5);
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	08 95       	ret

0000064c <main>:
char* concat(const char *s1, const char *s2);
void stuur(char* command_id, char* command_data);

int main(void)
{
	Config32MHzClock_Ext16M();
     64c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <Config32MHzClock_Ext16M>
	init_adc();
     650:	0e 94 31 01 	call	0x262	; 0x262 <init_adc>
	init_pwm();
     654:	0e 94 6d 02 	call	0x4da	; 0x4da <init_pwm>
	init_nrf();
     658:	0e 94 95 02 	call	0x52a	; 0x52a <init_nrf>

	init_stream(F_CPU);
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	78 e4       	ldi	r23, 0x48	; 72
     660:	88 ee       	ldi	r24, 0xE8	; 232
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	0e 94 8d 07 	call	0xf1a	; 0xf1a <init_stream>
	PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     668:	e0 ea       	ldi	r30, 0xA0	; 160
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	82 81       	ldd	r24, Z+2	; 0x02
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	82 83       	std	Z+2, r24	; 0x02
	sei();
     672:	78 94       	sei

	clear_screen();		// leegt de scherm op de pc
     674:	88 e4       	ldi	r24, 0x48	; 72
     676:	90 e2       	ldi	r25, 0x20	; 32
     678:	9f 93       	push	r25
     67a:	8f 93       	push	r24
     67c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <printf>
	
	// overal van er printf staat komt er een zin te schrijnen op de PC. Dit gebruik ik om de xMega te testen
	printf("Sensor %s (Slave)\n", SENSOR_NAME);
     680:	8e e3       	ldi	r24, 0x3E	; 62
     682:	90 e2       	ldi	r25, 0x20	; 32
     684:	9f 93       	push	r25
     686:	8f 93       	push	r24
     688:	84 e5       	ldi	r24, 0x54	; 84
     68a:	90 e2       	ldi	r25, 0x20	; 32
     68c:	9f 93       	push	r25
     68e:	8f 93       	push	r24
     690:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <printf>
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0

	int hasSentSmokeNotification=0;
	int hasSentSmokeNotification2=0;
	int hasSentCONotification=0;
	int hasSentCONotification2=0;
     6a0:	c1 2c       	mov	r12, r1
     6a2:	d1 2c       	mov	r13, r1
	// overal van er printf staat komt er een zin te schrijnen op de PC. Dit gebruik ik om de xMega te testen
	printf("Sensor %s (Slave)\n", SENSOR_NAME);

	int hasSentSmokeNotification=0;
	int hasSentSmokeNotification2=0;
	int hasSentCONotification=0;
     6a4:	e1 2c       	mov	r14, r1
     6a6:	f1 2c       	mov	r15, r1
	
	// overal van er printf staat komt er een zin te schrijnen op de PC. Dit gebruik ik om de xMega te testen
	printf("Sensor %s (Slave)\n", SENSOR_NAME);

	int hasSentSmokeNotification=0;
	int hasSentSmokeNotification2=0;
     6a8:	a1 2c       	mov	r10, r1
     6aa:	b1 2c       	mov	r11, r1
	clear_screen();		// leegt de scherm op de pc
	
	// overal van er printf staat komt er een zin te schrijnen op de PC. Dit gebruik ik om de xMega te testen
	printf("Sensor %s (Slave)\n", SENSOR_NAME);

	int hasSentSmokeNotification=0;
     6ac:	81 2c       	mov	r8, r1
     6ae:	91 2c       	mov	r9, r1
	int hasSentCONotification=0;
	int hasSentCONotification2=0;

	// oneindig loop (1 = true, dus while(true))
	while (1) {
		if ( bit_is_clear(PORTD.IN,PIN3_bp) || !(PORTD.IN & PIN5_bm) ) {
     6b0:	08 e6       	ldi	r16, 0x68	; 104
     6b2:	16 e0       	ldi	r17, 0x06	; 6
			PORTD.OUTSET = PIN2_bm;
     6b4:	c0 e6       	ldi	r28, 0x60	; 96
     6b6:	d6 e0       	ldi	r29, 0x06	; 6
     6b8:	68 94       	set
     6ba:	66 24       	eor	r6, r6
     6bc:	62 f8       	bld	r6, 2
				hasSentCONotification2=0;
			}
		}
		else
		{
			PORTD.OUTCLR = PIN1_bm;
     6be:	68 94       	set
     6c0:	77 24       	eor	r7, r7
     6c2:	71 f8       	bld	r7, 1
	int hasSentCONotification=0;
	int hasSentCONotification2=0;

	// oneindig loop (1 = true, dus while(true))
	while (1) {
		if ( bit_is_clear(PORTD.IN,PIN3_bp) || !(PORTD.IN & PIN5_bm) ) {
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	83 ff       	sbrs	r24, 3
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <main+0x86>
     6cc:	88 85       	ldd	r24, Y+8	; 0x08
     6ce:	85 fd       	sbrc	r24, 5
     6d0:	12 c0       	rjmp	.+36     	; 0x6f6 <main+0xaa>
			PORTD.OUTSET = PIN2_bm;
     6d2:	6d 82       	std	Y+5, r6	; 0x05
			
			if(!hasSentSmokeNotification){
     6d4:	81 14       	cp	r8, r1
     6d6:	91 04       	cpc	r9, r1
     6d8:	f9 f4       	brne	.+62     	; 0x718 <main+0xcc>
				nrfStopListening();
     6da:	0e 94 19 05 	call	0xa32	; 0xa32 <nrfStopListening>
				stuur(M_SMOKE, "1");
     6de:	67 e6       	ldi	r22, 0x67	; 103
     6e0:	70 e2       	ldi	r23, 0x20	; 32
     6e2:	89 e6       	ldi	r24, 0x69	; 105
     6e4:	90 e2       	ldi	r25, 0x20	; 32
     6e6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stuur>
				
				hasSentSmokeNotification=1;
				hasSentSmokeNotification2=0;
     6ea:	a1 2c       	mov	r10, r1
     6ec:	b1 2c       	mov	r11, r1
			
			if(!hasSentSmokeNotification){
				nrfStopListening();
				stuur(M_SMOKE, "1");
				
				hasSentSmokeNotification=1;
     6ee:	88 24       	eor	r8, r8
     6f0:	83 94       	inc	r8
     6f2:	91 2c       	mov	r9, r1
     6f4:	11 c0       	rjmp	.+34     	; 0x718 <main+0xcc>
				hasSentSmokeNotification2=0;
			}
		}
		else
		{
			PORTD.OUTCLR = PIN2_bm;
     6f6:	6e 82       	std	Y+6, r6	; 0x06
			
			if(!hasSentSmokeNotification2){
     6f8:	a1 14       	cp	r10, r1
     6fa:	b1 04       	cpc	r11, r1
     6fc:	69 f4       	brne	.+26     	; 0x718 <main+0xcc>
				nrfStopListening();
     6fe:	0e 94 19 05 	call	0xa32	; 0xa32 <nrfStopListening>
				stuur(M_SMOKE, "0");
     702:	6c e6       	ldi	r22, 0x6C	; 108
     704:	70 e2       	ldi	r23, 0x20	; 32
     706:	89 e6       	ldi	r24, 0x69	; 105
     708:	90 e2       	ldi	r25, 0x20	; 32
     70a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stuur>
				
				hasSentSmokeNotification=0;
				hasSentSmokeNotification2=1;
     70e:	aa 24       	eor	r10, r10
     710:	a3 94       	inc	r10
     712:	b1 2c       	mov	r11, r1
			
			if(!hasSentSmokeNotification2){
				nrfStopListening();
				stuur(M_SMOKE, "0");
				
				hasSentSmokeNotification=0;
     714:	81 2c       	mov	r8, r1
     716:	91 2c       	mov	r9, r1
				hasSentSmokeNotification2=1;
			}
		}
		
		
		if ( bit_is_clear(PORTD.IN,PIN4_bp) ) {
     718:	f8 01       	movw	r30, r16
     71a:	80 81       	ld	r24, Z
     71c:	84 fd       	sbrc	r24, 4
     71e:	12 c0       	rjmp	.+36     	; 0x744 <main+0xf8>
			PORTD.OUTSET = PIN1_bm;
     720:	7d 82       	std	Y+5, r7	; 0x05
			
			if(!hasSentCONotification){
     722:	e1 14       	cp	r14, r1
     724:	f1 04       	cpc	r15, r1
     726:	f9 f4       	brne	.+62     	; 0x766 <main+0x11a>
				nrfStopListening();
     728:	0e 94 19 05 	call	0xa32	; 0xa32 <nrfStopListening>
				stuur(M_CO, "1");
     72c:	67 e6       	ldi	r22, 0x67	; 103
     72e:	70 e2       	ldi	r23, 0x20	; 32
     730:	8e e6       	ldi	r24, 0x6E	; 110
     732:	90 e2       	ldi	r25, 0x20	; 32
     734:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stuur>
				
				hasSentCONotification=1;
				hasSentCONotification2=0;
     738:	c1 2c       	mov	r12, r1
     73a:	d1 2c       	mov	r13, r1
			
			if(!hasSentCONotification){
				nrfStopListening();
				stuur(M_CO, "1");
				
				hasSentCONotification=1;
     73c:	ee 24       	eor	r14, r14
     73e:	e3 94       	inc	r14
     740:	f1 2c       	mov	r15, r1
     742:	11 c0       	rjmp	.+34     	; 0x766 <main+0x11a>
				hasSentCONotification2=0;
			}
		}
		else
		{
			PORTD.OUTCLR = PIN1_bm;
     744:	7e 82       	std	Y+6, r7	; 0x06
			
			if(!hasSentCONotification2){
     746:	c1 14       	cp	r12, r1
     748:	d1 04       	cpc	r13, r1
     74a:	69 f4       	brne	.+26     	; 0x766 <main+0x11a>
				nrfStopListening();
     74c:	0e 94 19 05 	call	0xa32	; 0xa32 <nrfStopListening>
				stuur(M_CO, "0");
     750:	6c e6       	ldi	r22, 0x6C	; 108
     752:	70 e2       	ldi	r23, 0x20	; 32
     754:	8e e6       	ldi	r24, 0x6E	; 110
     756:	90 e2       	ldi	r25, 0x20	; 32
     758:	0e 94 f6 02 	call	0x5ec	; 0x5ec <stuur>
				
				hasSentCONotification=0;
				hasSentCONotification2=1;
     75c:	cc 24       	eor	r12, r12
     75e:	c3 94       	inc	r12
     760:	d1 2c       	mov	r13, r1
			
			if(!hasSentCONotification2){
				nrfStopListening();
				stuur(M_CO, "0");
				
				hasSentCONotification=0;
     762:	e1 2c       	mov	r14, r1
     764:	f1 2c       	mov	r15, r1
     766:	ff ef       	ldi	r31, 0xFF	; 255
     768:	27 e8       	ldi	r18, 0x87	; 135
     76a:	83 e1       	ldi	r24, 0x13	; 19
     76c:	f1 50       	subi	r31, 0x01	; 1
     76e:	20 40       	sbci	r18, 0x00	; 0
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	e1 f7       	brne	.-8      	; 0x76c <main+0x120>
     774:	00 c0       	rjmp	.+0      	; 0x776 <main+0x12a>
     776:	00 00       	nop
     778:	a5 cf       	rjmp	.-182    	; 0x6c4 <main+0x78>

0000077a <nrfReadRegister>:
 * \brief   Disbale CRC
 */
void nrfDisableCRC( void )
{
  uint8_t config = nrfReadRegister(REG_CONFIG) & ~NRF_CONFIG_EN_CRC_bm;
  nrfWriteRegister( REG_CONFIG, config );
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	c0 ea       	ldi	r28, 0xA0	; 160
     782:	d6 e0       	ldi	r29, 0x06	; 6
     784:	10 e2       	ldi	r17, 0x20	; 32
     786:	1e 83       	std	Y+6, r17	; 0x06
     788:	8f 71       	andi	r24, 0x1F	; 31
     78a:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     794:	1d 83       	std	Y+5, r17	; 0x05
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	1f 91       	pop	r17
     79c:	08 95       	ret

0000079e <nrfWriteRegisterMulti>:
     79e:	df 92       	push	r13
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	7b 01       	movw	r14, r22
     7ae:	c4 2f       	mov	r28, r20
     7b0:	90 e2       	ldi	r25, 0x20	; 32
     7b2:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     7b6:	8f 71       	andi	r24, 0x1F	; 31
     7b8:	80 62       	ori	r24, 0x20	; 32
     7ba:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     7be:	d8 2e       	mov	r13, r24
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	8c 0f       	add	r24, r28
     7c4:	cc 23       	and	r28, r28
     7c6:	69 f0       	breq	.+26     	; 0x7e2 <nrfWriteRegisterMulti+0x44>
     7c8:	e7 01       	movw	r28, r14
     7ca:	08 2f       	mov	r16, r24
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	0e 0d       	add	r16, r14
     7d4:	1f 1d       	adc	r17, r15
     7d6:	89 91       	ld	r24, Y+
     7d8:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     7dc:	c0 17       	cp	r28, r16
     7de:	d1 07       	cpc	r29, r17
     7e0:	d1 f7       	brne	.-12     	; 0x7d6 <nrfWriteRegisterMulti+0x38>
     7e2:	80 e2       	ldi	r24, 0x20	; 32
     7e4:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     7e8:	8d 2d       	mov	r24, r13
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	08 95       	ret

000007fa <nrfWriteRegister>:
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	f6 2e       	mov	r15, r22
     806:	c0 ea       	ldi	r28, 0xA0	; 160
     808:	d6 e0       	ldi	r29, 0x06	; 6
     80a:	10 e2       	ldi	r17, 0x20	; 32
     80c:	1e 83       	std	Y+6, r17	; 0x06
     80e:	8f 71       	andi	r24, 0x1F	; 31
     810:	80 62       	ori	r24, 0x20	; 32
     812:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     816:	08 2f       	mov	r16, r24
     818:	8f 2d       	mov	r24, r15
     81a:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     81e:	1d 83       	std	Y+5, r17	; 0x05
     820:	80 2f       	mov	r24, r16
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	08 95       	ret

0000082e <nrfWritePayload>:
     82e:	bf 92       	push	r11
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	6c 01       	movw	r12, r24
     842:	84 2f       	mov	r24, r20
     844:	c0 91 15 20 	lds	r28, 0x2015	; 0x802015 <fixed_payload_size>
     848:	1c 2f       	mov	r17, r28
     84a:	6c 17       	cp	r22, r28
     84c:	08 f4       	brcc	.+2      	; 0x850 <nrfWritePayload+0x22>
     84e:	16 2f       	mov	r17, r22
     850:	90 91 89 20 	lds	r25, 0x2089	; 0x802089 <dynamic_payloads_enabled>
     854:	91 11       	cpse	r25, r1
     856:	25 c0       	rjmp	.+74     	; 0x8a2 <nrfWritePayload+0x74>
     858:	0c 2f       	mov	r16, r28
     85a:	01 1b       	sub	r16, r17
     85c:	90 e2       	ldi	r25, 0x20	; 32
     85e:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     862:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     866:	b8 2e       	mov	r11, r24
     868:	ee 24       	eor	r14, r14
     86a:	ea 94       	dec	r14
     86c:	e1 0e       	add	r14, r17
     86e:	11 11       	cpse	r17, r1
     870:	02 c0       	rjmp	.+4      	; 0x876 <nrfWritePayload+0x48>
     872:	0e c0       	rjmp	.+28     	; 0x890 <nrfWritePayload+0x62>
     874:	00 e0       	ldi	r16, 0x00	; 0
     876:	e6 01       	movw	r28, r12
     878:	f1 2c       	mov	r15, r1
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	e8 1a       	sub	r14, r24
     87e:	f8 0a       	sbc	r15, r24
     880:	ec 0c       	add	r14, r12
     882:	fd 1c       	adc	r15, r13
     884:	89 91       	ld	r24, Y+
     886:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     88a:	ec 16       	cp	r14, r28
     88c:	fd 06       	cpc	r15, r29
     88e:	d1 f7       	brne	.-12     	; 0x884 <nrfWritePayload+0x56>
     890:	00 23       	and	r16, r16
     892:	91 f0       	breq	.+36     	; 0x8b8 <nrfWritePayload+0x8a>
     894:	c0 2f       	mov	r28, r16
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     89c:	c1 50       	subi	r28, 0x01	; 1
     89e:	d9 f7       	brne	.-10     	; 0x896 <nrfWritePayload+0x68>
     8a0:	0b c0       	rjmp	.+22     	; 0x8b8 <nrfWritePayload+0x8a>
     8a2:	90 e2       	ldi	r25, 0x20	; 32
     8a4:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     8a8:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     8ac:	b8 2e       	mov	r11, r24
     8ae:	ee 24       	eor	r14, r14
     8b0:	ea 94       	dec	r14
     8b2:	e1 0e       	add	r14, r17
     8b4:	11 11       	cpse	r17, r1
     8b6:	de cf       	rjmp	.-68     	; 0x874 <nrfWritePayload+0x46>
     8b8:	80 e2       	ldi	r24, 0x20	; 32
     8ba:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     8be:	8b 2d       	mov	r24, r11
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	08 95       	ret

000008d4 <nrfReadPayload>:
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	6c 01       	movw	r12, r24
     8e8:	c0 91 15 20 	lds	r28, 0x2015	; 0x802015 <fixed_payload_size>
     8ec:	1c 2f       	mov	r17, r28
     8ee:	6c 17       	cp	r22, r28
     8f0:	08 f4       	brcc	.+2      	; 0x8f4 <nrfReadPayload+0x20>
     8f2:	16 2f       	mov	r17, r22
     8f4:	80 91 89 20 	lds	r24, 0x2089	; 0x802089 <dynamic_payloads_enabled>
     8f8:	81 11       	cpse	r24, r1
     8fa:	27 c0       	rjmp	.+78     	; 0x94a <nrfReadPayload+0x76>
     8fc:	0c 2f       	mov	r16, r28
     8fe:	01 1b       	sub	r16, r17
     900:	80 e2       	ldi	r24, 0x20	; 32
     902:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     906:	81 e6       	ldi	r24, 0x61	; 97
     908:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     90c:	b8 2e       	mov	r11, r24
     90e:	ee 24       	eor	r14, r14
     910:	ea 94       	dec	r14
     912:	e1 0e       	add	r14, r17
     914:	11 11       	cpse	r17, r1
     916:	02 c0       	rjmp	.+4      	; 0x91c <nrfReadPayload+0x48>
     918:	0f c0       	rjmp	.+30     	; 0x938 <nrfReadPayload+0x64>
     91a:	00 e0       	ldi	r16, 0x00	; 0
     91c:	e6 01       	movw	r28, r12
     91e:	f1 2c       	mov	r15, r1
     920:	8f ef       	ldi	r24, 0xFF	; 255
     922:	e8 1a       	sub	r14, r24
     924:	f8 0a       	sbc	r15, r24
     926:	ec 0c       	add	r14, r12
     928:	fd 1c       	adc	r15, r13
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     930:	89 93       	st	Y+, r24
     932:	ec 16       	cp	r14, r28
     934:	fd 06       	cpc	r15, r29
     936:	c9 f7       	brne	.-14     	; 0x92a <nrfReadPayload+0x56>
     938:	00 23       	and	r16, r16
     93a:	99 f0       	breq	.+38     	; 0x962 <nrfReadPayload+0x8e>
     93c:	c0 2f       	mov	r28, r16
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     944:	c1 50       	subi	r28, 0x01	; 1
     946:	d9 f7       	brne	.-10     	; 0x93e <nrfReadPayload+0x6a>
     948:	0c c0       	rjmp	.+24     	; 0x962 <nrfReadPayload+0x8e>
     94a:	80 e2       	ldi	r24, 0x20	; 32
     94c:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     950:	81 e6       	ldi	r24, 0x61	; 97
     952:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     956:	b8 2e       	mov	r11, r24
     958:	ee 24       	eor	r14, r14
     95a:	ea 94       	dec	r14
     95c:	e1 0e       	add	r14, r17
     95e:	11 11       	cpse	r17, r1
     960:	dc cf       	rjmp	.-72     	; 0x91a <nrfReadPayload+0x46>
     962:	80 e2       	ldi	r24, 0x20	; 32
     964:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     968:	8b 2d       	mov	r24, r11
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	08 95       	ret

0000097e <nrfRead>:
     97e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <nrfReadPayload>
     982:	87 e1       	ldi	r24, 0x17	; 23
     984:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     988:	81 70       	andi	r24, 0x01	; 1
     98a:	08 95       	ret

0000098c <nrfFlushRx>:
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	c0 ea       	ldi	r28, 0xA0	; 160
     994:	d6 e0       	ldi	r29, 0x06	; 6
     996:	10 e2       	ldi	r17, 0x20	; 32
     998:	1e 83       	std	Y+6, r17	; 0x06
     99a:	82 ee       	ldi	r24, 0xE2	; 226
     99c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     9a0:	1d 83       	std	Y+5, r17	; 0x05
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	08 95       	ret

000009aa <nrfFlushTx>:
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	c0 ea       	ldi	r28, 0xA0	; 160
     9b2:	d6 e0       	ldi	r29, 0x06	; 6
     9b4:	10 e2       	ldi	r17, 0x20	; 32
     9b6:	1e 83       	std	Y+6, r17	; 0x06
     9b8:	81 ee       	ldi	r24, 0xE1	; 225
     9ba:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     9be:	1d 83       	std	Y+5, r17	; 0x05
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	08 95       	ret

000009c8 <nrfStartListening>:
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     9ce:	81 fd       	sbrc	r24, 1
     9d0:	0c c0       	rjmp	.+24     	; 0x9ea <nrfStartListening+0x22>
     9d2:	68 2f       	mov	r22, r24
     9d4:	63 60       	ori	r22, 0x03	; 3
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     9dc:	8f e7       	ldi	r24, 0x7F	; 127
     9de:	9e e3       	ldi	r25, 0x3E	; 62
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <nrfStartListening+0x18>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <nrfStartListening+0x1e>
     9e6:	00 00       	nop
     9e8:	05 c0       	rjmp	.+10     	; 0x9f4 <nrfStartListening+0x2c>
     9ea:	68 2f       	mov	r22, r24
     9ec:	61 60       	ori	r22, 0x01	; 1
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     9f4:	8f e0       	ldi	r24, 0x0F	; 15
     9f6:	94 e0       	ldi	r25, 0x04	; 4
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <nrfStartListening+0x30>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <nrfStartListening+0x36>
     9fe:	00 00       	nop
     a00:	60 e7       	ldi	r22, 0x70	; 112
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     a08:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <addr_width>
     a0c:	64 e8       	ldi	r22, 0x84	; 132
     a0e:	70 e2       	ldi	r23, 0x20	; 32
     a10:	8a e0       	ldi	r24, 0x0A	; 10
     a12:	0e 94 cf 03 	call	0x79e	; 0x79e <nrfWriteRegisterMulti>
     a16:	0e 94 c6 04 	call	0x98c	; 0x98c <nrfFlushRx>
     a1a:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrfFlushTx>
     a1e:	80 e8       	ldi	r24, 0x80	; 128
     a20:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
     a24:	8f e0       	ldi	r24, 0x0F	; 15
     a26:	94 e0       	ldi	r25, 0x04	; 4
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <nrfStartListening+0x60>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <nrfStartListening+0x66>
     a2e:	00 00       	nop
     a30:	08 95       	ret

00000a32 <nrfStopListening>:
     a32:	80 e8       	ldi	r24, 0x80	; 128
     a34:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
     a38:	0e 94 c6 04 	call	0x98c	; 0x98c <nrfFlushRx>
     a3c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrfFlushTx>
     a40:	08 95       	ret

00000a42 <nrfStartWrite>:
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
     a4c:	16 2f       	mov	r17, r22
     a4e:	04 2f       	mov	r16, r20
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     a56:	81 fd       	sbrc	r24, 1
     a58:	0d c0       	rjmp	.+26     	; 0xa74 <nrfStartWrite+0x32>
     a5a:	68 2f       	mov	r22, r24
     a5c:	6e 7f       	andi	r22, 0xFE	; 254
     a5e:	62 60       	ori	r22, 0x02	; 2
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     a66:	8f e7       	ldi	r24, 0x7F	; 127
     a68:	9e e3       	ldi	r25, 0x3E	; 62
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	f1 f7       	brne	.-4      	; 0xa6a <nrfStartWrite+0x28>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <nrfStartWrite+0x2e>
     a70:	00 00       	nop
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <nrfStartWrite+0x3c>
     a74:	68 2f       	mov	r22, r24
     a76:	6e 7f       	andi	r22, 0xFE	; 254
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     a7e:	8f e0       	ldi	r24, 0x0F	; 15
     a80:	94 e0       	ldi	r25, 0x04	; 4
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <nrfStartWrite+0x40>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <nrfStartWrite+0x46>
     a88:	00 00       	nop
     a8a:	40 2f       	mov	r20, r16
     a8c:	61 2f       	mov	r22, r17
     a8e:	ce 01       	movw	r24, r28
     a90:	0e 94 17 04 	call	0x82e	; 0x82e <nrfWritePayload>
     a94:	e0 ea       	ldi	r30, 0xA0	; 160
     a96:	f6 e0       	ldi	r31, 0x06	; 6
     a98:	80 e8       	ldi	r24, 0x80	; 128
     a9a:	85 83       	std	Z+5, r24	; 0x05
     a9c:	9a e6       	ldi	r25, 0x6A	; 106
     a9e:	9a 95       	dec	r25
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <nrfStartWrite+0x5c>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <nrfStartWrite+0x62>
     aa4:	86 83       	std	Z+6, r24	; 0x06
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	1f 91       	pop	r17
     aac:	0f 91       	pop	r16
     aae:	08 95       	ret

00000ab0 <nrfWhatHappened>:
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	7c 01       	movw	r14, r24
     abe:	8b 01       	movw	r16, r22
     ac0:	ea 01       	movw	r28, r20
     ac2:	60 e7       	ldi	r22, 0x70	; 112
     ac4:	87 e0       	ldi	r24, 0x07	; 7
     ac6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     aca:	98 2f       	mov	r25, r24
     acc:	90 72       	andi	r25, 0x20	; 32
     ace:	f7 01       	movw	r30, r14
     ad0:	90 83       	st	Z, r25
     ad2:	98 2f       	mov	r25, r24
     ad4:	90 71       	andi	r25, 0x10	; 16
     ad6:	f8 01       	movw	r30, r16
     ad8:	90 83       	st	Z, r25
     ada:	80 74       	andi	r24, 0x40	; 64
     adc:	88 83       	st	Y, r24
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	08 95       	ret

00000aec <nrfOpenWritingPipe>:
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	ec 01       	movw	r28, r24
     af2:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <addr_width>
     af6:	bc 01       	movw	r22, r24
     af8:	8a e0       	ldi	r24, 0x0A	; 10
     afa:	0e 94 cf 03 	call	0x79e	; 0x79e <nrfWriteRegisterMulti>
     afe:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <addr_width>
     b02:	be 01       	movw	r22, r28
     b04:	80 e1       	ldi	r24, 0x10	; 16
     b06:	0e 94 cf 03 	call	0x79e	; 0x79e <nrfWriteRegisterMulti>
     b0a:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <fixed_payload_size>
     b0e:	60 32       	cpi	r22, 0x20	; 32
     b10:	20 f4       	brcc	.+8      	; 0xb1a <nrfOpenWritingPipe+0x2e>
     b12:	81 e1       	ldi	r24, 0x11	; 17
     b14:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <nrfOpenWritingPipe+0x36>
     b1a:	60 e2       	ldi	r22, 0x20	; 32
     b1c:	81 e1       	ldi	r24, 0x11	; 17
     b1e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	08 95       	ret

00000b28 <nrfOpenReadingPipe>:
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	c8 2f       	mov	r28, r24
     b32:	8b 01       	movw	r16, r22
     b34:	81 11       	cpse	r24, r1
     b36:	08 c0       	rjmp	.+16     	; 0xb48 <nrfOpenReadingPipe+0x20>
     b38:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <addr_width>
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	84 e8       	ldi	r24, 0x84	; 132
     b40:	90 e2       	ldi	r25, 0x20	; 32
     b42:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <memcpy>
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <nrfOpenReadingPipe+0x28>
     b48:	87 30       	cpi	r24, 0x07	; 7
     b4a:	78 f5       	brcc	.+94     	; 0xbaa <nrfOpenReadingPipe+0x82>
     b4c:	82 30       	cpi	r24, 0x02	; 2
     b4e:	58 f4       	brcc	.+22     	; 0xb66 <nrfOpenReadingPipe+0x3e>
     b50:	ec 2f       	mov	r30, r28
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	e3 58       	subi	r30, 0x83	; 131
     b56:	ff 4d       	sbci	r31, 0xDF	; 223
     b58:	40 91 14 20 	lds	r20, 0x2014	; 0x802014 <addr_width>
     b5c:	b8 01       	movw	r22, r16
     b5e:	80 81       	ld	r24, Z
     b60:	0e 94 cf 03 	call	0x79e	; 0x79e <nrfWriteRegisterMulti>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <nrfOpenReadingPipe+0x4e>
     b66:	e8 2f       	mov	r30, r24
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	e3 58       	subi	r30, 0x83	; 131
     b6c:	ff 4d       	sbci	r31, 0xDF	; 223
     b6e:	41 e0       	ldi	r20, 0x01	; 1
     b70:	80 81       	ld	r24, Z
     b72:	0e 94 cf 03 	call	0x79e	; 0x79e <nrfWriteRegisterMulti>
     b76:	d0 e0       	ldi	r29, 0x00	; 0
     b78:	fe 01       	movw	r30, r28
     b7a:	e9 58       	subi	r30, 0x89	; 137
     b7c:	ff 4d       	sbci	r31, 0xDF	; 223
     b7e:	60 91 15 20 	lds	r22, 0x2015	; 0x802015 <fixed_payload_size>
     b82:	80 81       	ld	r24, Z
     b84:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     b8e:	cf 58       	subi	r28, 0x8F	; 143
     b90:	df 4d       	sbci	r29, 0xDF	; 223
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	08 80       	ld	r0, Y
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <nrfOpenReadingPipe+0x76>
     b9a:	66 0f       	add	r22, r22
     b9c:	77 1f       	adc	r23, r23
     b9e:	0a 94       	dec	r0
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <nrfOpenReadingPipe+0x72>
     ba2:	68 2b       	or	r22, r24
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <nrfToggleFeatures>:
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	c0 ea       	ldi	r28, 0xA0	; 160
     bbc:	d6 e0       	ldi	r29, 0x06	; 6
     bbe:	10 e2       	ldi	r17, 0x20	; 32
     bc0:	1e 83       	std	Y+6, r17	; 0x06
     bc2:	80 e5       	ldi	r24, 0x50	; 80
     bc4:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     bc8:	83 e7       	ldi	r24, 0x73	; 115
     bca:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     bce:	1d 83       	std	Y+5, r17	; 0x05
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	08 95       	ret

00000bd8 <nrfEnableDynamicPayloads>:
     bd8:	8d e1       	ldi	r24, 0x1D	; 29
     bda:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     bde:	68 2f       	mov	r22, r24
     be0:	64 60       	ori	r22, 0x04	; 4
     be2:	8d e1       	ldi	r24, 0x1D	; 29
     be4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     be8:	8d e1       	ldi	r24, 0x1D	; 29
     bea:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     bee:	81 11       	cpse	r24, r1
     bf0:	0a c0       	rjmp	.+20     	; 0xc06 <nrfEnableDynamicPayloads+0x2e>
     bf2:	0e 94 da 05 	call	0xbb4	; 0xbb4 <nrfToggleFeatures>
     bf6:	8d e1       	ldi	r24, 0x1D	; 29
     bf8:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     bfc:	68 2f       	mov	r22, r24
     bfe:	64 60       	ori	r22, 0x04	; 4
     c00:	8d e1       	ldi	r24, 0x1D	; 29
     c02:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c06:	8c e1       	ldi	r24, 0x1C	; 28
     c08:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     c0c:	68 2f       	mov	r22, r24
     c0e:	6f 63       	ori	r22, 0x3F	; 63
     c10:	8c e1       	ldi	r24, 0x1C	; 28
     c12:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	80 93 89 20 	sts	0x2089, r24	; 0x802089 <dynamic_payloads_enabled>
     c1c:	08 95       	ret

00000c1e <nrfGetDynamicPayloadSize>:
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	c0 ea       	ldi	r28, 0xA0	; 160
     c26:	d6 e0       	ldi	r29, 0x06	; 6
     c28:	10 e2       	ldi	r17, 0x20	; 32
     c2a:	1e 83       	std	Y+6, r17	; 0x06
     c2c:	80 e6       	ldi	r24, 0x60	; 96
     c2e:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	0e 94 0a 07 	call	0xe14	; 0xe14 <nrfspiTransfer>
     c38:	1d 83       	std	Y+5, r17	; 0x05
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	08 95       	ret

00000c42 <nrfSetChannel>:
     c42:	88 23       	and	r24, r24
     c44:	2c f0       	brlt	.+10     	; 0xc50 <nrfSetChannel+0xe>
     c46:	68 2f       	mov	r22, r24
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c4e:	08 95       	ret
     c50:	6f e7       	ldi	r22, 0x7F	; 127
     c52:	85 e0       	ldi	r24, 0x05	; 5
     c54:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c58:	08 95       	ret

00000c5a <nrfSetAutoAck>:
     c5a:	88 23       	and	r24, r24
     c5c:	29 f0       	breq	.+10     	; 0xc68 <nrfSetAutoAck+0xe>
     c5e:	6f e3       	ldi	r22, 0x3F	; 63
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c66:	08 95       	ret
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c70:	08 95       	ret

00000c72 <nrfSetPALevel>:
     c72:	cf 93       	push	r28
     c74:	c8 2f       	mov	r28, r24
     c76:	86 e0       	ldi	r24, 0x06	; 6
     c78:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     c7c:	89 7f       	andi	r24, 0xF9	; 249
     c7e:	c6 70       	andi	r28, 0x06	; 6
     c80:	68 2f       	mov	r22, r24
     c82:	6c 2b       	or	r22, r28
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <nrfSetDataRate>:
     c8e:	cf 93       	push	r28
     c90:	c8 2f       	mov	r28, r24
     c92:	86 e0       	ldi	r24, 0x06	; 6
     c94:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     c98:	87 7d       	andi	r24, 0xD7	; 215
     c9a:	9c 2f       	mov	r25, r28
     c9c:	98 72       	andi	r25, 0x28	; 40
     c9e:	68 2f       	mov	r22, r24
     ca0:	69 2b       	or	r22, r25
     ca2:	86 e0       	ldi	r24, 0x06	; 6
     ca4:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	c8 13       	cpse	r28, r24
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	89 2f       	mov	r24, r25
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <nrfSetCRCLength>:
     cba:	cf 93       	push	r28
     cbc:	c8 2f       	mov	r28, r24
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     cc4:	83 7f       	andi	r24, 0xF3	; 243
     cc6:	cc 70       	andi	r28, 0x0C	; 12
     cc8:	68 2f       	mov	r22, r24
     cca:	6c 2b       	or	r22, r28
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <nrfSetRetries>:
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     cd6:	68 2b       	or	r22, r24
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     cde:	08 95       	ret

00000ce0 <nrfGetMaxTimeout>:
 *
 * @return  maximum timeout in us
 */

uint16_t nrfGetMaxTimeout(void){
  uint8_t retries = nrfReadRegister(REG_SETUP_RETR);
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
  uint8_t delay   = (retries & NRF_SETUP_ARD_gm) >> NRF_SETUP_ARD_gp;
  uint8_t count   = (retries & NRF_SETUP_ARC_gm) >> NRF_SETUP_ARC_gp;

  uint16_t to = 250 * (delay + 1) * (count + 1);

  return to ;
     ce6:	28 2f       	mov	r18, r24
     ce8:	22 95       	swap	r18
     cea:	2f 70       	andi	r18, 0x0F	; 15
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	2f 5f       	subi	r18, 0xFF	; 255
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	9a ef       	ldi	r25, 0xFA	; 250
     cf4:	92 9f       	mul	r25, r18
     cf6:	a0 01       	movw	r20, r0
     cf8:	93 9f       	mul	r25, r19
     cfa:	50 0d       	add	r21, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	8f 70       	andi	r24, 0x0F	; 15
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	01 96       	adiw	r24, 0x01	; 1
}
     d04:	9c 01       	movw	r18, r24
     d06:	42 9f       	mul	r20, r18
     d08:	c0 01       	movw	r24, r0
     d0a:	43 9f       	mul	r20, r19
     d0c:	90 0d       	add	r25, r0
     d0e:	52 9f       	mul	r21, r18
     d10:	90 0d       	add	r25, r0
     d12:	11 24       	eor	r1, r1
     d14:	08 95       	ret

00000d16 <nrfWaitForAck>:
// from Wouter + nrfGetMaxTimeout()
// TODO?  iAckTimer zou ook een globale waarde kunnen zijn,
//        die bij init bepaald of bij setRetries gezet wordt
//        is nrfFlushRx nodig ??
uint8_t nrfWaitForAck(void)
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
     d1a:	0e 94 70 06 	call	0xce0	; 0xce0 <nrfGetMaxTimeout>
     d1e:	9c 01       	movw	r18, r24
     d20:	36 95       	lsr	r19
     d22:	27 95       	ror	r18
     d24:	36 95       	lsr	r19
     d26:	27 95       	ror	r18
     d28:	ab e7       	ldi	r26, 0x7B	; 123
     d2a:	b4 e1       	ldi	r27, 0x14	; 20
     d2c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__umulhisi3>
     d30:	ec 01       	movw	r28, r24
     d32:	d6 95       	lsr	r29
     d34:	c7 95       	ror	r28
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     d36:	20 97       	sbiw	r28, 0x00	; 0
     d38:	71 f0       	breq	.+28     	; 0xd56 <nrfWaitForAck+0x40>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     d3a:	87 e0       	ldi	r24, 0x07	; 7
     d3c:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
    iAckTimer--;
     d40:	21 97       	sbiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	ef e1       	ldi	r30, 0x1F	; 31
     d44:	f3 e0       	ldi	r31, 0x03	; 3
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <nrfWaitForAck+0x30>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <nrfWaitForAck+0x36>
     d4c:	00 00       	nop
  uint16_t iAckTimer;  // Time-out
  uint8_t  iIRQ = 0;
  uint8_t  iSucces = 0;

  iAckTimer = nrfGetMaxTimeout() / 100;
  while (!iIRQ && iAckTimer) {   // Interrupt on TX complete, Maximum retransmits reached, or timer expired
     d4e:	80 73       	andi	r24, 0x30	; 48
     d50:	11 f4       	brne	.+4      	; 0xd56 <nrfWaitForAck+0x40>
     d52:	20 97       	sbiw	r28, 0x00	; 0
     d54:	91 f7       	brne	.-28     	; 0xd3a <nrfWaitForAck+0x24>
    iIRQ = nrfReadRegister(REG_STATUS) & (NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
    iAckTimer--;
    _delay_us(100);
  }
  iSucces = nrfReadRegister(REG_STATUS) & NRF_STATUS_TX_DS_bm;
     d56:	87 e0       	ldi	r24, 0x07	; 7
     d58:	0e 94 bd 03 	call	0x77a	; 0x77a <nrfReadRegister>
     d5c:	c8 2f       	mov	r28, r24

  nrfFlushRx();       // ??
     d5e:	0e 94 c6 04 	call	0x98c	; 0x98c <nrfFlushRx>
  nrfFlushTx();       // Flush TX FIFO because of MAX_RT
     d62:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrfFlushTx>
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm|NRF_STATUS_TX_DS_bm|NRF_STATUS_MAX_RT_bm);
     d66:	60 e7       	ldi	r22, 0x70	; 112
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>

  return(iSucces);    // Returns 32 on ACK received, 0 on time out
}
     d6e:	8c 2f       	mov	r24, r28
     d70:	80 72       	andi	r24, 0x20	; 32
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <nrfWrite>:
uint8_t nrfWrite( uint8_t* buf, uint8_t len)
{
  uint8_t iReturn;

  //nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD_NO_ACK);
  nrfStartWrite(buf, len, NRF_W_TX_PAYLOAD);
     d78:	40 ea       	ldi	r20, 0xA0	; 160
     d7a:	0e 94 21 05 	call	0xa42	; 0xa42 <nrfStartWrite>

  iReturn = nrfWaitForAck();  // Wait until packet ACK is received or timed out
     d7e:	0e 94 8b 06 	call	0xd16	; 0xd16 <nrfWaitForAck>

  return(iReturn);            // Returns 32 on ACK received, 0 on time out
}
     d82:	08 95       	ret

00000d84 <nrfClearInterruptBits>:
 * \brief   Clear Interrupt Bits
 *
 */
void nrfClearInterruptBits(void)
{
  nrfWriteRegister(REG_STATUS, NRF_STATUS_RX_DR_bm | NRF_STATUS_TX_DS_bm | NRF_STATUS_MAX_RT_bm );
     d84:	60 e7       	ldi	r22, 0x70	; 112
     d86:	87 e0       	ldi	r24, 0x07	; 7
     d88:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
     d8c:	08 95       	ret

00000d8e <nrfBegin>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d8e:	8f e3       	ldi	r24, 0x3F	; 63
     d90:	9c e9       	ldi	r25, 0x9C	; 156
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <nrfBegin+0x4>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <nrfBegin+0xa>
     d98:	00 00       	nop
 * \param   delay   (groupsconfiguration NRF_SETUP_ARD_#US_gc for delay #)
 * \param   retries (groupsconfiguration NRF_SETUP_ARC_#RETRANSMIT_gc for retries #)
 */
void nrfSetRetries(uint8_t delay, uint8_t retries)
{
  nrfWriteRegister(REG_SETUP_RETR, (delay|retries));
     d9a:	6f e5       	ldi	r22, 0x5F	; 95
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>
  // sizes must never be used. See documentation for a more complete explanation.
  //  nrfWriteRegister(REG_SETUP_RETR, NRF_SETUP_ARD_1500US_gc | NRF_SETUP_ARC_15RETRANSMIT_gc );
  nrfSetRetries(NRF_SETUP_ARD_1500US_gc, NRF_SETUP_ARC_15RETRANSMIT_gc);

  // Restore our default PA level
  nrfSetPALevel( NRF_RF_SETUP_PWR_0DBM_gc ) ;
     da2:	86 e0       	ldi	r24, 0x06	; 6
     da4:	0e 94 39 06 	call	0xc72	; 0xc72 <nrfSetPALevel>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( nrfSetDataRate( NRF_RF_SETUP_RF_DR_250K_gc ) )
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfSetDataRate>
     dae:	88 23       	and	r24, r24
     db0:	19 f0       	breq	.+6      	; 0xdb8 <nrfBegin+0x2a>
  {
    p_variant = 1 ;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <p_variant>
  }

  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  nrfSetDataRate( NRF_RF_SETUP_RF_DR_1M_gc );
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 47 06 	call	0xc8e	; 0xc8e <nrfSetDataRate>

  // Initialize CRC and request 2-byte (16bit) CRC
  nrfSetCRCLength( NRF_CONFIG_CRC_16_gc ) ;
     dbe:	8c e0       	ldi	r24, 0x0C	; 12
     dc0:	0e 94 5d 06 	call	0xcba	; 0xcba <nrfSetCRCLength>

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  nrfWriteRegister(REG_DYNPD, 0);
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	8c e1       	ldi	r24, 0x1C	; 28
     dc8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <nrfWriteRegister>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  nrfSetChannel(76);
     dcc:	8c e4       	ldi	r24, 0x4C	; 76
     dce:	0e 94 21 06 	call	0xc42	; 0xc42 <nrfSetChannel>

  // Reset current status
  // Notice reset and flush is the last thing we do
  nrfClearInterruptBits();
     dd2:	0e 94 c2 06 	call	0xd84	; 0xd84 <nrfClearInterruptBits>
  nrfFlushRx();
     dd6:	0e 94 c6 04 	call	0x98c	; 0x98c <nrfFlushRx>
  nrfFlushTx();
     dda:	0e 94 d5 04 	call	0x9aa	; 0x9aa <nrfFlushTx>
     dde:	08 95       	ret

00000de0 <nrfspiInit>:
 *  \return void
 */

void nrfspiInit(void)
{
  PORTC.DIRSET = PIN3_bm;  // MOSI
     de0:	e0 e4       	ldi	r30, 0x40	; 64
     de2:	f6 e0       	ldi	r31, 0x06	; 6
     de4:	88 e0       	ldi	r24, 0x08	; 8
     de6:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRCLR = PIN2_bm;  // MISO
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	82 83       	std	Z+2, r24	; 0x02
  PORTC.DIRSET = PIN1_bm;  // SCK
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRSET = PIN5_bm;  // CSN
     df0:	e0 ea       	ldi	r30, 0xA0	; 160
     df2:	f6 e0       	ldi	r31, 0x06	; 6
     df4:	80 e2       	ldi	r24, 0x20	; 32
     df6:	81 83       	std	Z+1, r24	; 0x01
  PORTF.DIRCLR = PIN6_bm;  // IRQ
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	82 83       	std	Z+2, r24	; 0x02
  PORTF.DIRSET = PIN7_bm;  // CE
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	81 83       	std	Z+1, r24	; 0x01

  USARTC0.CTRLB = USART_TXEN_bm | USART_RXEN_bm;
     e00:	e0 ea       	ldi	r30, 0xA0	; 160
     e02:	f8 e0       	ldi	r31, 0x08	; 8
     e04:	88 e1       	ldi	r24, 0x18	; 24
     e06:	84 83       	std	Z+4, r24	; 0x04
  USARTC0.CTRLC = USART_CMODE_MSPI_gc;
     e08:	80 ec       	ldi	r24, 0xC0	; 192
     e0a:	85 83       	std	Z+5, r24	; 0x05

  USARTC0.BAUDCTRLB = 0;
     e0c:	17 82       	std	Z+7, r1	; 0x07
  USARTC0.BAUDCTRLA = 1;   // F_CPU/(2*(BSEL+1))  is 8MHz on 32MHz CPU
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	86 83       	std	Z+6, r24	; 0x06
     e12:	08 95       	ret

00000e14 <nrfspiTransfer>:
 *
 *  \return  Data received from slave (status of the nrf24L01p)
 */
uint8_t nrfspiTransfer(uint8_t iData)
{
  USARTC0.DATA = iData;
     e14:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
  while( !(USARTC0.STATUS & USART_TXCIF_bm) );
     e18:	e0 ea       	ldi	r30, 0xA0	; 160
     e1a:	f8 e0       	ldi	r31, 0x08	; 8
     e1c:	81 81       	ldd	r24, Z+1	; 0x01
     e1e:	86 ff       	sbrs	r24, 6
     e20:	fd cf       	rjmp	.-6      	; 0xe1c <nrfspiTransfer+0x8>
  USARTC0.STATUS |= USART_TXCIF_bm;
     e22:	e0 ea       	ldi	r30, 0xA0	; 160
     e24:	f8 e0       	ldi	r31, 0x08	; 8
     e26:	81 81       	ldd	r24, Z+1	; 0x01
     e28:	80 64       	ori	r24, 0x40	; 64
     e2a:	81 83       	std	Z+1, r24	; 0x01

  return USARTC0.DATA;
     e2c:	80 81       	ld	r24, Z
}
     e2e:	08 95       	ret

00000e30 <uart_fputc>:
 *  \param  stream  file pointer
 *
 *  \return always zero
 */
int uart_fputc(char c, FILE *stream)
{
     e30:	cf 93       	push	r28
     e32:	c8 2f       	mov	r28, r24
  while( ! USART_TXBuffer_FreeSpace(&uartF0) );
     e34:	8a ea       	ldi	r24, 0xAA	; 170
     e36:	90 e2       	ldi	r25, 0x20	; 32
     e38:	0e 94 6d 09 	call	0x12da	; 0x12da <USART_TXBuffer_FreeSpace>
     e3c:	88 23       	and	r24, r24
     e3e:	d1 f3       	breq	.-12     	; 0xe34 <uart_fputc+0x4>

  if (c == '\n') uart_putc(&uartF0, '\r');
     e40:	ca 30       	cpi	r28, 0x0A	; 10
     e42:	29 f4       	brne	.+10     	; 0xe4e <uart_fputc+0x1e>
     e44:	6d e0       	ldi	r22, 0x0D	; 13
     e46:	8a ea       	ldi	r24, 0xAA	; 170
     e48:	90 e2       	ldi	r25, 0x20	; 32
     e4a:	0e 94 c4 07 	call	0xf88	; 0xf88 <uart_putc>
  uart_putc(&uartF0, c);
     e4e:	6c 2f       	mov	r22, r28
     e50:	8a ea       	ldi	r24, 0xAA	; 170
     e52:	90 e2       	ldi	r25, 0x20	; 32
     e54:	0e 94 c4 07 	call	0xf88	; 0xf88 <uart_putc>

  return 0;
}
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	cf 91       	pop	r28
     e5e:	08 95       	ret

00000e60 <uart_fgetc>:
 */
int uart_fgetc(FILE * stream)
{
  int c;

  while ( (c = uart_getc(&uartF0)) == UART_NO_DATA) ;
     e60:	8a ea       	ldi	r24, 0xAA	; 170
     e62:	90 e2       	ldi	r25, 0x20	; 32
     e64:	0e 94 b3 07 	call	0xf66	; 0xf66 <uart_getc>
     e68:	81 15       	cp	r24, r1
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	92 07       	cpc	r25, r18
     e6e:	c1 f3       	breq	.-16     	; 0xe60 <uart_fgetc>

  return c;
}
     e70:	08 95       	ret

00000e72 <__vector_119>:
/*!
 *  \brief Interrupt Service Routine for receiving with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_RXC_vect)
{
     e72:	1f 92       	push	r1
     e74:	0f 92       	push	r0
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	0f 92       	push	r0
     e7a:	11 24       	eor	r1, r1
     e7c:	0b b6       	in	r0, 0x3b	; 59
     e7e:	0f 92       	push	r0
     e80:	2f 93       	push	r18
     e82:	3f 93       	push	r19
     e84:	4f 93       	push	r20
     e86:	5f 93       	push	r21
     e88:	6f 93       	push	r22
     e8a:	7f 93       	push	r23
     e8c:	8f 93       	push	r24
     e8e:	9f 93       	push	r25
     e90:	af 93       	push	r26
     e92:	bf 93       	push	r27
     e94:	ef 93       	push	r30
     e96:	ff 93       	push	r31
  USART_RXComplete(&uartF0);
     e98:	8a ea       	ldi	r24, 0xAA	; 170
     e9a:	90 e2       	ldi	r25, 0x20	; 32
     e9c:	0e 94 bb 09 	call	0x1376	; 0x1376 <USART_RXComplete>
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_120>:
/*!
 *  \brief Interrupt Service Routine for transmitting with UARTF0.
 *         This ISR is only defined if the macro ENABLE_UART_F0 is defined
 */
ISR(USARTF0_DRE_vect)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	11 24       	eor	r1, r1
     ed0:	0b b6       	in	r0, 0x3b	; 59
     ed2:	0f 92       	push	r0
     ed4:	2f 93       	push	r18
     ed6:	3f 93       	push	r19
     ed8:	4f 93       	push	r20
     eda:	5f 93       	push	r21
     edc:	6f 93       	push	r22
     ede:	7f 93       	push	r23
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	af 93       	push	r26
     ee6:	bf 93       	push	r27
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
  USART_DataRegEmpty(&uartF0);
     eec:	8a ea       	ldi	r24, 0xAA	; 170
     eee:	90 e2       	ldi	r25, 0x20	; 32
     ef0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <USART_DataRegEmpty>
}
     ef4:	ff 91       	pop	r31
     ef6:	ef 91       	pop	r30
     ef8:	bf 91       	pop	r27
     efa:	af 91       	pop	r26
     efc:	9f 91       	pop	r25
     efe:	8f 91       	pop	r24
     f00:	7f 91       	pop	r23
     f02:	6f 91       	pop	r22
     f04:	5f 91       	pop	r21
     f06:	4f 91       	pop	r20
     f08:	3f 91       	pop	r19
     f0a:	2f 91       	pop	r18
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <init_stream>:
 *  \param  fcpu  the clock frequency
 *
 *  \return void
 */
void init_stream(uint32_t fcpu)
{
     f1a:	cf 92       	push	r12
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
  init_uart(&uartF0, &USARTF0, fcpu, BAUD, CLK2X);
     f28:	c1 2c       	mov	r12, r1
     f2a:	e1 2c       	mov	r14, r1
     f2c:	12 ec       	ldi	r17, 0xC2	; 194
     f2e:	f1 2e       	mov	r15, r17
     f30:	01 e0       	ldi	r16, 0x01	; 1
     f32:	10 e0       	ldi	r17, 0x00	; 0
     f34:	60 ea       	ldi	r22, 0xA0	; 160
     f36:	7b e0       	ldi	r23, 0x0B	; 11
     f38:	8a ea       	ldi	r24, 0xAA	; 170
     f3a:	90 e2       	ldi	r25, 0x20	; 32
     f3c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <init_uart>
  stdout = stdin = &uart_stdinout;
     f40:	e5 eb       	ldi	r30, 0xB5	; 181
     f42:	f2 e2       	ldi	r31, 0x22	; 34
     f44:	87 e1       	ldi	r24, 0x17	; 23
     f46:	90 e2       	ldi	r25, 0x20	; 32
     f48:	80 83       	st	Z, r24
     f4a:	91 83       	std	Z+1, r25	; 0x01
     f4c:	82 83       	std	Z+2, r24	; 0x02
     f4e:	93 83       	std	Z+3, r25	; 0x03

  PMIC.CTRL |= PMIC_LOLVLEN_bm;           // Low level interrupt
     f50:	e0 ea       	ldi	r30, 0xA0	; 160
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	81 60       	ori	r24, 0x01	; 1
     f58:	82 83       	std	Z+2, r24	; 0x02
}
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	cf 90       	pop	r12
     f64:	08 95       	ret

00000f66 <uart_getc>:
  char c;

  while ( (c = *s++) ) {
    uart_putc(uart, c);
  }
}
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
     f6c:	0e 94 a3 09 	call	0x1346	; 0x1346 <USART_RXBufferData_Available>
     f70:	88 23       	and	r24, r24
     f72:	29 f0       	breq	.+10     	; 0xf7e <uart_getc+0x18>
     f74:	ce 01       	movw	r24, r28
     f76:	0e 94 ae 09 	call	0x135c	; 0x135c <USART_RXBuffer_GetByte>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <uart_getc+0x1c>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	df 91       	pop	r29
     f84:	cf 91       	pop	r28
     f86:	08 95       	ret

00000f88 <uart_putc>:
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	ec 01       	movw	r28, r24
     f90:	16 2f       	mov	r17, r22
     f92:	0e 94 6d 09 	call	0x12da	; 0x12da <USART_TXBuffer_FreeSpace>
     f96:	88 23       	and	r24, r24
     f98:	21 f0       	breq	.+8      	; 0xfa2 <uart_putc+0x1a>
     f9a:	61 2f       	mov	r22, r17
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <USART_TXBuffer_PutByte>
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	08 95       	ret

00000faa <set_usart_txrx_direction>:
 *  \return void
 */
void set_usart_txrx_direction(USART_t *usart)
{
  #ifdef USARTC0
   if ( (uint16_t) usart == (uint16_t) &USARTC0 ) {
     faa:	80 3a       	cpi	r24, 0xA0	; 160
     fac:	28 e0       	ldi	r18, 0x08	; 8
     fae:	92 07       	cpc	r25, r18
     fb0:	39 f4       	brne	.+14     	; 0xfc0 <set_usart_txrx_direction+0x16>
     PORTC.DIRSET      = PIN3_bm;
     fb2:	e0 e4       	ldi	r30, 0x40	; 64
     fb4:	f6 e0       	ldi	r31, 0x06	; 6
     fb6:	88 e0       	ldi	r24, 0x08	; 8
     fb8:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN2_bm;
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	82 83       	std	Z+2, r24	; 0x02
     return;
     fbe:	08 95       	ret
   }
  #endif
  #ifdef USARTC1
   if ( (uint16_t) usart == (uint16_t) &USARTC1 ) {
     fc0:	80 3b       	cpi	r24, 0xB0	; 176
     fc2:	28 e0       	ldi	r18, 0x08	; 8
     fc4:	92 07       	cpc	r25, r18
     fc6:	39 f4       	brne	.+14     	; 0xfd6 <set_usart_txrx_direction+0x2c>
     PORTC.DIRSET      = PIN7_bm;
     fc8:	e0 e4       	ldi	r30, 0x40	; 64
     fca:	f6 e0       	ldi	r31, 0x06	; 6
     fcc:	80 e8       	ldi	r24, 0x80	; 128
     fce:	81 83       	std	Z+1, r24	; 0x01
     PORTC.DIRCLR      = PIN6_bm;
     fd0:	80 e4       	ldi	r24, 0x40	; 64
     fd2:	82 83       	std	Z+2, r24	; 0x02
     return;
     fd4:	08 95       	ret
   }
  #endif
  #ifdef USARTD0
   if ( (uint16_t) usart == (uint16_t) &USARTD0) {
     fd6:	80 3a       	cpi	r24, 0xA0	; 160
     fd8:	29 e0       	ldi	r18, 0x09	; 9
     fda:	92 07       	cpc	r25, r18
     fdc:	39 f4       	brne	.+14     	; 0xfec <set_usart_txrx_direction+0x42>
     PORTD.DIRSET      = PIN3_bm;
     fde:	e0 e6       	ldi	r30, 0x60	; 96
     fe0:	f6 e0       	ldi	r31, 0x06	; 6
     fe2:	88 e0       	ldi	r24, 0x08	; 8
     fe4:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN2_bm;
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	82 83       	std	Z+2, r24	; 0x02
     return;
     fea:	08 95       	ret
   }
  #endif
  #ifdef USARTD1
   if ( (uint16_t) usart == (uint16_t) &USARTD1 ) {
     fec:	80 3b       	cpi	r24, 0xB0	; 176
     fee:	29 e0       	ldi	r18, 0x09	; 9
     ff0:	92 07       	cpc	r25, r18
     ff2:	39 f4       	brne	.+14     	; 0x1002 <set_usart_txrx_direction+0x58>
     PORTD.DIRSET      = PIN7_bm;
     ff4:	e0 e6       	ldi	r30, 0x60	; 96
     ff6:	f6 e0       	ldi	r31, 0x06	; 6
     ff8:	80 e8       	ldi	r24, 0x80	; 128
     ffa:	81 83       	std	Z+1, r24	; 0x01
     PORTD.DIRCLR      = PIN6_bm;
     ffc:	80 e4       	ldi	r24, 0x40	; 64
     ffe:	82 83       	std	Z+2, r24	; 0x02
     return;
    1000:	08 95       	ret
   }
  #endif
  #ifdef USARTE0
   if ( (uint16_t) usart == (uint16_t) &USARTE0) {
    1002:	80 3a       	cpi	r24, 0xA0	; 160
    1004:	2a e0       	ldi	r18, 0x0A	; 10
    1006:	92 07       	cpc	r25, r18
    1008:	39 f4       	brne	.+14     	; 0x1018 <set_usart_txrx_direction+0x6e>
     PORTE.DIRSET      = PIN3_bm;
    100a:	e0 e8       	ldi	r30, 0x80	; 128
    100c:	f6 e0       	ldi	r31, 0x06	; 6
    100e:	88 e0       	ldi	r24, 0x08	; 8
    1010:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN2_bm;
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	82 83       	std	Z+2, r24	; 0x02
     return;
    1016:	08 95       	ret
   }
  #endif
  #ifdef USARTE1
   if ( (uint16_t) usart == (uint16_t) &USARTE1) {
    1018:	80 3b       	cpi	r24, 0xB0	; 176
    101a:	2a e0       	ldi	r18, 0x0A	; 10
    101c:	92 07       	cpc	r25, r18
    101e:	39 f4       	brne	.+14     	; 0x102e <set_usart_txrx_direction+0x84>
     PORTE.DIRSET      = PIN7_bm;
    1020:	e0 e8       	ldi	r30, 0x80	; 128
    1022:	f6 e0       	ldi	r31, 0x06	; 6
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	81 83       	std	Z+1, r24	; 0x01
     PORTE.DIRCLR      = PIN6_bm;
    1028:	80 e4       	ldi	r24, 0x40	; 64
    102a:	82 83       	std	Z+2, r24	; 0x02
     return;
    102c:	08 95       	ret
   }
  #endif
  #ifdef USARTF0
   if ( (uint16_t) usart == (uint16_t) &USARTF0) {
    102e:	80 3a       	cpi	r24, 0xA0	; 160
    1030:	9b 40       	sbci	r25, 0x0B	; 11
    1032:	31 f4       	brne	.+12     	; 0x1040 <set_usart_txrx_direction+0x96>
     PORTF.DIRSET      = PIN3_bm;
    1034:	e0 ea       	ldi	r30, 0xA0	; 160
    1036:	f6 e0       	ldi	r31, 0x06	; 6
    1038:	88 e0       	ldi	r24, 0x08	; 8
    103a:	81 83       	std	Z+1, r24	; 0x01
     PORTF.DIRCLR      = PIN2_bm;
    103c:	84 e0       	ldi	r24, 0x04	; 4
    103e:	82 83       	std	Z+2, r24	; 0x02
    1040:	08 95       	ret

00001042 <calc_bsel>:
 *  N is a factor which is 16 with no clock doubling and 8 with clock doubling
 *
 *  \return the calculated BSEL
 */
uint16_t calc_bsel(uint32_t f_cpu, uint32_t baud, int8_t scale, uint8_t clk2x)
{
    1042:	4f 92       	push	r4
    1044:	5f 92       	push	r5
    1046:	6f 92       	push	r6
    1048:	7f 92       	push	r7
    104a:	8f 92       	push	r8
    104c:	9f 92       	push	r9
    104e:	af 92       	push	r10
    1050:	bf 92       	push	r11
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	49 01       	movw	r8, r18
    1064:	5a 01       	movw	r10, r20
  uint8_t factor = 16;

  factor = factor >> (clk2x & 0x01);
    1066:	2e 2d       	mov	r18, r14
    1068:	21 70       	andi	r18, 0x01	; 1
    106a:	c0 e1       	ldi	r28, 0x10	; 16
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <calc_bsel+0x32>
    1070:	d5 95       	asr	r29
    1072:	c7 95       	ror	r28
    1074:	2a 95       	dec	r18
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <calc_bsel+0x2e>
  if ( scale < 0 ) {
    1078:	00 23       	and	r16, r16
    107a:	0c f0       	brlt	.+2      	; 0x107e <calc_bsel+0x3c>
    107c:	42 c0       	rjmp	.+132    	; 0x1102 <calc_bsel+0xc0>
    return round(  (((double)(f_cpu)/(factor*(double)(baud))) - 1) * (1<<-(scale))  );
    107e:	0e 94 09 0b 	call	0x1612	; 0x1612 <__floatunsisf>
    1082:	6b 01       	movw	r12, r22
    1084:	7c 01       	movw	r14, r24
    1086:	dd 27       	eor	r29, r29
    1088:	be 01       	movw	r22, r28
    108a:	dd 0f       	add	r29, r29
    108c:	88 0b       	sbc	r24, r24
    108e:	99 0b       	sbc	r25, r25
    1090:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatsisf>
    1094:	2b 01       	movw	r4, r22
    1096:	3c 01       	movw	r6, r24
    1098:	c5 01       	movw	r24, r10
    109a:	b4 01       	movw	r22, r8
    109c:	0e 94 09 0b 	call	0x1612	; 0x1612 <__floatunsisf>
    10a0:	9b 01       	movw	r18, r22
    10a2:	ac 01       	movw	r20, r24
    10a4:	c3 01       	movw	r24, r6
    10a6:	b2 01       	movw	r22, r4
    10a8:	0e 94 97 0b 	call	0x172e	; 0x172e <__mulsf3>
    10ac:	9b 01       	movw	r18, r22
    10ae:	ac 01       	movw	r20, r24
    10b0:	c7 01       	movw	r24, r14
    10b2:	b6 01       	movw	r22, r12
    10b4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__divsf3>
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	5f e3       	ldi	r21, 0x3F	; 63
    10c0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subsf3>
    10c4:	6b 01       	movw	r12, r22
    10c6:	7c 01       	movw	r14, r24
    10c8:	11 27       	eor	r17, r17
    10ca:	01 95       	neg	r16
    10cc:	0c f4       	brge	.+2      	; 0x10d0 <calc_bsel+0x8e>
    10ce:	10 95       	com	r17
    10d0:	61 e0       	ldi	r22, 0x01	; 1
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <calc_bsel+0x98>
    10d6:	66 0f       	add	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	0a 95       	dec	r16
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <calc_bsel+0x94>
    10de:	07 2e       	mov	r0, r23
    10e0:	00 0c       	add	r0, r0
    10e2:	88 0b       	sbc	r24, r24
    10e4:	99 0b       	sbc	r25, r25
    10e6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatsisf>
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	c7 01       	movw	r24, r14
    10f0:	b6 01       	movw	r22, r12
    10f2:	0e 94 97 0b 	call	0x172e	; 0x172e <__mulsf3>
    10f6:	0e 94 04 0c 	call	0x1808	; 0x1808 <round>
    10fa:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__fixunssfsi>
    10fe:	cb 01       	movw	r24, r22
    1100:	3e c0       	rjmp	.+124    	; 0x117e <calc_bsel+0x13c>
  } else {
    return round(  ((double)(f_cpu)/(factor*(double)(baud))/(1<<(scale))) - 1);
    1102:	0e 94 09 0b 	call	0x1612	; 0x1612 <__floatunsisf>
    1106:	6b 01       	movw	r12, r22
    1108:	7c 01       	movw	r14, r24
    110a:	be 01       	movw	r22, r28
    110c:	77 27       	eor	r23, r23
    110e:	07 2e       	mov	r0, r23
    1110:	00 0c       	add	r0, r0
    1112:	88 0b       	sbc	r24, r24
    1114:	99 0b       	sbc	r25, r25
    1116:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatsisf>
    111a:	2b 01       	movw	r4, r22
    111c:	3c 01       	movw	r6, r24
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	0e 94 09 0b 	call	0x1612	; 0x1612 <__floatunsisf>
    1126:	9b 01       	movw	r18, r22
    1128:	ac 01       	movw	r20, r24
    112a:	c3 01       	movw	r24, r6
    112c:	b2 01       	movw	r22, r4
    112e:	0e 94 97 0b 	call	0x172e	; 0x172e <__mulsf3>
    1132:	9b 01       	movw	r18, r22
    1134:	ac 01       	movw	r20, r24
    1136:	c7 01       	movw	r24, r14
    1138:	b6 01       	movw	r22, r12
    113a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__divsf3>
    113e:	6b 01       	movw	r12, r22
    1140:	7c 01       	movw	r14, r24
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <calc_bsel+0x10a>
    1148:	66 0f       	add	r22, r22
    114a:	77 1f       	adc	r23, r23
    114c:	0a 95       	dec	r16
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <calc_bsel+0x106>
    1150:	07 2e       	mov	r0, r23
    1152:	00 0c       	add	r0, r0
    1154:	88 0b       	sbc	r24, r24
    1156:	99 0b       	sbc	r25, r25
    1158:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__floatsisf>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__divsf3>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e8       	ldi	r20, 0x80	; 128
    116e:	5f e3       	ldi	r21, 0x3F	; 63
    1170:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__subsf3>
    1174:	0e 94 04 0c 	call	0x1808	; 0x1808 <round>
    1178:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__fixunssfsi>
    117c:	cb 01       	movw	r24, r22
  }
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	bf 90       	pop	r11
    1190:	af 90       	pop	r10
    1192:	9f 90       	pop	r9
    1194:	8f 90       	pop	r8
    1196:	7f 90       	pop	r7
    1198:	6f 90       	pop	r6
    119a:	5f 90       	pop	r5
    119c:	4f 90       	pop	r4
    119e:	08 95       	ret

000011a0 <calc_bscale>:
 *  and a boolean for clock doubling.
 *
 *  \return the scale factor BSCALE
 */
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    11a0:	4f 92       	push	r4
    11a2:	5f 92       	push	r5
    11a4:	6f 92       	push	r6
    11a6:	7f 92       	push	r7
    11a8:	8f 92       	push	r8
    11aa:	9f 92       	push	r9
    11ac:	af 92       	push	r10
    11ae:	bf 92       	push	r11
    11b0:	ef 92       	push	r14
    11b2:	0f 93       	push	r16
    11b4:	cf 93       	push	r28
    11b6:	df 93       	push	r29
    11b8:	2b 01       	movw	r4, r22
    11ba:	3c 01       	movw	r6, r24
    11bc:	49 01       	movw	r8, r18
    11be:	5a 01       	movw	r10, r20
    11c0:	d0 2f       	mov	r29, r16
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    11c2:	c9 ef       	ldi	r28, 0xF9	; 249
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
    11c4:	ed 2e       	mov	r14, r29
    11c6:	0c 2f       	mov	r16, r28
    11c8:	a5 01       	movw	r20, r10
    11ca:	94 01       	movw	r18, r8
    11cc:	c3 01       	movw	r24, r6
    11ce:	b2 01       	movw	r22, r4
    11d0:	0e 94 21 08 	call	0x1042	; 0x1042 <calc_bsel>
    11d4:	81 15       	cp	r24, r1
    11d6:	90 41       	sbci	r25, 0x10	; 16
    11d8:	18 f0       	brcs	.+6      	; 0x11e0 <calc_bscale+0x40>
    11da:	cf 5f       	subi	r28, 0xFF	; 255
int8_t calc_bscale(uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
  int8_t   bscale;
  uint16_t bsel;

  for (bscale = -7; bscale<8; bscale++) {
    11dc:	c8 30       	cpi	r28, 0x08	; 8
    11de:	91 f7       	brne	.-28     	; 0x11c4 <calc_bscale+0x24>
    if ( (bsel = calc_bsel(f_cpu, baud, bscale, clk2x)) < 4096 ) return bscale;
  }

  return bscale;
}
    11e0:	8c 2f       	mov	r24, r28
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	0f 91       	pop	r16
    11e8:	ef 90       	pop	r14
    11ea:	bf 90       	pop	r11
    11ec:	af 90       	pop	r10
    11ee:	9f 90       	pop	r9
    11f0:	8f 90       	pop	r8
    11f2:	7f 90       	pop	r7
    11f4:	6f 90       	pop	r6
    11f6:	5f 90       	pop	r5
    11f8:	4f 90       	pop	r4
    11fa:	08 95       	ret

000011fc <init_uart>:
 *  are both set to a low level.
 *
 *  \return void
 */
void init_uart(USART_data_t *uart, USART_t *usart, uint32_t f_cpu, uint32_t baud, uint8_t clk2x)
{
    11fc:	2f 92       	push	r2
    11fe:	3f 92       	push	r3
    1200:	4f 92       	push	r4
    1202:	5f 92       	push	r5
    1204:	6f 92       	push	r6
    1206:	7f 92       	push	r7
    1208:	8f 92       	push	r8
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	ef 92       	push	r14
    1214:	ff 92       	push	r15
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
    121e:	ec 01       	movw	r28, r24
    1220:	1b 01       	movw	r2, r22
    1222:	29 01       	movw	r4, r18
    1224:	3a 01       	movw	r6, r20
    1226:	47 01       	movw	r8, r14
    1228:	58 01       	movw	r10, r16
    122a:	ec 2c       	mov	r14, r12
  uint16_t bsel;
  int8_t bscale;

  bscale = calc_bscale(f_cpu, baud, clk2x);
    122c:	0c 2d       	mov	r16, r12
    122e:	a5 01       	movw	r20, r10
    1230:	94 01       	movw	r18, r8
    1232:	c3 01       	movw	r24, r6
    1234:	b2 01       	movw	r22, r4
    1236:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <calc_bscale>
    123a:	18 2f       	mov	r17, r24
  bsel   = calc_bsel(f_cpu, baud, bscale, clk2x);
    123c:	08 2f       	mov	r16, r24
    123e:	a5 01       	movw	r20, r10
    1240:	94 01       	movw	r18, r8
    1242:	c3 01       	movw	r24, r6
    1244:	b2 01       	movw	r22, r4
    1246:	0e 94 21 08 	call	0x1042	; 0x1042 <calc_bsel>
    124a:	f8 2e       	mov	r15, r24
    124c:	09 2f       	mov	r16, r25

  USART_InterruptDriver_Initialize(uart, usart, USART_DREINTLVL_LO_gc);
    124e:	41 e0       	ldi	r20, 0x01	; 1
    1250:	b1 01       	movw	r22, r2
    1252:	ce 01       	movw	r24, r28
    1254:	0e 94 5f 09 	call	0x12be	; 0x12be <USART_InterruptDriver_Initialize>
  USART_Format_Set(uart->usart, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, !USART_SBMODE_bm);
    1258:	e8 81       	ld	r30, Y
    125a:	f9 81       	ldd	r31, Y+1	; 0x01
    125c:	83 e0       	ldi	r24, 0x03	; 3
    125e:	85 83       	std	Z+5, r24	; 0x05
  USART_Rx_Enable(uart->usart);
    1260:	e8 81       	ld	r30, Y
    1262:	f9 81       	ldd	r31, Y+1	; 0x01
    1264:	84 81       	ldd	r24, Z+4	; 0x04
    1266:	80 61       	ori	r24, 0x10	; 16
    1268:	84 83       	std	Z+4, r24	; 0x04
  USART_Tx_Enable(uart->usart);
    126a:	e8 81       	ld	r30, Y
    126c:	f9 81       	ldd	r31, Y+1	; 0x01
    126e:	84 81       	ldd	r24, Z+4	; 0x04
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	84 83       	std	Z+4, r24	; 0x04
  USART_RxdInterruptLevel_Set(uart->usart, USART_RXCINTLVL_LO_gc);
    1274:	e8 81       	ld	r30, Y
    1276:	f9 81       	ldd	r31, Y+1	; 0x01
    1278:	83 81       	ldd	r24, Z+3	; 0x03
    127a:	8f 7c       	andi	r24, 0xCF	; 207
    127c:	80 61       	ori	r24, 0x10	; 16
    127e:	83 83       	std	Z+3, r24	; 0x03
  USART_Baudrate_Set(uart->usart, bsel, bscale);
    1280:	e8 81       	ld	r30, Y
    1282:	f9 81       	ldd	r31, Y+1	; 0x01
    1284:	f6 82       	std	Z+6, r15	; 0x06
    1286:	e8 81       	ld	r30, Y
    1288:	f9 81       	ldd	r31, Y+1	; 0x01
    128a:	12 95       	swap	r17
    128c:	10 7f       	andi	r17, 0xF0	; 240
    128e:	10 2b       	or	r17, r16
    1290:	17 83       	std	Z+7, r17	; 0x07

  set_usart_txrx_direction(uart->usart);
    1292:	88 81       	ld	r24, Y
    1294:	99 81       	ldd	r25, Y+1	; 0x01
    1296:	0e 94 d5 07 	call	0xfaa	; 0xfaa <set_usart_txrx_direction>
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	8f 90       	pop	r8
    12b0:	7f 90       	pop	r7
    12b2:	6f 90       	pop	r6
    12b4:	5f 90       	pop	r5
    12b6:	4f 90       	pop	r4
    12b8:	3f 90       	pop	r3
    12ba:	2f 90       	pop	r2
    12bc:	08 95       	ret

000012be <USART_InterruptDriver_Initialize>:
 *  \param dreIntLevel        Interrupt level of the DRE interrupt.
 */
void USART_InterruptDriver_DreInterruptLevel_Set(USART_data_t * usart_data,
                                                 USART_DREINTLVL_t dreIntLevel)
{
	usart_data->dreIntLevel = dreIntLevel;
    12be:	fc 01       	movw	r30, r24
    12c0:	60 83       	st	Z, r22
    12c2:	71 83       	std	Z+1, r23	; 0x01
    12c4:	42 83       	std	Z+2, r20	; 0x02
    12c6:	ec 5f       	subi	r30, 0xFC	; 252
    12c8:	fd 4f       	sbci	r31, 0xFD	; 253
    12ca:	10 82       	st	Z, r1
    12cc:	31 97       	sbiw	r30, 0x01	; 1
    12ce:	10 82       	st	Z, r1
    12d0:	33 96       	adiw	r30, 0x03	; 3
    12d2:	10 82       	st	Z, r1
    12d4:	31 97       	sbiw	r30, 0x01	; 1
    12d6:	10 82       	st	Z, r1
    12d8:	08 95       	ret

000012da <USART_TXBuffer_FreeSpace>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    12da:	fc 01       	movw	r30, r24
    12dc:	eb 5f       	subi	r30, 0xFB	; 251
    12de:	fd 4f       	sbci	r31, 0xFD	; 253
    12e0:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    12e2:	31 96       	adiw	r30, 0x01	; 1
    12e4:	30 81       	ld	r19, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    12e6:	91 e0       	ldi	r25, 0x01	; 1
    12e8:	92 0f       	add	r25, r18
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	93 13       	cpse	r25, r19
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <USART_TXBuffer_FreeSpace+0x18>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
}
    12f2:	08 95       	ret

000012f4 <USART_TXBuffer_PutByte>:
 *
 *  \param usart_data The USART_data_t struct instance.
 *  \param data       The data to send.
 */
bool USART_TXBuffer_PutByte(USART_data_t * usart_data, uint8_t data)
{
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	fc 01       	movw	r30, r24
 *  \retval false     The receive buffer is empty.
 */
bool USART_TXBuffer_FreeSpace(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = (usart_data->buffer.TX_Head + 1) & USART_TX_BUFFER_MASK;
    12fa:	dc 01       	movw	r26, r24
    12fc:	ab 5f       	subi	r26, 0xFB	; 251
    12fe:	bd 4f       	sbci	r27, 0xFD	; 253
    1300:	9c 91       	ld	r25, X
    1302:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t tempTail = usart_data->buffer.TX_Tail;
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	2c 91       	ld	r18, X

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	92 13       	cpse	r25, r18
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <USART_TXBuffer_PutByte+0x1c>
    130e:	80 e0       	ldi	r24, 0x00	; 0

	TXbufPtr = &usart_data->buffer;
	TXBuffer_FreeSpace = USART_TXBuffer_FreeSpace(usart_data);


	if(TXBuffer_FreeSpace)
    1310:	92 17       	cp	r25, r18
    1312:	b1 f0       	breq	.+44     	; 0x1340 <USART_TXBuffer_PutByte+0x4c>
	{
	  	tempTX_Head = TXbufPtr->TX_Head;
    1314:	ef 01       	movw	r28, r30
    1316:	cb 5f       	subi	r28, 0xFB	; 251
    1318:	dd 4f       	sbci	r29, 0xFD	; 253
    131a:	98 81       	ld	r25, Y
	  	TXbufPtr->TX[tempTX_Head]= data;
    131c:	df 01       	movw	r26, r30
    131e:	a9 0f       	add	r26, r25
    1320:	b1 1d       	adc	r27, r1
    1322:	ad 5f       	subi	r26, 0xFD	; 253
    1324:	be 4f       	sbci	r27, 0xFE	; 254
    1326:	6c 93       	st	X, r22
		/* Advance buffer head. */
		TXbufPtr->TX_Head = (tempTX_Head + 1) & USART_TX_BUFFER_MASK;
    1328:	9f 5f       	subi	r25, 0xFF	; 255
    132a:	98 83       	st	Y, r25

		/* Enable DRE interrupt. */
		tempCTRLA = usart_data->usart->CTRLA;
    132c:	a0 81       	ld	r26, Z
    132e:	b1 81       	ldd	r27, Z+1	; 0x01
    1330:	13 96       	adiw	r26, 0x03	; 3
    1332:	9c 91       	ld	r25, X
    1334:	13 97       	sbiw	r26, 0x03	; 3
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | usart_data->dreIntLevel;
    1336:	9c 7f       	andi	r25, 0xFC	; 252
    1338:	22 81       	ldd	r18, Z+2	; 0x02
    133a:	92 2b       	or	r25, r18
		usart_data->usart->CTRLA = tempCTRLA;
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	9c 93       	st	X, r25
	}
	return TXBuffer_FreeSpace;
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

00001346 <USART_RXBufferData_Available>:
 *  \retval false     The receive buffer is empty.
 */
bool USART_RXBufferData_Available(USART_data_t * usart_data)
{
	/* Make copies to make sure that volatile access is specified. */
	uint8_t tempHead = usart_data->buffer.RX_Head;
    1346:	fc 01       	movw	r30, r24
    1348:	ed 5f       	subi	r30, 0xFD	; 253
    134a:	fd 4f       	sbci	r31, 0xFD	; 253
    134c:	20 81       	ld	r18, Z
	uint8_t tempTail = usart_data->buffer.RX_Tail;
    134e:	31 96       	adiw	r30, 0x01	; 1
    1350:	90 81       	ld	r25, Z

	/* There are data left in the buffer unless Head and Tail are equal. */
	return (tempHead != tempTail);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	29 13       	cpse	r18, r25
    1356:	01 c0       	rjmp	.+2      	; 0x135a <USART_RXBufferData_Available+0x14>
    1358:	80 e0       	ldi	r24, 0x00	; 0
}
    135a:	08 95       	ret

0000135c <USART_RXBuffer_GetByte>:
{
	USART_Buffer_t * bufPtr;
	uint8_t ans;

	bufPtr = &usart_data->buffer;
	ans = (bufPtr->RX[bufPtr->RX_Tail]);
    135c:	fc 01       	movw	r30, r24
    135e:	ec 5f       	subi	r30, 0xFC	; 252
    1360:	fd 4f       	sbci	r31, 0xFD	; 253
    1362:	20 81       	ld	r18, Z
    1364:	dc 01       	movw	r26, r24
    1366:	a2 0f       	add	r26, r18
    1368:	b1 1d       	adc	r27, r1
    136a:	13 96       	adiw	r26, 0x03	; 3
    136c:	8c 91       	ld	r24, X

	/* Advance buffer tail. */
	bufPtr->RX_Tail = (bufPtr->RX_Tail + 1) & USART_RX_BUFFER_MASK;
    136e:	90 81       	ld	r25, Z
    1370:	9f 5f       	subi	r25, 0xFF	; 255
    1372:	90 83       	st	Z, r25

	return ans;
}
    1374:	08 95       	ret

00001376 <USART_RXComplete>:
	USART_Buffer_t * bufPtr;
	bool ans;

	bufPtr = &usart_data->buffer;
	/* Advance buffer head. */
	uint8_t tempRX_Head = (bufPtr->RX_Head + 1) & USART_RX_BUFFER_MASK;
    1376:	fc 01       	movw	r30, r24
    1378:	ed 5f       	subi	r30, 0xFD	; 253
    137a:	fd 4f       	sbci	r31, 0xFD	; 253
    137c:	20 81       	ld	r18, Z
    137e:	2f 5f       	subi	r18, 0xFF	; 255

	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
    1380:	31 96       	adiw	r30, 0x01	; 1
    1382:	30 81       	ld	r19, Z
	uint8_t data = usart_data->usart->DATA;
    1384:	dc 01       	movw	r26, r24
    1386:	ed 91       	ld	r30, X+
    1388:	fc 91       	ld	r31, X
    138a:	11 97       	sbiw	r26, 0x01	; 1
    138c:	40 81       	ld	r20, Z

	if (tempRX_Head == tempRX_Tail) {
    138e:	23 17       	cp	r18, r19
    1390:	59 f0       	breq	.+22     	; 0x13a8 <USART_RXComplete+0x32>
	  	ans = false;
	}else{
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
    1392:	fc 01       	movw	r30, r24
    1394:	ed 5f       	subi	r30, 0xFD	; 253
    1396:	fd 4f       	sbci	r31, 0xFD	; 253
    1398:	30 81       	ld	r19, Z
    139a:	a3 0f       	add	r26, r19
    139c:	b1 1d       	adc	r27, r1
    139e:	13 96       	adiw	r26, 0x03	; 3
    13a0:	4c 93       	st	X, r20
		usart_data->buffer.RX_Head = tempRX_Head;
    13a2:	20 83       	st	Z, r18
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
	}else{
		ans = true;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	08 95       	ret
	/* Check for overflow. */
	uint8_t tempRX_Tail = bufPtr->RX_Tail;
	uint8_t data = usart_data->usart->DATA;

	if (tempRX_Head == tempRX_Tail) {
	  	ans = false;
    13a8:	80 e0       	ldi	r24, 0x00	; 0
		ans = true;
		usart_data->buffer.RX[usart_data->buffer.RX_Head] = data;
		usart_data->buffer.RX_Head = tempRX_Head;
	}
	return ans;
}
    13aa:	08 95       	ret

000013ac <USART_DataRegEmpty>:
 *  is empty. Argument is pointer to USART (USART_data_t).
 *
 *  \param usart_data      The USART_data_t struct instance.
 */
void USART_DataRegEmpty(USART_data_t * usart_data)
{
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
	USART_Buffer_t * bufPtr;
	bufPtr = &usart_data->buffer;

	/* Check if all data is transmitted. */
	uint8_t tempTX_Tail = usart_data->buffer.TX_Tail;
    13b0:	fc 01       	movw	r30, r24
    13b2:	ea 5f       	subi	r30, 0xFA	; 250
    13b4:	fd 4f       	sbci	r31, 0xFD	; 253
    13b6:	30 81       	ld	r19, Z
	if (bufPtr->TX_Head == tempTX_Tail){
    13b8:	31 97       	sbiw	r30, 0x01	; 1
    13ba:	20 81       	ld	r18, Z
    13bc:	32 13       	cpse	r19, r18
    13be:	07 c0       	rjmp	.+14     	; 0x13ce <USART_DataRegEmpty+0x22>
	    /* Disable DRE interrupts. */
		uint8_t tempCTRLA = usart_data->usart->CTRLA;
    13c0:	dc 01       	movw	r26, r24
    13c2:	ed 91       	ld	r30, X+
    13c4:	fc 91       	ld	r31, X
    13c6:	83 81       	ldd	r24, Z+3	; 0x03
		tempCTRLA = (tempCTRLA & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    13c8:	8c 7f       	andi	r24, 0xFC	; 252
		usart_data->usart->CTRLA = tempCTRLA;
    13ca:	83 83       	std	Z+3, r24	; 0x03
    13cc:	11 c0       	rjmp	.+34     	; 0x13f0 <USART_DataRegEmpty+0x44>

	}else{
		/* Start transmitting. */
		uint8_t data = bufPtr->TX[usart_data->buffer.TX_Tail];
    13ce:	fc 01       	movw	r30, r24
    13d0:	ea 5f       	subi	r30, 0xFA	; 250
    13d2:	fd 4f       	sbci	r31, 0xFD	; 253
    13d4:	20 81       	ld	r18, Z
    13d6:	dc 01       	movw	r26, r24
    13d8:	a2 0f       	add	r26, r18
    13da:	b1 1d       	adc	r27, r1
    13dc:	ad 5f       	subi	r26, 0xFD	; 253
    13de:	be 4f       	sbci	r27, 0xFE	; 254
    13e0:	2c 91       	ld	r18, X
		usart_data->usart->DATA = data;
    13e2:	ec 01       	movw	r28, r24
    13e4:	a8 81       	ld	r26, Y
    13e6:	b9 81       	ldd	r27, Y+1	; 0x01
    13e8:	2c 93       	st	X, r18

		/* Advance buffer tail. */
		bufPtr->TX_Tail = (bufPtr->TX_Tail + 1) & USART_TX_BUFFER_MASK;
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 83       	st	Z, r24
	}
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <__subsf3>:
    13f6:	50 58       	subi	r21, 0x80	; 128

000013f8 <__addsf3>:
    13f8:	bb 27       	eor	r27, r27
    13fa:	aa 27       	eor	r26, r26
    13fc:	0e 94 13 0a 	call	0x1426	; 0x1426 <__addsf3x>
    1400:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_round>
    1404:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_pscA>
    1408:	38 f0       	brcs	.+14     	; 0x1418 <__addsf3+0x20>
    140a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__fp_pscB>
    140e:	20 f0       	brcs	.+8      	; 0x1418 <__addsf3+0x20>
    1410:	39 f4       	brne	.+14     	; 0x1420 <__addsf3+0x28>
    1412:	9f 3f       	cpi	r25, 0xFF	; 255
    1414:	19 f4       	brne	.+6      	; 0x141c <__addsf3+0x24>
    1416:	26 f4       	brtc	.+8      	; 0x1420 <__addsf3+0x28>
    1418:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__fp_nan>
    141c:	0e f4       	brtc	.+2      	; 0x1420 <__addsf3+0x28>
    141e:	e0 95       	com	r30
    1420:	e7 fb       	bst	r30, 7
    1422:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_inf>

00001426 <__addsf3x>:
    1426:	e9 2f       	mov	r30, r25
    1428:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_split3>
    142c:	58 f3       	brcs	.-42     	; 0x1404 <__addsf3+0xc>
    142e:	ba 17       	cp	r27, r26
    1430:	62 07       	cpc	r22, r18
    1432:	73 07       	cpc	r23, r19
    1434:	84 07       	cpc	r24, r20
    1436:	95 07       	cpc	r25, r21
    1438:	20 f0       	brcs	.+8      	; 0x1442 <__addsf3x+0x1c>
    143a:	79 f4       	brne	.+30     	; 0x145a <__addsf3x+0x34>
    143c:	a6 f5       	brtc	.+104    	; 0x14a6 <__addsf3x+0x80>
    143e:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__fp_zero>
    1442:	0e f4       	brtc	.+2      	; 0x1446 <__addsf3x+0x20>
    1444:	e0 95       	com	r30
    1446:	0b 2e       	mov	r0, r27
    1448:	ba 2f       	mov	r27, r26
    144a:	a0 2d       	mov	r26, r0
    144c:	0b 01       	movw	r0, r22
    144e:	b9 01       	movw	r22, r18
    1450:	90 01       	movw	r18, r0
    1452:	0c 01       	movw	r0, r24
    1454:	ca 01       	movw	r24, r20
    1456:	a0 01       	movw	r20, r0
    1458:	11 24       	eor	r1, r1
    145a:	ff 27       	eor	r31, r31
    145c:	59 1b       	sub	r21, r25
    145e:	99 f0       	breq	.+38     	; 0x1486 <__addsf3x+0x60>
    1460:	59 3f       	cpi	r21, 0xF9	; 249
    1462:	50 f4       	brcc	.+20     	; 0x1478 <__addsf3x+0x52>
    1464:	50 3e       	cpi	r21, 0xE0	; 224
    1466:	68 f1       	brcs	.+90     	; 0x14c2 <__addsf3x+0x9c>
    1468:	1a 16       	cp	r1, r26
    146a:	f0 40       	sbci	r31, 0x00	; 0
    146c:	a2 2f       	mov	r26, r18
    146e:	23 2f       	mov	r18, r19
    1470:	34 2f       	mov	r19, r20
    1472:	44 27       	eor	r20, r20
    1474:	58 5f       	subi	r21, 0xF8	; 248
    1476:	f3 cf       	rjmp	.-26     	; 0x145e <__addsf3x+0x38>
    1478:	46 95       	lsr	r20
    147a:	37 95       	ror	r19
    147c:	27 95       	ror	r18
    147e:	a7 95       	ror	r26
    1480:	f0 40       	sbci	r31, 0x00	; 0
    1482:	53 95       	inc	r21
    1484:	c9 f7       	brne	.-14     	; 0x1478 <__addsf3x+0x52>
    1486:	7e f4       	brtc	.+30     	; 0x14a6 <__addsf3x+0x80>
    1488:	1f 16       	cp	r1, r31
    148a:	ba 0b       	sbc	r27, r26
    148c:	62 0b       	sbc	r22, r18
    148e:	73 0b       	sbc	r23, r19
    1490:	84 0b       	sbc	r24, r20
    1492:	ba f0       	brmi	.+46     	; 0x14c2 <__addsf3x+0x9c>
    1494:	91 50       	subi	r25, 0x01	; 1
    1496:	a1 f0       	breq	.+40     	; 0x14c0 <__addsf3x+0x9a>
    1498:	ff 0f       	add	r31, r31
    149a:	bb 1f       	adc	r27, r27
    149c:	66 1f       	adc	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	88 1f       	adc	r24, r24
    14a2:	c2 f7       	brpl	.-16     	; 0x1494 <__addsf3x+0x6e>
    14a4:	0e c0       	rjmp	.+28     	; 0x14c2 <__addsf3x+0x9c>
    14a6:	ba 0f       	add	r27, r26
    14a8:	62 1f       	adc	r22, r18
    14aa:	73 1f       	adc	r23, r19
    14ac:	84 1f       	adc	r24, r20
    14ae:	48 f4       	brcc	.+18     	; 0x14c2 <__addsf3x+0x9c>
    14b0:	87 95       	ror	r24
    14b2:	77 95       	ror	r23
    14b4:	67 95       	ror	r22
    14b6:	b7 95       	ror	r27
    14b8:	f7 95       	ror	r31
    14ba:	9e 3f       	cpi	r25, 0xFE	; 254
    14bc:	08 f0       	brcs	.+2      	; 0x14c0 <__addsf3x+0x9a>
    14be:	b0 cf       	rjmp	.-160    	; 0x1420 <__addsf3+0x28>
    14c0:	93 95       	inc	r25
    14c2:	88 0f       	add	r24, r24
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <__addsf3x+0xa2>
    14c6:	99 27       	eor	r25, r25
    14c8:	ee 0f       	add	r30, r30
    14ca:	97 95       	ror	r25
    14cc:	87 95       	ror	r24
    14ce:	08 95       	ret

000014d0 <__divsf3>:
    14d0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divsf3x>
    14d4:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_round>
    14d8:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__fp_pscB>
    14dc:	58 f0       	brcs	.+22     	; 0x14f4 <__divsf3+0x24>
    14de:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_pscA>
    14e2:	40 f0       	brcs	.+16     	; 0x14f4 <__divsf3+0x24>
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <__divsf3+0x20>
    14e6:	5f 3f       	cpi	r21, 0xFF	; 255
    14e8:	29 f0       	breq	.+10     	; 0x14f4 <__divsf3+0x24>
    14ea:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_inf>
    14ee:	51 11       	cpse	r21, r1
    14f0:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_szero>
    14f4:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__fp_nan>

000014f8 <__divsf3x>:
    14f8:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_split3>
    14fc:	68 f3       	brcs	.-38     	; 0x14d8 <__divsf3+0x8>

000014fe <__divsf3_pse>:
    14fe:	99 23       	and	r25, r25
    1500:	b1 f3       	breq	.-20     	; 0x14ee <__divsf3+0x1e>
    1502:	55 23       	and	r21, r21
    1504:	91 f3       	breq	.-28     	; 0x14ea <__divsf3+0x1a>
    1506:	95 1b       	sub	r25, r21
    1508:	55 0b       	sbc	r21, r21
    150a:	bb 27       	eor	r27, r27
    150c:	aa 27       	eor	r26, r26
    150e:	62 17       	cp	r22, r18
    1510:	73 07       	cpc	r23, r19
    1512:	84 07       	cpc	r24, r20
    1514:	38 f0       	brcs	.+14     	; 0x1524 <__divsf3_pse+0x26>
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	5f 4f       	sbci	r21, 0xFF	; 255
    151a:	22 0f       	add	r18, r18
    151c:	33 1f       	adc	r19, r19
    151e:	44 1f       	adc	r20, r20
    1520:	aa 1f       	adc	r26, r26
    1522:	a9 f3       	breq	.-22     	; 0x150e <__divsf3_pse+0x10>
    1524:	35 d0       	rcall	.+106    	; 0x1590 <__divsf3_pse+0x92>
    1526:	0e 2e       	mov	r0, r30
    1528:	3a f0       	brmi	.+14     	; 0x1538 <__divsf3_pse+0x3a>
    152a:	e0 e8       	ldi	r30, 0x80	; 128
    152c:	32 d0       	rcall	.+100    	; 0x1592 <__divsf3_pse+0x94>
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	e6 95       	lsr	r30
    1534:	00 1c       	adc	r0, r0
    1536:	ca f7       	brpl	.-14     	; 0x152a <__divsf3_pse+0x2c>
    1538:	2b d0       	rcall	.+86     	; 0x1590 <__divsf3_pse+0x92>
    153a:	fe 2f       	mov	r31, r30
    153c:	29 d0       	rcall	.+82     	; 0x1590 <__divsf3_pse+0x92>
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	88 1f       	adc	r24, r24
    1544:	bb 1f       	adc	r27, r27
    1546:	26 17       	cp	r18, r22
    1548:	37 07       	cpc	r19, r23
    154a:	48 07       	cpc	r20, r24
    154c:	ab 07       	cpc	r26, r27
    154e:	b0 e8       	ldi	r27, 0x80	; 128
    1550:	09 f0       	breq	.+2      	; 0x1554 <__divsf3_pse+0x56>
    1552:	bb 0b       	sbc	r27, r27
    1554:	80 2d       	mov	r24, r0
    1556:	bf 01       	movw	r22, r30
    1558:	ff 27       	eor	r31, r31
    155a:	93 58       	subi	r25, 0x83	; 131
    155c:	5f 4f       	sbci	r21, 0xFF	; 255
    155e:	3a f0       	brmi	.+14     	; 0x156e <__divsf3_pse+0x70>
    1560:	9e 3f       	cpi	r25, 0xFE	; 254
    1562:	51 05       	cpc	r21, r1
    1564:	78 f0       	brcs	.+30     	; 0x1584 <__divsf3_pse+0x86>
    1566:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_inf>
    156a:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_szero>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	e4 f3       	brlt	.-8      	; 0x156a <__divsf3_pse+0x6c>
    1572:	98 3e       	cpi	r25, 0xE8	; 232
    1574:	d4 f3       	brlt	.-12     	; 0x156a <__divsf3_pse+0x6c>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	9f 5f       	subi	r25, 0xFF	; 255
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__divsf3_pse+0x78>
    1584:	88 0f       	add	r24, r24
    1586:	91 1d       	adc	r25, r1
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret
    1590:	e1 e0       	ldi	r30, 0x01	; 1
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	bb 1f       	adc	r27, r27
    159a:	62 17       	cp	r22, r18
    159c:	73 07       	cpc	r23, r19
    159e:	84 07       	cpc	r24, r20
    15a0:	ba 07       	cpc	r27, r26
    15a2:	20 f0       	brcs	.+8      	; 0x15ac <__divsf3_pse+0xae>
    15a4:	62 1b       	sub	r22, r18
    15a6:	73 0b       	sbc	r23, r19
    15a8:	84 0b       	sbc	r24, r20
    15aa:	ba 0b       	sbc	r27, r26
    15ac:	ee 1f       	adc	r30, r30
    15ae:	88 f7       	brcc	.-30     	; 0x1592 <__divsf3_pse+0x94>
    15b0:	e0 95       	com	r30
    15b2:	08 95       	ret

000015b4 <__fixunssfsi>:
    15b4:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__fp_splitA>
    15b8:	88 f0       	brcs	.+34     	; 0x15dc <__fixunssfsi+0x28>
    15ba:	9f 57       	subi	r25, 0x7F	; 127
    15bc:	98 f0       	brcs	.+38     	; 0x15e4 <__fixunssfsi+0x30>
    15be:	b9 2f       	mov	r27, r25
    15c0:	99 27       	eor	r25, r25
    15c2:	b7 51       	subi	r27, 0x17	; 23
    15c4:	b0 f0       	brcs	.+44     	; 0x15f2 <__fixunssfsi+0x3e>
    15c6:	e1 f0       	breq	.+56     	; 0x1600 <__fixunssfsi+0x4c>
    15c8:	66 0f       	add	r22, r22
    15ca:	77 1f       	adc	r23, r23
    15cc:	88 1f       	adc	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	1a f0       	brmi	.+6      	; 0x15d8 <__fixunssfsi+0x24>
    15d2:	ba 95       	dec	r27
    15d4:	c9 f7       	brne	.-14     	; 0x15c8 <__fixunssfsi+0x14>
    15d6:	14 c0       	rjmp	.+40     	; 0x1600 <__fixunssfsi+0x4c>
    15d8:	b1 30       	cpi	r27, 0x01	; 1
    15da:	91 f0       	breq	.+36     	; 0x1600 <__fixunssfsi+0x4c>
    15dc:	0e 94 90 0b 	call	0x1720	; 0x1720 <__fp_zero>
    15e0:	b1 e0       	ldi	r27, 0x01	; 1
    15e2:	08 95       	ret
    15e4:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__fp_zero>
    15e8:	67 2f       	mov	r22, r23
    15ea:	78 2f       	mov	r23, r24
    15ec:	88 27       	eor	r24, r24
    15ee:	b8 5f       	subi	r27, 0xF8	; 248
    15f0:	39 f0       	breq	.+14     	; 0x1600 <__fixunssfsi+0x4c>
    15f2:	b9 3f       	cpi	r27, 0xF9	; 249
    15f4:	cc f3       	brlt	.-14     	; 0x15e8 <__fixunssfsi+0x34>
    15f6:	86 95       	lsr	r24
    15f8:	77 95       	ror	r23
    15fa:	67 95       	ror	r22
    15fc:	b3 95       	inc	r27
    15fe:	d9 f7       	brne	.-10     	; 0x15f6 <__fixunssfsi+0x42>
    1600:	3e f4       	brtc	.+14     	; 0x1610 <__fixunssfsi+0x5c>
    1602:	90 95       	com	r25
    1604:	80 95       	com	r24
    1606:	70 95       	com	r23
    1608:	61 95       	neg	r22
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__floatunsisf>:
    1612:	e8 94       	clt
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <__floatsisf+0x12>

00001616 <__floatsisf>:
    1616:	97 fb       	bst	r25, 7
    1618:	3e f4       	brtc	.+14     	; 0x1628 <__floatsisf+0x12>
    161a:	90 95       	com	r25
    161c:	80 95       	com	r24
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	99 23       	and	r25, r25
    162a:	a9 f0       	breq	.+42     	; 0x1656 <__floatsisf+0x40>
    162c:	f9 2f       	mov	r31, r25
    162e:	96 e9       	ldi	r25, 0x96	; 150
    1630:	bb 27       	eor	r27, r27
    1632:	93 95       	inc	r25
    1634:	f6 95       	lsr	r31
    1636:	87 95       	ror	r24
    1638:	77 95       	ror	r23
    163a:	67 95       	ror	r22
    163c:	b7 95       	ror	r27
    163e:	f1 11       	cpse	r31, r1
    1640:	f8 cf       	rjmp	.-16     	; 0x1632 <__floatsisf+0x1c>
    1642:	fa f4       	brpl	.+62     	; 0x1682 <__floatsisf+0x6c>
    1644:	bb 0f       	add	r27, r27
    1646:	11 f4       	brne	.+4      	; 0x164c <__floatsisf+0x36>
    1648:	60 ff       	sbrs	r22, 0
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <__floatsisf+0x6c>
    164c:	6f 5f       	subi	r22, 0xFF	; 255
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8f 4f       	sbci	r24, 0xFF	; 255
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	16 c0       	rjmp	.+44     	; 0x1682 <__floatsisf+0x6c>
    1656:	88 23       	and	r24, r24
    1658:	11 f0       	breq	.+4      	; 0x165e <__floatsisf+0x48>
    165a:	96 e9       	ldi	r25, 0x96	; 150
    165c:	11 c0       	rjmp	.+34     	; 0x1680 <__floatsisf+0x6a>
    165e:	77 23       	and	r23, r23
    1660:	21 f0       	breq	.+8      	; 0x166a <__floatsisf+0x54>
    1662:	9e e8       	ldi	r25, 0x8E	; 142
    1664:	87 2f       	mov	r24, r23
    1666:	76 2f       	mov	r23, r22
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <__floatsisf+0x5e>
    166a:	66 23       	and	r22, r22
    166c:	71 f0       	breq	.+28     	; 0x168a <__floatsisf+0x74>
    166e:	96 e8       	ldi	r25, 0x86	; 134
    1670:	86 2f       	mov	r24, r22
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	2a f0       	brmi	.+10     	; 0x1682 <__floatsisf+0x6c>
    1678:	9a 95       	dec	r25
    167a:	66 0f       	add	r22, r22
    167c:	77 1f       	adc	r23, r23
    167e:	88 1f       	adc	r24, r24
    1680:	da f7       	brpl	.-10     	; 0x1678 <__floatsisf+0x62>
    1682:	88 0f       	add	r24, r24
    1684:	96 95       	lsr	r25
    1686:	87 95       	ror	r24
    1688:	97 f9       	bld	r25, 7
    168a:	08 95       	ret

0000168c <__fp_inf>:
    168c:	97 f9       	bld	r25, 7
    168e:	9f 67       	ori	r25, 0x7F	; 127
    1690:	80 e8       	ldi	r24, 0x80	; 128
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	08 95       	ret

00001698 <__fp_nan>:
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	80 ec       	ldi	r24, 0xC0	; 192
    169c:	08 95       	ret

0000169e <__fp_pscA>:
    169e:	00 24       	eor	r0, r0
    16a0:	0a 94       	dec	r0
    16a2:	16 16       	cp	r1, r22
    16a4:	17 06       	cpc	r1, r23
    16a6:	18 06       	cpc	r1, r24
    16a8:	09 06       	cpc	r0, r25
    16aa:	08 95       	ret

000016ac <__fp_pscB>:
    16ac:	00 24       	eor	r0, r0
    16ae:	0a 94       	dec	r0
    16b0:	12 16       	cp	r1, r18
    16b2:	13 06       	cpc	r1, r19
    16b4:	14 06       	cpc	r1, r20
    16b6:	05 06       	cpc	r0, r21
    16b8:	08 95       	ret

000016ba <__fp_round>:
    16ba:	09 2e       	mov	r0, r25
    16bc:	03 94       	inc	r0
    16be:	00 0c       	add	r0, r0
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__fp_round+0xc>
    16c2:	88 23       	and	r24, r24
    16c4:	52 f0       	brmi	.+20     	; 0x16da <__fp_round+0x20>
    16c6:	bb 0f       	add	r27, r27
    16c8:	40 f4       	brcc	.+16     	; 0x16da <__fp_round+0x20>
    16ca:	bf 2b       	or	r27, r31
    16cc:	11 f4       	brne	.+4      	; 0x16d2 <__fp_round+0x18>
    16ce:	60 ff       	sbrs	r22, 0
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <__fp_round+0x20>
    16d2:	6f 5f       	subi	r22, 0xFF	; 255
    16d4:	7f 4f       	sbci	r23, 0xFF	; 255
    16d6:	8f 4f       	sbci	r24, 0xFF	; 255
    16d8:	9f 4f       	sbci	r25, 0xFF	; 255
    16da:	08 95       	ret

000016dc <__fp_split3>:
    16dc:	57 fd       	sbrc	r21, 7
    16de:	90 58       	subi	r25, 0x80	; 128
    16e0:	44 0f       	add	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	59 f0       	breq	.+22     	; 0x16fc <__fp_splitA+0x10>
    16e6:	5f 3f       	cpi	r21, 0xFF	; 255
    16e8:	71 f0       	breq	.+28     	; 0x1706 <__fp_splitA+0x1a>
    16ea:	47 95       	ror	r20

000016ec <__fp_splitA>:
    16ec:	88 0f       	add	r24, r24
    16ee:	97 fb       	bst	r25, 7
    16f0:	99 1f       	adc	r25, r25
    16f2:	61 f0       	breq	.+24     	; 0x170c <__fp_splitA+0x20>
    16f4:	9f 3f       	cpi	r25, 0xFF	; 255
    16f6:	79 f0       	breq	.+30     	; 0x1716 <__fp_splitA+0x2a>
    16f8:	87 95       	ror	r24
    16fa:	08 95       	ret
    16fc:	12 16       	cp	r1, r18
    16fe:	13 06       	cpc	r1, r19
    1700:	14 06       	cpc	r1, r20
    1702:	55 1f       	adc	r21, r21
    1704:	f2 cf       	rjmp	.-28     	; 0x16ea <__fp_split3+0xe>
    1706:	46 95       	lsr	r20
    1708:	f1 df       	rcall	.-30     	; 0x16ec <__fp_splitA>
    170a:	08 c0       	rjmp	.+16     	; 0x171c <__fp_splitA+0x30>
    170c:	16 16       	cp	r1, r22
    170e:	17 06       	cpc	r1, r23
    1710:	18 06       	cpc	r1, r24
    1712:	99 1f       	adc	r25, r25
    1714:	f1 cf       	rjmp	.-30     	; 0x16f8 <__fp_splitA+0xc>
    1716:	86 95       	lsr	r24
    1718:	71 05       	cpc	r23, r1
    171a:	61 05       	cpc	r22, r1
    171c:	08 94       	sec
    171e:	08 95       	ret

00001720 <__fp_zero>:
    1720:	e8 94       	clt

00001722 <__fp_szero>:
    1722:	bb 27       	eor	r27, r27
    1724:	66 27       	eor	r22, r22
    1726:	77 27       	eor	r23, r23
    1728:	cb 01       	movw	r24, r22
    172a:	97 f9       	bld	r25, 7
    172c:	08 95       	ret

0000172e <__mulsf3>:
    172e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__mulsf3x>
    1732:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__fp_round>
    1736:	0e 94 4f 0b 	call	0x169e	; 0x169e <__fp_pscA>
    173a:	38 f0       	brcs	.+14     	; 0x174a <__mulsf3+0x1c>
    173c:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__fp_pscB>
    1740:	20 f0       	brcs	.+8      	; 0x174a <__mulsf3+0x1c>
    1742:	95 23       	and	r25, r21
    1744:	11 f0       	breq	.+4      	; 0x174a <__mulsf3+0x1c>
    1746:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_inf>
    174a:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__fp_nan>
    174e:	11 24       	eor	r1, r1
    1750:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_szero>

00001754 <__mulsf3x>:
    1754:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_split3>
    1758:	70 f3       	brcs	.-36     	; 0x1736 <__mulsf3+0x8>

0000175a <__mulsf3_pse>:
    175a:	95 9f       	mul	r25, r21
    175c:	c1 f3       	breq	.-16     	; 0x174e <__mulsf3+0x20>
    175e:	95 0f       	add	r25, r21
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	55 1f       	adc	r21, r21
    1764:	62 9f       	mul	r22, r18
    1766:	f0 01       	movw	r30, r0
    1768:	72 9f       	mul	r23, r18
    176a:	bb 27       	eor	r27, r27
    176c:	f0 0d       	add	r31, r0
    176e:	b1 1d       	adc	r27, r1
    1770:	63 9f       	mul	r22, r19
    1772:	aa 27       	eor	r26, r26
    1774:	f0 0d       	add	r31, r0
    1776:	b1 1d       	adc	r27, r1
    1778:	aa 1f       	adc	r26, r26
    177a:	64 9f       	mul	r22, r20
    177c:	66 27       	eor	r22, r22
    177e:	b0 0d       	add	r27, r0
    1780:	a1 1d       	adc	r26, r1
    1782:	66 1f       	adc	r22, r22
    1784:	82 9f       	mul	r24, r18
    1786:	22 27       	eor	r18, r18
    1788:	b0 0d       	add	r27, r0
    178a:	a1 1d       	adc	r26, r1
    178c:	62 1f       	adc	r22, r18
    178e:	73 9f       	mul	r23, r19
    1790:	b0 0d       	add	r27, r0
    1792:	a1 1d       	adc	r26, r1
    1794:	62 1f       	adc	r22, r18
    1796:	83 9f       	mul	r24, r19
    1798:	a0 0d       	add	r26, r0
    179a:	61 1d       	adc	r22, r1
    179c:	22 1f       	adc	r18, r18
    179e:	74 9f       	mul	r23, r20
    17a0:	33 27       	eor	r19, r19
    17a2:	a0 0d       	add	r26, r0
    17a4:	61 1d       	adc	r22, r1
    17a6:	23 1f       	adc	r18, r19
    17a8:	84 9f       	mul	r24, r20
    17aa:	60 0d       	add	r22, r0
    17ac:	21 1d       	adc	r18, r1
    17ae:	82 2f       	mov	r24, r18
    17b0:	76 2f       	mov	r23, r22
    17b2:	6a 2f       	mov	r22, r26
    17b4:	11 24       	eor	r1, r1
    17b6:	9f 57       	subi	r25, 0x7F	; 127
    17b8:	50 40       	sbci	r21, 0x00	; 0
    17ba:	9a f0       	brmi	.+38     	; 0x17e2 <__mulsf3_pse+0x88>
    17bc:	f1 f0       	breq	.+60     	; 0x17fa <__mulsf3_pse+0xa0>
    17be:	88 23       	and	r24, r24
    17c0:	4a f0       	brmi	.+18     	; 0x17d4 <__mulsf3_pse+0x7a>
    17c2:	ee 0f       	add	r30, r30
    17c4:	ff 1f       	adc	r31, r31
    17c6:	bb 1f       	adc	r27, r27
    17c8:	66 1f       	adc	r22, r22
    17ca:	77 1f       	adc	r23, r23
    17cc:	88 1f       	adc	r24, r24
    17ce:	91 50       	subi	r25, 0x01	; 1
    17d0:	50 40       	sbci	r21, 0x00	; 0
    17d2:	a9 f7       	brne	.-22     	; 0x17be <__mulsf3_pse+0x64>
    17d4:	9e 3f       	cpi	r25, 0xFE	; 254
    17d6:	51 05       	cpc	r21, r1
    17d8:	80 f0       	brcs	.+32     	; 0x17fa <__mulsf3_pse+0xa0>
    17da:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_inf>
    17de:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_szero>
    17e2:	5f 3f       	cpi	r21, 0xFF	; 255
    17e4:	e4 f3       	brlt	.-8      	; 0x17de <__mulsf3_pse+0x84>
    17e6:	98 3e       	cpi	r25, 0xE8	; 232
    17e8:	d4 f3       	brlt	.-12     	; 0x17de <__mulsf3_pse+0x84>
    17ea:	86 95       	lsr	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b7 95       	ror	r27
    17f2:	f7 95       	ror	r31
    17f4:	e7 95       	ror	r30
    17f6:	9f 5f       	subi	r25, 0xFF	; 255
    17f8:	c1 f7       	brne	.-16     	; 0x17ea <__mulsf3_pse+0x90>
    17fa:	fe 2b       	or	r31, r30
    17fc:	88 0f       	add	r24, r24
    17fe:	91 1d       	adc	r25, r1
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret

00001808 <round>:
    1808:	0e 94 76 0b 	call	0x16ec	; 0x16ec <__fp_splitA>
    180c:	e8 f0       	brcs	.+58     	; 0x1848 <round+0x40>
    180e:	9e 37       	cpi	r25, 0x7E	; 126
    1810:	e8 f0       	brcs	.+58     	; 0x184c <round+0x44>
    1812:	96 39       	cpi	r25, 0x96	; 150
    1814:	b8 f4       	brcc	.+46     	; 0x1844 <round+0x3c>
    1816:	9e 38       	cpi	r25, 0x8E	; 142
    1818:	48 f4       	brcc	.+18     	; 0x182c <round+0x24>
    181a:	67 2f       	mov	r22, r23
    181c:	78 2f       	mov	r23, r24
    181e:	88 27       	eor	r24, r24
    1820:	98 5f       	subi	r25, 0xF8	; 248
    1822:	f9 cf       	rjmp	.-14     	; 0x1816 <round+0xe>
    1824:	86 95       	lsr	r24
    1826:	77 95       	ror	r23
    1828:	67 95       	ror	r22
    182a:	93 95       	inc	r25
    182c:	95 39       	cpi	r25, 0x95	; 149
    182e:	d0 f3       	brcs	.-12     	; 0x1824 <round+0x1c>
    1830:	b6 2f       	mov	r27, r22
    1832:	b1 70       	andi	r27, 0x01	; 1
    1834:	6b 0f       	add	r22, r27
    1836:	71 1d       	adc	r23, r1
    1838:	81 1d       	adc	r24, r1
    183a:	20 f4       	brcc	.+8      	; 0x1844 <round+0x3c>
    183c:	87 95       	ror	r24
    183e:	77 95       	ror	r23
    1840:	67 95       	ror	r22
    1842:	93 95       	inc	r25
    1844:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__fp_mintl>
    1848:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__fp_mpack>
    184c:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__fp_szero>

00001850 <__fp_mintl>:
    1850:	88 23       	and	r24, r24
    1852:	71 f4       	brne	.+28     	; 0x1870 <__fp_mintl+0x20>
    1854:	77 23       	and	r23, r23
    1856:	21 f0       	breq	.+8      	; 0x1860 <__fp_mintl+0x10>
    1858:	98 50       	subi	r25, 0x08	; 8
    185a:	87 2b       	or	r24, r23
    185c:	76 2f       	mov	r23, r22
    185e:	07 c0       	rjmp	.+14     	; 0x186e <__fp_mintl+0x1e>
    1860:	66 23       	and	r22, r22
    1862:	11 f4       	brne	.+4      	; 0x1868 <__fp_mintl+0x18>
    1864:	99 27       	eor	r25, r25
    1866:	0d c0       	rjmp	.+26     	; 0x1882 <__fp_mintl+0x32>
    1868:	90 51       	subi	r25, 0x10	; 16
    186a:	86 2b       	or	r24, r22
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	2a f0       	brmi	.+10     	; 0x187c <__fp_mintl+0x2c>
    1872:	9a 95       	dec	r25
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	da f7       	brpl	.-10     	; 0x1872 <__fp_mintl+0x22>
    187c:	88 0f       	add	r24, r24
    187e:	96 95       	lsr	r25
    1880:	87 95       	ror	r24
    1882:	97 f9       	bld	r25, 7
    1884:	08 95       	ret

00001886 <__fp_mpack>:
    1886:	9f 3f       	cpi	r25, 0xFF	; 255
    1888:	31 f0       	breq	.+12     	; 0x1896 <__fp_mpack_finite+0xc>

0000188a <__fp_mpack_finite>:
    188a:	91 50       	subi	r25, 0x01	; 1
    188c:	20 f4       	brcc	.+8      	; 0x1896 <__fp_mpack_finite+0xc>
    188e:	87 95       	ror	r24
    1890:	77 95       	ror	r23
    1892:	67 95       	ror	r22
    1894:	b7 95       	ror	r27
    1896:	88 0f       	add	r24, r24
    1898:	91 1d       	adc	r25, r1
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	97 f9       	bld	r25, 7
    18a0:	08 95       	ret

000018a2 <__umulhisi3>:
    18a2:	a2 9f       	mul	r26, r18
    18a4:	b0 01       	movw	r22, r0
    18a6:	b3 9f       	mul	r27, r19
    18a8:	c0 01       	movw	r24, r0
    18aa:	a3 9f       	mul	r26, r19
    18ac:	70 0d       	add	r23, r0
    18ae:	81 1d       	adc	r24, r1
    18b0:	11 24       	eor	r1, r1
    18b2:	91 1d       	adc	r25, r1
    18b4:	b2 9f       	mul	r27, r18
    18b6:	70 0d       	add	r23, r0
    18b8:	81 1d       	adc	r24, r1
    18ba:	11 24       	eor	r1, r1
    18bc:	91 1d       	adc	r25, r1
    18be:	08 95       	ret

000018c0 <malloc>:
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	91 05       	cpc	r25, r1
    18cc:	10 f4       	brcc	.+4      	; 0x18d2 <malloc+0x12>
    18ce:	82 e0       	ldi	r24, 0x02	; 2
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	e0 91 b3 22 	lds	r30, 0x22B3	; 0x8022b3 <__flp>
    18d6:	f0 91 b4 22 	lds	r31, 0x22B4	; 0x8022b4 <__flp+0x1>
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	30 97       	sbiw	r30, 0x00	; 0
    18e4:	19 f1       	breq	.+70     	; 0x192c <malloc+0x6c>
    18e6:	40 81       	ld	r20, Z
    18e8:	51 81       	ldd	r21, Z+1	; 0x01
    18ea:	02 81       	ldd	r16, Z+2	; 0x02
    18ec:	13 81       	ldd	r17, Z+3	; 0x03
    18ee:	48 17       	cp	r20, r24
    18f0:	59 07       	cpc	r21, r25
    18f2:	c8 f0       	brcs	.+50     	; 0x1926 <malloc+0x66>
    18f4:	84 17       	cp	r24, r20
    18f6:	95 07       	cpc	r25, r21
    18f8:	69 f4       	brne	.+26     	; 0x1914 <malloc+0x54>
    18fa:	10 97       	sbiw	r26, 0x00	; 0
    18fc:	31 f0       	breq	.+12     	; 0x190a <malloc+0x4a>
    18fe:	12 96       	adiw	r26, 0x02	; 2
    1900:	0c 93       	st	X, r16
    1902:	12 97       	sbiw	r26, 0x02	; 2
    1904:	13 96       	adiw	r26, 0x03	; 3
    1906:	1c 93       	st	X, r17
    1908:	27 c0       	rjmp	.+78     	; 0x1958 <malloc+0x98>
    190a:	00 93 b3 22 	sts	0x22B3, r16	; 0x8022b3 <__flp>
    190e:	10 93 b4 22 	sts	0x22B4, r17	; 0x8022b4 <__flp+0x1>
    1912:	22 c0       	rjmp	.+68     	; 0x1958 <malloc+0x98>
    1914:	21 15       	cp	r18, r1
    1916:	31 05       	cpc	r19, r1
    1918:	19 f0       	breq	.+6      	; 0x1920 <malloc+0x60>
    191a:	42 17       	cp	r20, r18
    191c:	53 07       	cpc	r21, r19
    191e:	18 f4       	brcc	.+6      	; 0x1926 <malloc+0x66>
    1920:	9a 01       	movw	r18, r20
    1922:	bd 01       	movw	r22, r26
    1924:	ef 01       	movw	r28, r30
    1926:	df 01       	movw	r26, r30
    1928:	f8 01       	movw	r30, r16
    192a:	db cf       	rjmp	.-74     	; 0x18e2 <malloc+0x22>
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	f9 f0       	breq	.+62     	; 0x1970 <malloc+0xb0>
    1932:	28 1b       	sub	r18, r24
    1934:	39 0b       	sbc	r19, r25
    1936:	24 30       	cpi	r18, 0x04	; 4
    1938:	31 05       	cpc	r19, r1
    193a:	80 f4       	brcc	.+32     	; 0x195c <malloc+0x9c>
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	61 15       	cp	r22, r1
    1942:	71 05       	cpc	r23, r1
    1944:	21 f0       	breq	.+8      	; 0x194e <malloc+0x8e>
    1946:	fb 01       	movw	r30, r22
    1948:	82 83       	std	Z+2, r24	; 0x02
    194a:	93 83       	std	Z+3, r25	; 0x03
    194c:	04 c0       	rjmp	.+8      	; 0x1956 <malloc+0x96>
    194e:	80 93 b3 22 	sts	0x22B3, r24	; 0x8022b3 <__flp>
    1952:	90 93 b4 22 	sts	0x22B4, r25	; 0x8022b4 <__flp+0x1>
    1956:	fe 01       	movw	r30, r28
    1958:	32 96       	adiw	r30, 0x02	; 2
    195a:	44 c0       	rjmp	.+136    	; 0x19e4 <malloc+0x124>
    195c:	fe 01       	movw	r30, r28
    195e:	e2 0f       	add	r30, r18
    1960:	f3 1f       	adc	r31, r19
    1962:	81 93       	st	Z+, r24
    1964:	91 93       	st	Z+, r25
    1966:	22 50       	subi	r18, 0x02	; 2
    1968:	31 09       	sbc	r19, r1
    196a:	28 83       	st	Y, r18
    196c:	39 83       	std	Y+1, r19	; 0x01
    196e:	3a c0       	rjmp	.+116    	; 0x19e4 <malloc+0x124>
    1970:	20 91 b1 22 	lds	r18, 0x22B1	; 0x8022b1 <__brkval>
    1974:	30 91 b2 22 	lds	r19, 0x22B2	; 0x8022b2 <__brkval+0x1>
    1978:	23 2b       	or	r18, r19
    197a:	41 f4       	brne	.+16     	; 0x198c <malloc+0xcc>
    197c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1980:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    1984:	20 93 b1 22 	sts	0x22B1, r18	; 0x8022b1 <__brkval>
    1988:	30 93 b2 22 	sts	0x22B2, r19	; 0x8022b2 <__brkval+0x1>
    198c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    1990:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    1994:	21 15       	cp	r18, r1
    1996:	31 05       	cpc	r19, r1
    1998:	41 f4       	brne	.+16     	; 0x19aa <malloc+0xea>
    199a:	2d b7       	in	r18, 0x3d	; 61
    199c:	3e b7       	in	r19, 0x3e	; 62
    199e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    19a2:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    19a6:	24 1b       	sub	r18, r20
    19a8:	35 0b       	sbc	r19, r21
    19aa:	e0 91 b1 22 	lds	r30, 0x22B1	; 0x8022b1 <__brkval>
    19ae:	f0 91 b2 22 	lds	r31, 0x22B2	; 0x8022b2 <__brkval+0x1>
    19b2:	e2 17       	cp	r30, r18
    19b4:	f3 07       	cpc	r31, r19
    19b6:	a0 f4       	brcc	.+40     	; 0x19e0 <malloc+0x120>
    19b8:	2e 1b       	sub	r18, r30
    19ba:	3f 0b       	sbc	r19, r31
    19bc:	28 17       	cp	r18, r24
    19be:	39 07       	cpc	r19, r25
    19c0:	78 f0       	brcs	.+30     	; 0x19e0 <malloc+0x120>
    19c2:	ac 01       	movw	r20, r24
    19c4:	4e 5f       	subi	r20, 0xFE	; 254
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	24 17       	cp	r18, r20
    19ca:	35 07       	cpc	r19, r21
    19cc:	48 f0       	brcs	.+18     	; 0x19e0 <malloc+0x120>
    19ce:	4e 0f       	add	r20, r30
    19d0:	5f 1f       	adc	r21, r31
    19d2:	40 93 b1 22 	sts	0x22B1, r20	; 0x8022b1 <__brkval>
    19d6:	50 93 b2 22 	sts	0x22B2, r21	; 0x8022b2 <__brkval+0x1>
    19da:	81 93       	st	Z+, r24
    19dc:	91 93       	st	Z+, r25
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <malloc+0x124>
    19e0:	e0 e0       	ldi	r30, 0x00	; 0
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	cf 01       	movw	r24, r30
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	08 95       	ret

000019f0 <free>:
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	09 f4       	brne	.+2      	; 0x19fa <free+0xa>
    19f8:	81 c0       	rjmp	.+258    	; 0x1afc <free+0x10c>
    19fa:	fc 01       	movw	r30, r24
    19fc:	32 97       	sbiw	r30, 0x02	; 2
    19fe:	12 82       	std	Z+2, r1	; 0x02
    1a00:	13 82       	std	Z+3, r1	; 0x03
    1a02:	a0 91 b3 22 	lds	r26, 0x22B3	; 0x8022b3 <__flp>
    1a06:	b0 91 b4 22 	lds	r27, 0x22B4	; 0x8022b4 <__flp+0x1>
    1a0a:	10 97       	sbiw	r26, 0x00	; 0
    1a0c:	81 f4       	brne	.+32     	; 0x1a2e <free+0x3e>
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	82 0f       	add	r24, r18
    1a14:	93 1f       	adc	r25, r19
    1a16:	20 91 b1 22 	lds	r18, 0x22B1	; 0x8022b1 <__brkval>
    1a1a:	30 91 b2 22 	lds	r19, 0x22B2	; 0x8022b2 <__brkval+0x1>
    1a1e:	28 17       	cp	r18, r24
    1a20:	39 07       	cpc	r19, r25
    1a22:	51 f5       	brne	.+84     	; 0x1a78 <free+0x88>
    1a24:	e0 93 b1 22 	sts	0x22B1, r30	; 0x8022b1 <__brkval>
    1a28:	f0 93 b2 22 	sts	0x22B2, r31	; 0x8022b2 <__brkval+0x1>
    1a2c:	67 c0       	rjmp	.+206    	; 0x1afc <free+0x10c>
    1a2e:	ed 01       	movw	r28, r26
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	ce 17       	cp	r28, r30
    1a36:	df 07       	cpc	r29, r31
    1a38:	40 f4       	brcc	.+16     	; 0x1a4a <free+0x5a>
    1a3a:	4a 81       	ldd	r20, Y+2	; 0x02
    1a3c:	5b 81       	ldd	r21, Y+3	; 0x03
    1a3e:	9e 01       	movw	r18, r28
    1a40:	41 15       	cp	r20, r1
    1a42:	51 05       	cpc	r21, r1
    1a44:	f1 f0       	breq	.+60     	; 0x1a82 <free+0x92>
    1a46:	ea 01       	movw	r28, r20
    1a48:	f5 cf       	rjmp	.-22     	; 0x1a34 <free+0x44>
    1a4a:	c2 83       	std	Z+2, r28	; 0x02
    1a4c:	d3 83       	std	Z+3, r29	; 0x03
    1a4e:	40 81       	ld	r20, Z
    1a50:	51 81       	ldd	r21, Z+1	; 0x01
    1a52:	84 0f       	add	r24, r20
    1a54:	95 1f       	adc	r25, r21
    1a56:	c8 17       	cp	r28, r24
    1a58:	d9 07       	cpc	r29, r25
    1a5a:	59 f4       	brne	.+22     	; 0x1a72 <free+0x82>
    1a5c:	88 81       	ld	r24, Y
    1a5e:	99 81       	ldd	r25, Y+1	; 0x01
    1a60:	84 0f       	add	r24, r20
    1a62:	95 1f       	adc	r25, r21
    1a64:	02 96       	adiw	r24, 0x02	; 2
    1a66:	80 83       	st	Z, r24
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	82 83       	std	Z+2, r24	; 0x02
    1a70:	93 83       	std	Z+3, r25	; 0x03
    1a72:	21 15       	cp	r18, r1
    1a74:	31 05       	cpc	r19, r1
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <free+0x92>
    1a78:	e0 93 b3 22 	sts	0x22B3, r30	; 0x8022b3 <__flp>
    1a7c:	f0 93 b4 22 	sts	0x22B4, r31	; 0x8022b4 <__flp+0x1>
    1a80:	3d c0       	rjmp	.+122    	; 0x1afc <free+0x10c>
    1a82:	e9 01       	movw	r28, r18
    1a84:	ea 83       	std	Y+2, r30	; 0x02
    1a86:	fb 83       	std	Y+3, r31	; 0x03
    1a88:	49 91       	ld	r20, Y+
    1a8a:	59 91       	ld	r21, Y+
    1a8c:	c4 0f       	add	r28, r20
    1a8e:	d5 1f       	adc	r29, r21
    1a90:	ec 17       	cp	r30, r28
    1a92:	fd 07       	cpc	r31, r29
    1a94:	61 f4       	brne	.+24     	; 0x1aae <free+0xbe>
    1a96:	80 81       	ld	r24, Z
    1a98:	91 81       	ldd	r25, Z+1	; 0x01
    1a9a:	84 0f       	add	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	02 96       	adiw	r24, 0x02	; 2
    1aa0:	e9 01       	movw	r28, r18
    1aa2:	88 83       	st	Y, r24
    1aa4:	99 83       	std	Y+1, r25	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	9b 83       	std	Y+3, r25	; 0x03
    1aae:	e0 e0       	ldi	r30, 0x00	; 0
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	12 96       	adiw	r26, 0x02	; 2
    1ab4:	8d 91       	ld	r24, X+
    1ab6:	9c 91       	ld	r25, X
    1ab8:	13 97       	sbiw	r26, 0x03	; 3
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <free+0xd4>
    1abe:	fd 01       	movw	r30, r26
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	f7 cf       	rjmp	.-18     	; 0x1ab2 <free+0xc2>
    1ac4:	8d 91       	ld	r24, X+
    1ac6:	9c 91       	ld	r25, X
    1ac8:	11 97       	sbiw	r26, 0x01	; 1
    1aca:	9d 01       	movw	r18, r26
    1acc:	2e 5f       	subi	r18, 0xFE	; 254
    1ace:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad0:	82 0f       	add	r24, r18
    1ad2:	93 1f       	adc	r25, r19
    1ad4:	20 91 b1 22 	lds	r18, 0x22B1	; 0x8022b1 <__brkval>
    1ad8:	30 91 b2 22 	lds	r19, 0x22B2	; 0x8022b2 <__brkval+0x1>
    1adc:	28 17       	cp	r18, r24
    1ade:	39 07       	cpc	r19, r25
    1ae0:	69 f4       	brne	.+26     	; 0x1afc <free+0x10c>
    1ae2:	30 97       	sbiw	r30, 0x00	; 0
    1ae4:	29 f4       	brne	.+10     	; 0x1af0 <free+0x100>
    1ae6:	10 92 b3 22 	sts	0x22B3, r1	; 0x8022b3 <__flp>
    1aea:	10 92 b4 22 	sts	0x22B4, r1	; 0x8022b4 <__flp+0x1>
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <free+0x104>
    1af0:	12 82       	std	Z+2, r1	; 0x02
    1af2:	13 82       	std	Z+3, r1	; 0x03
    1af4:	a0 93 b1 22 	sts	0x22B1, r26	; 0x8022b1 <__brkval>
    1af8:	b0 93 b2 22 	sts	0x22B2, r27	; 0x8022b2 <__brkval+0x1>
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <atoi>:
    1b02:	fc 01       	movw	r30, r24
    1b04:	88 27       	eor	r24, r24
    1b06:	99 27       	eor	r25, r25
    1b08:	e8 94       	clt
    1b0a:	21 91       	ld	r18, Z+
    1b0c:	20 32       	cpi	r18, 0x20	; 32
    1b0e:	e9 f3       	breq	.-6      	; 0x1b0a <atoi+0x8>
    1b10:	29 30       	cpi	r18, 0x09	; 9
    1b12:	10 f0       	brcs	.+4      	; 0x1b18 <atoi+0x16>
    1b14:	2e 30       	cpi	r18, 0x0E	; 14
    1b16:	c8 f3       	brcs	.-14     	; 0x1b0a <atoi+0x8>
    1b18:	2b 32       	cpi	r18, 0x2B	; 43
    1b1a:	41 f0       	breq	.+16     	; 0x1b2c <atoi+0x2a>
    1b1c:	2d 32       	cpi	r18, 0x2D	; 45
    1b1e:	39 f4       	brne	.+14     	; 0x1b2e <atoi+0x2c>
    1b20:	68 94       	set
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <atoi+0x2a>
    1b24:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__mulhi_const_10>
    1b28:	82 0f       	add	r24, r18
    1b2a:	91 1d       	adc	r25, r1
    1b2c:	21 91       	ld	r18, Z+
    1b2e:	20 53       	subi	r18, 0x30	; 48
    1b30:	2a 30       	cpi	r18, 0x0A	; 10
    1b32:	c0 f3       	brcs	.-16     	; 0x1b24 <atoi+0x22>
    1b34:	1e f4       	brtc	.+6      	; 0x1b3c <atoi+0x3a>
    1b36:	90 95       	com	r25
    1b38:	81 95       	neg	r24
    1b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3c:	08 95       	ret

00001b3e <memcpy>:
    1b3e:	fb 01       	movw	r30, r22
    1b40:	dc 01       	movw	r26, r24
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <memcpy+0xa>
    1b44:	01 90       	ld	r0, Z+
    1b46:	0d 92       	st	X+, r0
    1b48:	41 50       	subi	r20, 0x01	; 1
    1b4a:	50 40       	sbci	r21, 0x00	; 0
    1b4c:	d8 f7       	brcc	.-10     	; 0x1b44 <memcpy+0x6>
    1b4e:	08 95       	ret

00001b50 <strcat>:
    1b50:	fb 01       	movw	r30, r22
    1b52:	dc 01       	movw	r26, r24
    1b54:	0d 90       	ld	r0, X+
    1b56:	00 20       	and	r0, r0
    1b58:	e9 f7       	brne	.-6      	; 0x1b54 <strcat+0x4>
    1b5a:	11 97       	sbiw	r26, 0x01	; 1
    1b5c:	01 90       	ld	r0, Z+
    1b5e:	0d 92       	st	X+, r0
    1b60:	00 20       	and	r0, r0
    1b62:	e1 f7       	brne	.-8      	; 0x1b5c <strcat+0xc>
    1b64:	08 95       	ret

00001b66 <strcmp>:
    1b66:	fb 01       	movw	r30, r22
    1b68:	dc 01       	movw	r26, r24
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	01 90       	ld	r0, Z+
    1b6e:	80 19       	sub	r24, r0
    1b70:	01 10       	cpse	r0, r1
    1b72:	d9 f3       	breq	.-10     	; 0x1b6a <strcmp+0x4>
    1b74:	99 0b       	sbc	r25, r25
    1b76:	08 95       	ret

00001b78 <strcpy>:
    1b78:	fb 01       	movw	r30, r22
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	0d 92       	st	X+, r0
    1b80:	00 20       	and	r0, r0
    1b82:	e1 f7       	brne	.-8      	; 0x1b7c <strcpy+0x4>
    1b84:	08 95       	ret

00001b86 <__mulhi_const_10>:
    1b86:	7a e0       	ldi	r23, 0x0A	; 10
    1b88:	97 9f       	mul	r25, r23
    1b8a:	90 2d       	mov	r25, r0
    1b8c:	87 9f       	mul	r24, r23
    1b8e:	80 2d       	mov	r24, r0
    1b90:	91 0d       	add	r25, r1
    1b92:	11 24       	eor	r1, r1
    1b94:	08 95       	ret

00001b96 <printf>:
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	ae 01       	movw	r20, r28
    1ba0:	4a 5f       	subi	r20, 0xFA	; 250
    1ba2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba4:	fa 01       	movw	r30, r20
    1ba6:	61 91       	ld	r22, Z+
    1ba8:	71 91       	ld	r23, Z+
    1baa:	af 01       	movw	r20, r30
    1bac:	80 91 b7 22 	lds	r24, 0x22B7	; 0x8022b7 <__iob+0x2>
    1bb0:	90 91 b8 22 	lds	r25, 0x22B8	; 0x8022b8 <__iob+0x3>
    1bb4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <vfprintf>
    1bb8:	df 91       	pop	r29
    1bba:	cf 91       	pop	r28
    1bbc:	08 95       	ret

00001bbe <vfprintf>:
    1bbe:	2f 92       	push	r2
    1bc0:	3f 92       	push	r3
    1bc2:	4f 92       	push	r4
    1bc4:	5f 92       	push	r5
    1bc6:	6f 92       	push	r6
    1bc8:	7f 92       	push	r7
    1bca:	8f 92       	push	r8
    1bcc:	9f 92       	push	r9
    1bce:	af 92       	push	r10
    1bd0:	bf 92       	push	r11
    1bd2:	cf 92       	push	r12
    1bd4:	df 92       	push	r13
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	cf 93       	push	r28
    1be0:	df 93       	push	r29
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	2b 97       	sbiw	r28, 0x0b	; 11
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	6c 01       	movw	r12, r24
    1bee:	7b 01       	movw	r14, r22
    1bf0:	8a 01       	movw	r16, r20
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	16 82       	std	Z+6, r1	; 0x06
    1bf6:	17 82       	std	Z+7, r1	; 0x07
    1bf8:	83 81       	ldd	r24, Z+3	; 0x03
    1bfa:	81 ff       	sbrs	r24, 1
    1bfc:	cc c1       	rjmp	.+920    	; 0x1f96 <vfprintf+0x3d8>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	3c 01       	movw	r6, r24
    1c04:	f6 01       	movw	r30, r12
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	f7 01       	movw	r30, r14
    1c0a:	93 fd       	sbrc	r25, 3
    1c0c:	85 91       	lpm	r24, Z+
    1c0e:	93 ff       	sbrs	r25, 3
    1c10:	81 91       	ld	r24, Z+
    1c12:	7f 01       	movw	r14, r30
    1c14:	88 23       	and	r24, r24
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <vfprintf+0x5c>
    1c18:	ba c1       	rjmp	.+884    	; 0x1f8e <vfprintf+0x3d0>
    1c1a:	85 32       	cpi	r24, 0x25	; 37
    1c1c:	39 f4       	brne	.+14     	; 0x1c2c <vfprintf+0x6e>
    1c1e:	93 fd       	sbrc	r25, 3
    1c20:	85 91       	lpm	r24, Z+
    1c22:	93 ff       	sbrs	r25, 3
    1c24:	81 91       	ld	r24, Z+
    1c26:	7f 01       	movw	r14, r30
    1c28:	85 32       	cpi	r24, 0x25	; 37
    1c2a:	29 f4       	brne	.+10     	; 0x1c36 <vfprintf+0x78>
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1c34:	e7 cf       	rjmp	.-50     	; 0x1c04 <vfprintf+0x46>
    1c36:	91 2c       	mov	r9, r1
    1c38:	21 2c       	mov	r2, r1
    1c3a:	31 2c       	mov	r3, r1
    1c3c:	ff e1       	ldi	r31, 0x1F	; 31
    1c3e:	f3 15       	cp	r31, r3
    1c40:	d8 f0       	brcs	.+54     	; 0x1c78 <vfprintf+0xba>
    1c42:	8b 32       	cpi	r24, 0x2B	; 43
    1c44:	79 f0       	breq	.+30     	; 0x1c64 <vfprintf+0xa6>
    1c46:	38 f4       	brcc	.+14     	; 0x1c56 <vfprintf+0x98>
    1c48:	80 32       	cpi	r24, 0x20	; 32
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <vfprintf+0xac>
    1c4c:	83 32       	cpi	r24, 0x23	; 35
    1c4e:	a1 f4       	brne	.+40     	; 0x1c78 <vfprintf+0xba>
    1c50:	23 2d       	mov	r18, r3
    1c52:	20 61       	ori	r18, 0x10	; 16
    1c54:	1d c0       	rjmp	.+58     	; 0x1c90 <vfprintf+0xd2>
    1c56:	8d 32       	cpi	r24, 0x2D	; 45
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <vfprintf+0xb4>
    1c5a:	80 33       	cpi	r24, 0x30	; 48
    1c5c:	69 f4       	brne	.+26     	; 0x1c78 <vfprintf+0xba>
    1c5e:	23 2d       	mov	r18, r3
    1c60:	21 60       	ori	r18, 0x01	; 1
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <vfprintf+0xd2>
    1c64:	83 2d       	mov	r24, r3
    1c66:	82 60       	ori	r24, 0x02	; 2
    1c68:	38 2e       	mov	r3, r24
    1c6a:	e3 2d       	mov	r30, r3
    1c6c:	e4 60       	ori	r30, 0x04	; 4
    1c6e:	3e 2e       	mov	r3, r30
    1c70:	2a c0       	rjmp	.+84     	; 0x1cc6 <vfprintf+0x108>
    1c72:	f3 2d       	mov	r31, r3
    1c74:	f8 60       	ori	r31, 0x08	; 8
    1c76:	1d c0       	rjmp	.+58     	; 0x1cb2 <vfprintf+0xf4>
    1c78:	37 fc       	sbrc	r3, 7
    1c7a:	2d c0       	rjmp	.+90     	; 0x1cd6 <vfprintf+0x118>
    1c7c:	20 ed       	ldi	r18, 0xD0	; 208
    1c7e:	28 0f       	add	r18, r24
    1c80:	2a 30       	cpi	r18, 0x0A	; 10
    1c82:	40 f0       	brcs	.+16     	; 0x1c94 <vfprintf+0xd6>
    1c84:	8e 32       	cpi	r24, 0x2E	; 46
    1c86:	b9 f4       	brne	.+46     	; 0x1cb6 <vfprintf+0xf8>
    1c88:	36 fc       	sbrc	r3, 6
    1c8a:	81 c1       	rjmp	.+770    	; 0x1f8e <vfprintf+0x3d0>
    1c8c:	23 2d       	mov	r18, r3
    1c8e:	20 64       	ori	r18, 0x40	; 64
    1c90:	32 2e       	mov	r3, r18
    1c92:	19 c0       	rjmp	.+50     	; 0x1cc6 <vfprintf+0x108>
    1c94:	36 fe       	sbrs	r3, 6
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0xe6>
    1c98:	8a e0       	ldi	r24, 0x0A	; 10
    1c9a:	98 9e       	mul	r9, r24
    1c9c:	20 0d       	add	r18, r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	92 2e       	mov	r9, r18
    1ca2:	11 c0       	rjmp	.+34     	; 0x1cc6 <vfprintf+0x108>
    1ca4:	ea e0       	ldi	r30, 0x0A	; 10
    1ca6:	2e 9e       	mul	r2, r30
    1ca8:	20 0d       	add	r18, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	22 2e       	mov	r2, r18
    1cae:	f3 2d       	mov	r31, r3
    1cb0:	f0 62       	ori	r31, 0x20	; 32
    1cb2:	3f 2e       	mov	r3, r31
    1cb4:	08 c0       	rjmp	.+16     	; 0x1cc6 <vfprintf+0x108>
    1cb6:	8c 36       	cpi	r24, 0x6C	; 108
    1cb8:	21 f4       	brne	.+8      	; 0x1cc2 <vfprintf+0x104>
    1cba:	83 2d       	mov	r24, r3
    1cbc:	80 68       	ori	r24, 0x80	; 128
    1cbe:	38 2e       	mov	r3, r24
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <vfprintf+0x108>
    1cc2:	88 36       	cpi	r24, 0x68	; 104
    1cc4:	41 f4       	brne	.+16     	; 0x1cd6 <vfprintf+0x118>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	93 fd       	sbrc	r25, 3
    1cca:	85 91       	lpm	r24, Z+
    1ccc:	93 ff       	sbrs	r25, 3
    1cce:	81 91       	ld	r24, Z+
    1cd0:	7f 01       	movw	r14, r30
    1cd2:	81 11       	cpse	r24, r1
    1cd4:	b3 cf       	rjmp	.-154    	; 0x1c3c <vfprintf+0x7e>
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	9f 7d       	andi	r25, 0xDF	; 223
    1cda:	95 54       	subi	r25, 0x45	; 69
    1cdc:	93 30       	cpi	r25, 0x03	; 3
    1cde:	28 f4       	brcc	.+10     	; 0x1cea <vfprintf+0x12c>
    1ce0:	0c 5f       	subi	r16, 0xFC	; 252
    1ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce4:	9f e3       	ldi	r25, 0x3F	; 63
    1ce6:	99 83       	std	Y+1, r25	; 0x01
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <vfprintf+0x146>
    1cea:	83 36       	cpi	r24, 0x63	; 99
    1cec:	31 f0       	breq	.+12     	; 0x1cfa <vfprintf+0x13c>
    1cee:	83 37       	cpi	r24, 0x73	; 115
    1cf0:	71 f0       	breq	.+28     	; 0x1d0e <vfprintf+0x150>
    1cf2:	83 35       	cpi	r24, 0x53	; 83
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <vfprintf+0x13a>
    1cf6:	59 c0       	rjmp	.+178    	; 0x1daa <vfprintf+0x1ec>
    1cf8:	21 c0       	rjmp	.+66     	; 0x1d3c <vfprintf+0x17e>
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	80 81       	ld	r24, Z
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	0e 5f       	subi	r16, 0xFE	; 254
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	88 24       	eor	r8, r8
    1d06:	83 94       	inc	r8
    1d08:	91 2c       	mov	r9, r1
    1d0a:	53 01       	movw	r10, r6
    1d0c:	13 c0       	rjmp	.+38     	; 0x1d34 <vfprintf+0x176>
    1d0e:	28 01       	movw	r4, r16
    1d10:	f2 e0       	ldi	r31, 0x02	; 2
    1d12:	4f 0e       	add	r4, r31
    1d14:	51 1c       	adc	r5, r1
    1d16:	f8 01       	movw	r30, r16
    1d18:	a0 80       	ld	r10, Z
    1d1a:	b1 80       	ldd	r11, Z+1	; 0x01
    1d1c:	36 fe       	sbrs	r3, 6
    1d1e:	03 c0       	rjmp	.+6      	; 0x1d26 <vfprintf+0x168>
    1d20:	69 2d       	mov	r22, r9
    1d22:	70 e0       	ldi	r23, 0x00	; 0
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <vfprintf+0x16c>
    1d26:	6f ef       	ldi	r22, 0xFF	; 255
    1d28:	7f ef       	ldi	r23, 0xFF	; 255
    1d2a:	c5 01       	movw	r24, r10
    1d2c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <strnlen>
    1d30:	4c 01       	movw	r8, r24
    1d32:	82 01       	movw	r16, r4
    1d34:	f3 2d       	mov	r31, r3
    1d36:	ff 77       	andi	r31, 0x7F	; 127
    1d38:	3f 2e       	mov	r3, r31
    1d3a:	16 c0       	rjmp	.+44     	; 0x1d68 <vfprintf+0x1aa>
    1d3c:	28 01       	movw	r4, r16
    1d3e:	22 e0       	ldi	r18, 0x02	; 2
    1d40:	42 0e       	add	r4, r18
    1d42:	51 1c       	adc	r5, r1
    1d44:	f8 01       	movw	r30, r16
    1d46:	a0 80       	ld	r10, Z
    1d48:	b1 80       	ldd	r11, Z+1	; 0x01
    1d4a:	36 fe       	sbrs	r3, 6
    1d4c:	03 c0       	rjmp	.+6      	; 0x1d54 <vfprintf+0x196>
    1d4e:	69 2d       	mov	r22, r9
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <vfprintf+0x19a>
    1d54:	6f ef       	ldi	r22, 0xFF	; 255
    1d56:	7f ef       	ldi	r23, 0xFF	; 255
    1d58:	c5 01       	movw	r24, r10
    1d5a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <strnlen_P>
    1d5e:	4c 01       	movw	r8, r24
    1d60:	f3 2d       	mov	r31, r3
    1d62:	f0 68       	ori	r31, 0x80	; 128
    1d64:	3f 2e       	mov	r3, r31
    1d66:	82 01       	movw	r16, r4
    1d68:	33 fc       	sbrc	r3, 3
    1d6a:	1b c0       	rjmp	.+54     	; 0x1da2 <vfprintf+0x1e4>
    1d6c:	82 2d       	mov	r24, r2
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	88 16       	cp	r8, r24
    1d72:	99 06       	cpc	r9, r25
    1d74:	b0 f4       	brcc	.+44     	; 0x1da2 <vfprintf+0x1e4>
    1d76:	b6 01       	movw	r22, r12
    1d78:	80 e2       	ldi	r24, 0x20	; 32
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1d80:	2a 94       	dec	r2
    1d82:	f4 cf       	rjmp	.-24     	; 0x1d6c <vfprintf+0x1ae>
    1d84:	f5 01       	movw	r30, r10
    1d86:	37 fc       	sbrc	r3, 7
    1d88:	85 91       	lpm	r24, Z+
    1d8a:	37 fe       	sbrs	r3, 7
    1d8c:	81 91       	ld	r24, Z+
    1d8e:	5f 01       	movw	r10, r30
    1d90:	b6 01       	movw	r22, r12
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1d98:	21 10       	cpse	r2, r1
    1d9a:	2a 94       	dec	r2
    1d9c:	21 e0       	ldi	r18, 0x01	; 1
    1d9e:	82 1a       	sub	r8, r18
    1da0:	91 08       	sbc	r9, r1
    1da2:	81 14       	cp	r8, r1
    1da4:	91 04       	cpc	r9, r1
    1da6:	71 f7       	brne	.-36     	; 0x1d84 <vfprintf+0x1c6>
    1da8:	e8 c0       	rjmp	.+464    	; 0x1f7a <vfprintf+0x3bc>
    1daa:	84 36       	cpi	r24, 0x64	; 100
    1dac:	11 f0       	breq	.+4      	; 0x1db2 <vfprintf+0x1f4>
    1dae:	89 36       	cpi	r24, 0x69	; 105
    1db0:	41 f5       	brne	.+80     	; 0x1e02 <vfprintf+0x244>
    1db2:	f8 01       	movw	r30, r16
    1db4:	37 fe       	sbrs	r3, 7
    1db6:	07 c0       	rjmp	.+14     	; 0x1dc6 <vfprintf+0x208>
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0c 5f       	subi	r16, 0xFC	; 252
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	08 c0       	rjmp	.+16     	; 0x1dd6 <vfprintf+0x218>
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	07 2e       	mov	r0, r23
    1dcc:	00 0c       	add	r0, r0
    1dce:	88 0b       	sbc	r24, r24
    1dd0:	99 0b       	sbc	r25, r25
    1dd2:	0e 5f       	subi	r16, 0xFE	; 254
    1dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd6:	f3 2d       	mov	r31, r3
    1dd8:	ff 76       	andi	r31, 0x6F	; 111
    1dda:	3f 2e       	mov	r3, r31
    1ddc:	97 ff       	sbrs	r25, 7
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <vfprintf+0x234>
    1de0:	90 95       	com	r25
    1de2:	80 95       	com	r24
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dea:	8f 4f       	sbci	r24, 0xFF	; 255
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	f0 68       	ori	r31, 0x80	; 128
    1df0:	3f 2e       	mov	r3, r31
    1df2:	2a e0       	ldi	r18, 0x0A	; 10
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	a3 01       	movw	r20, r6
    1df8:	0e 94 35 10 	call	0x206a	; 0x206a <__ultoa_invert>
    1dfc:	88 2e       	mov	r8, r24
    1dfe:	86 18       	sub	r8, r6
    1e00:	45 c0       	rjmp	.+138    	; 0x1e8c <vfprintf+0x2ce>
    1e02:	85 37       	cpi	r24, 0x75	; 117
    1e04:	31 f4       	brne	.+12     	; 0x1e12 <vfprintf+0x254>
    1e06:	23 2d       	mov	r18, r3
    1e08:	2f 7e       	andi	r18, 0xEF	; 239
    1e0a:	b2 2e       	mov	r11, r18
    1e0c:	2a e0       	ldi	r18, 0x0A	; 10
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	25 c0       	rjmp	.+74     	; 0x1e5c <vfprintf+0x29e>
    1e12:	93 2d       	mov	r25, r3
    1e14:	99 7f       	andi	r25, 0xF9	; 249
    1e16:	b9 2e       	mov	r11, r25
    1e18:	8f 36       	cpi	r24, 0x6F	; 111
    1e1a:	c1 f0       	breq	.+48     	; 0x1e4c <vfprintf+0x28e>
    1e1c:	18 f4       	brcc	.+6      	; 0x1e24 <vfprintf+0x266>
    1e1e:	88 35       	cpi	r24, 0x58	; 88
    1e20:	79 f0       	breq	.+30     	; 0x1e40 <vfprintf+0x282>
    1e22:	b5 c0       	rjmp	.+362    	; 0x1f8e <vfprintf+0x3d0>
    1e24:	80 37       	cpi	r24, 0x70	; 112
    1e26:	19 f0       	breq	.+6      	; 0x1e2e <vfprintf+0x270>
    1e28:	88 37       	cpi	r24, 0x78	; 120
    1e2a:	21 f0       	breq	.+8      	; 0x1e34 <vfprintf+0x276>
    1e2c:	b0 c0       	rjmp	.+352    	; 0x1f8e <vfprintf+0x3d0>
    1e2e:	e9 2f       	mov	r30, r25
    1e30:	e0 61       	ori	r30, 0x10	; 16
    1e32:	be 2e       	mov	r11, r30
    1e34:	b4 fe       	sbrs	r11, 4
    1e36:	0d c0       	rjmp	.+26     	; 0x1e52 <vfprintf+0x294>
    1e38:	fb 2d       	mov	r31, r11
    1e3a:	f4 60       	ori	r31, 0x04	; 4
    1e3c:	bf 2e       	mov	r11, r31
    1e3e:	09 c0       	rjmp	.+18     	; 0x1e52 <vfprintf+0x294>
    1e40:	34 fe       	sbrs	r3, 4
    1e42:	0a c0       	rjmp	.+20     	; 0x1e58 <vfprintf+0x29a>
    1e44:	29 2f       	mov	r18, r25
    1e46:	26 60       	ori	r18, 0x06	; 6
    1e48:	b2 2e       	mov	r11, r18
    1e4a:	06 c0       	rjmp	.+12     	; 0x1e58 <vfprintf+0x29a>
    1e4c:	28 e0       	ldi	r18, 0x08	; 8
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <vfprintf+0x29e>
    1e52:	20 e1       	ldi	r18, 0x10	; 16
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <vfprintf+0x29e>
    1e58:	20 e1       	ldi	r18, 0x10	; 16
    1e5a:	32 e0       	ldi	r19, 0x02	; 2
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	b7 fe       	sbrs	r11, 7
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <vfprintf+0x2b2>
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0c 5f       	subi	r16, 0xFC	; 252
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0x2be>
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	0e 5f       	subi	r16, 0xFE	; 254
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	a3 01       	movw	r20, r6
    1e7e:	0e 94 35 10 	call	0x206a	; 0x206a <__ultoa_invert>
    1e82:	88 2e       	mov	r8, r24
    1e84:	86 18       	sub	r8, r6
    1e86:	fb 2d       	mov	r31, r11
    1e88:	ff 77       	andi	r31, 0x7F	; 127
    1e8a:	3f 2e       	mov	r3, r31
    1e8c:	36 fe       	sbrs	r3, 6
    1e8e:	0d c0       	rjmp	.+26     	; 0x1eaa <vfprintf+0x2ec>
    1e90:	23 2d       	mov	r18, r3
    1e92:	2e 7f       	andi	r18, 0xFE	; 254
    1e94:	a2 2e       	mov	r10, r18
    1e96:	89 14       	cp	r8, r9
    1e98:	58 f4       	brcc	.+22     	; 0x1eb0 <vfprintf+0x2f2>
    1e9a:	34 fe       	sbrs	r3, 4
    1e9c:	0b c0       	rjmp	.+22     	; 0x1eb4 <vfprintf+0x2f6>
    1e9e:	32 fc       	sbrc	r3, 2
    1ea0:	09 c0       	rjmp	.+18     	; 0x1eb4 <vfprintf+0x2f6>
    1ea2:	83 2d       	mov	r24, r3
    1ea4:	8e 7e       	andi	r24, 0xEE	; 238
    1ea6:	a8 2e       	mov	r10, r24
    1ea8:	05 c0       	rjmp	.+10     	; 0x1eb4 <vfprintf+0x2f6>
    1eaa:	b8 2c       	mov	r11, r8
    1eac:	a3 2c       	mov	r10, r3
    1eae:	03 c0       	rjmp	.+6      	; 0x1eb6 <vfprintf+0x2f8>
    1eb0:	b8 2c       	mov	r11, r8
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <vfprintf+0x2f8>
    1eb4:	b9 2c       	mov	r11, r9
    1eb6:	a4 fe       	sbrs	r10, 4
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <vfprintf+0x31a>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e8 0d       	add	r30, r8
    1ebe:	f1 1d       	adc	r31, r1
    1ec0:	80 81       	ld	r24, Z
    1ec2:	80 33       	cpi	r24, 0x30	; 48
    1ec4:	21 f4       	brne	.+8      	; 0x1ece <vfprintf+0x310>
    1ec6:	9a 2d       	mov	r25, r10
    1ec8:	99 7e       	andi	r25, 0xE9	; 233
    1eca:	a9 2e       	mov	r10, r25
    1ecc:	09 c0       	rjmp	.+18     	; 0x1ee0 <vfprintf+0x322>
    1ece:	a2 fe       	sbrs	r10, 2
    1ed0:	06 c0       	rjmp	.+12     	; 0x1ede <vfprintf+0x320>
    1ed2:	b3 94       	inc	r11
    1ed4:	b3 94       	inc	r11
    1ed6:	04 c0       	rjmp	.+8      	; 0x1ee0 <vfprintf+0x322>
    1ed8:	8a 2d       	mov	r24, r10
    1eda:	86 78       	andi	r24, 0x86	; 134
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <vfprintf+0x322>
    1ede:	b3 94       	inc	r11
    1ee0:	a3 fc       	sbrc	r10, 3
    1ee2:	11 c0       	rjmp	.+34     	; 0x1f06 <vfprintf+0x348>
    1ee4:	a0 fe       	sbrs	r10, 0
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <vfprintf+0x336>
    1ee8:	b2 14       	cp	r11, r2
    1eea:	88 f4       	brcc	.+34     	; 0x1f0e <vfprintf+0x350>
    1eec:	28 0c       	add	r2, r8
    1eee:	92 2c       	mov	r9, r2
    1ef0:	9b 18       	sub	r9, r11
    1ef2:	0e c0       	rjmp	.+28     	; 0x1f10 <vfprintf+0x352>
    1ef4:	b2 14       	cp	r11, r2
    1ef6:	60 f4       	brcc	.+24     	; 0x1f10 <vfprintf+0x352>
    1ef8:	b6 01       	movw	r22, r12
    1efa:	80 e2       	ldi	r24, 0x20	; 32
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f02:	b3 94       	inc	r11
    1f04:	f7 cf       	rjmp	.-18     	; 0x1ef4 <vfprintf+0x336>
    1f06:	b2 14       	cp	r11, r2
    1f08:	18 f4       	brcc	.+6      	; 0x1f10 <vfprintf+0x352>
    1f0a:	2b 18       	sub	r2, r11
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <vfprintf+0x354>
    1f0e:	98 2c       	mov	r9, r8
    1f10:	21 2c       	mov	r2, r1
    1f12:	a4 fe       	sbrs	r10, 4
    1f14:	10 c0       	rjmp	.+32     	; 0x1f36 <vfprintf+0x378>
    1f16:	b6 01       	movw	r22, r12
    1f18:	80 e3       	ldi	r24, 0x30	; 48
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f20:	a2 fe       	sbrs	r10, 2
    1f22:	17 c0       	rjmp	.+46     	; 0x1f52 <vfprintf+0x394>
    1f24:	a1 fc       	sbrc	r10, 1
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <vfprintf+0x370>
    1f28:	88 e7       	ldi	r24, 0x78	; 120
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <vfprintf+0x374>
    1f2e:	88 e5       	ldi	r24, 0x58	; 88
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	b6 01       	movw	r22, r12
    1f34:	0c c0       	rjmp	.+24     	; 0x1f4e <vfprintf+0x390>
    1f36:	8a 2d       	mov	r24, r10
    1f38:	86 78       	andi	r24, 0x86	; 134
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <vfprintf+0x394>
    1f3c:	a1 fe       	sbrs	r10, 1
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <vfprintf+0x386>
    1f40:	8b e2       	ldi	r24, 0x2B	; 43
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <vfprintf+0x388>
    1f44:	80 e2       	ldi	r24, 0x20	; 32
    1f46:	a7 fc       	sbrc	r10, 7
    1f48:	8d e2       	ldi	r24, 0x2D	; 45
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f52:	89 14       	cp	r8, r9
    1f54:	38 f4       	brcc	.+14     	; 0x1f64 <vfprintf+0x3a6>
    1f56:	b6 01       	movw	r22, r12
    1f58:	80 e3       	ldi	r24, 0x30	; 48
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f60:	9a 94       	dec	r9
    1f62:	f7 cf       	rjmp	.-18     	; 0x1f52 <vfprintf+0x394>
    1f64:	8a 94       	dec	r8
    1f66:	f3 01       	movw	r30, r6
    1f68:	e8 0d       	add	r30, r8
    1f6a:	f1 1d       	adc	r31, r1
    1f6c:	80 81       	ld	r24, Z
    1f6e:	b6 01       	movw	r22, r12
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f76:	81 10       	cpse	r8, r1
    1f78:	f5 cf       	rjmp	.-22     	; 0x1f64 <vfprintf+0x3a6>
    1f7a:	22 20       	and	r2, r2
    1f7c:	09 f4       	brne	.+2      	; 0x1f80 <vfprintf+0x3c2>
    1f7e:	42 ce       	rjmp	.-892    	; 0x1c04 <vfprintf+0x46>
    1f80:	b6 01       	movw	r22, r12
    1f82:	80 e2       	ldi	r24, 0x20	; 32
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <fputc>
    1f8a:	2a 94       	dec	r2
    1f8c:	f6 cf       	rjmp	.-20     	; 0x1f7a <vfprintf+0x3bc>
    1f8e:	f6 01       	movw	r30, r12
    1f90:	86 81       	ldd	r24, Z+6	; 0x06
    1f92:	97 81       	ldd	r25, Z+7	; 0x07
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <vfprintf+0x3dc>
    1f96:	8f ef       	ldi	r24, 0xFF	; 255
    1f98:	9f ef       	ldi	r25, 0xFF	; 255
    1f9a:	2b 96       	adiw	r28, 0x0b	; 11
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	df 91       	pop	r29
    1fa2:	cf 91       	pop	r28
    1fa4:	1f 91       	pop	r17
    1fa6:	0f 91       	pop	r16
    1fa8:	ff 90       	pop	r15
    1faa:	ef 90       	pop	r14
    1fac:	df 90       	pop	r13
    1fae:	cf 90       	pop	r12
    1fb0:	bf 90       	pop	r11
    1fb2:	af 90       	pop	r10
    1fb4:	9f 90       	pop	r9
    1fb6:	8f 90       	pop	r8
    1fb8:	7f 90       	pop	r7
    1fba:	6f 90       	pop	r6
    1fbc:	5f 90       	pop	r5
    1fbe:	4f 90       	pop	r4
    1fc0:	3f 90       	pop	r3
    1fc2:	2f 90       	pop	r2
    1fc4:	08 95       	ret

00001fc6 <strnlen_P>:
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	05 90       	lpm	r0, Z+
    1fca:	61 50       	subi	r22, 0x01	; 1
    1fcc:	70 40       	sbci	r23, 0x00	; 0
    1fce:	01 10       	cpse	r0, r1
    1fd0:	d8 f7       	brcc	.-10     	; 0x1fc8 <strnlen_P+0x2>
    1fd2:	80 95       	com	r24
    1fd4:	90 95       	com	r25
    1fd6:	8e 0f       	add	r24, r30
    1fd8:	9f 1f       	adc	r25, r31
    1fda:	08 95       	ret

00001fdc <strnlen>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	61 50       	subi	r22, 0x01	; 1
    1fe0:	70 40       	sbci	r23, 0x00	; 0
    1fe2:	01 90       	ld	r0, Z+
    1fe4:	01 10       	cpse	r0, r1
    1fe6:	d8 f7       	brcc	.-10     	; 0x1fde <strnlen+0x2>
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	8e 0f       	add	r24, r30
    1fee:	9f 1f       	adc	r25, r31
    1ff0:	08 95       	ret

00001ff2 <fputc>:
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	fb 01       	movw	r30, r22
    1ffc:	23 81       	ldd	r18, Z+3	; 0x03
    1ffe:	21 fd       	sbrc	r18, 1
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <fputc+0x16>
    2002:	8f ef       	ldi	r24, 0xFF	; 255
    2004:	9f ef       	ldi	r25, 0xFF	; 255
    2006:	2c c0       	rjmp	.+88     	; 0x2060 <fputc+0x6e>
    2008:	22 ff       	sbrs	r18, 2
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <fputc+0x46>
    200c:	46 81       	ldd	r20, Z+6	; 0x06
    200e:	57 81       	ldd	r21, Z+7	; 0x07
    2010:	24 81       	ldd	r18, Z+4	; 0x04
    2012:	35 81       	ldd	r19, Z+5	; 0x05
    2014:	42 17       	cp	r20, r18
    2016:	53 07       	cpc	r21, r19
    2018:	44 f4       	brge	.+16     	; 0x202a <fputc+0x38>
    201a:	a0 81       	ld	r26, Z
    201c:	b1 81       	ldd	r27, Z+1	; 0x01
    201e:	9d 01       	movw	r18, r26
    2020:	2f 5f       	subi	r18, 0xFF	; 255
    2022:	3f 4f       	sbci	r19, 0xFF	; 255
    2024:	20 83       	st	Z, r18
    2026:	31 83       	std	Z+1, r19	; 0x01
    2028:	8c 93       	st	X, r24
    202a:	26 81       	ldd	r18, Z+6	; 0x06
    202c:	37 81       	ldd	r19, Z+7	; 0x07
    202e:	2f 5f       	subi	r18, 0xFF	; 255
    2030:	3f 4f       	sbci	r19, 0xFF	; 255
    2032:	26 83       	std	Z+6, r18	; 0x06
    2034:	37 83       	std	Z+7, r19	; 0x07
    2036:	14 c0       	rjmp	.+40     	; 0x2060 <fputc+0x6e>
    2038:	8b 01       	movw	r16, r22
    203a:	ec 01       	movw	r28, r24
    203c:	fb 01       	movw	r30, r22
    203e:	00 84       	ldd	r0, Z+8	; 0x08
    2040:	f1 85       	ldd	r31, Z+9	; 0x09
    2042:	e0 2d       	mov	r30, r0
    2044:	19 95       	eicall
    2046:	89 2b       	or	r24, r25
    2048:	e1 f6       	brne	.-72     	; 0x2002 <fputc+0x10>
    204a:	d8 01       	movw	r26, r16
    204c:	16 96       	adiw	r26, 0x06	; 6
    204e:	8d 91       	ld	r24, X+
    2050:	9c 91       	ld	r25, X
    2052:	17 97       	sbiw	r26, 0x07	; 7
    2054:	01 96       	adiw	r24, 0x01	; 1
    2056:	16 96       	adiw	r26, 0x06	; 6
    2058:	8d 93       	st	X+, r24
    205a:	9c 93       	st	X, r25
    205c:	17 97       	sbiw	r26, 0x07	; 7
    205e:	ce 01       	movw	r24, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	1f 91       	pop	r17
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret

0000206a <__ultoa_invert>:
    206a:	fa 01       	movw	r30, r20
    206c:	aa 27       	eor	r26, r26
    206e:	28 30       	cpi	r18, 0x08	; 8
    2070:	51 f1       	breq	.+84     	; 0x20c6 <__ultoa_invert+0x5c>
    2072:	20 31       	cpi	r18, 0x10	; 16
    2074:	81 f1       	breq	.+96     	; 0x20d6 <__ultoa_invert+0x6c>
    2076:	e8 94       	clt
    2078:	6f 93       	push	r22
    207a:	6e 7f       	andi	r22, 0xFE	; 254
    207c:	6e 5f       	subi	r22, 0xFE	; 254
    207e:	7f 4f       	sbci	r23, 0xFF	; 255
    2080:	8f 4f       	sbci	r24, 0xFF	; 255
    2082:	9f 4f       	sbci	r25, 0xFF	; 255
    2084:	af 4f       	sbci	r26, 0xFF	; 255
    2086:	b1 e0       	ldi	r27, 0x01	; 1
    2088:	3e d0       	rcall	.+124    	; 0x2106 <__ultoa_invert+0x9c>
    208a:	b4 e0       	ldi	r27, 0x04	; 4
    208c:	3c d0       	rcall	.+120    	; 0x2106 <__ultoa_invert+0x9c>
    208e:	67 0f       	add	r22, r23
    2090:	78 1f       	adc	r23, r24
    2092:	89 1f       	adc	r24, r25
    2094:	9a 1f       	adc	r25, r26
    2096:	a1 1d       	adc	r26, r1
    2098:	68 0f       	add	r22, r24
    209a:	79 1f       	adc	r23, r25
    209c:	8a 1f       	adc	r24, r26
    209e:	91 1d       	adc	r25, r1
    20a0:	a1 1d       	adc	r26, r1
    20a2:	6a 0f       	add	r22, r26
    20a4:	71 1d       	adc	r23, r1
    20a6:	81 1d       	adc	r24, r1
    20a8:	91 1d       	adc	r25, r1
    20aa:	a1 1d       	adc	r26, r1
    20ac:	20 d0       	rcall	.+64     	; 0x20ee <__ultoa_invert+0x84>
    20ae:	09 f4       	brne	.+2      	; 0x20b2 <__ultoa_invert+0x48>
    20b0:	68 94       	set
    20b2:	3f 91       	pop	r19
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	26 9f       	mul	r18, r22
    20b8:	11 24       	eor	r1, r1
    20ba:	30 19       	sub	r19, r0
    20bc:	30 5d       	subi	r19, 0xD0	; 208
    20be:	31 93       	st	Z+, r19
    20c0:	de f6       	brtc	.-74     	; 0x2078 <__ultoa_invert+0xe>
    20c2:	cf 01       	movw	r24, r30
    20c4:	08 95       	ret
    20c6:	46 2f       	mov	r20, r22
    20c8:	47 70       	andi	r20, 0x07	; 7
    20ca:	40 5d       	subi	r20, 0xD0	; 208
    20cc:	41 93       	st	Z+, r20
    20ce:	b3 e0       	ldi	r27, 0x03	; 3
    20d0:	0f d0       	rcall	.+30     	; 0x20f0 <__ultoa_invert+0x86>
    20d2:	c9 f7       	brne	.-14     	; 0x20c6 <__ultoa_invert+0x5c>
    20d4:	f6 cf       	rjmp	.-20     	; 0x20c2 <__ultoa_invert+0x58>
    20d6:	46 2f       	mov	r20, r22
    20d8:	4f 70       	andi	r20, 0x0F	; 15
    20da:	40 5d       	subi	r20, 0xD0	; 208
    20dc:	4a 33       	cpi	r20, 0x3A	; 58
    20de:	18 f0       	brcs	.+6      	; 0x20e6 <__ultoa_invert+0x7c>
    20e0:	49 5d       	subi	r20, 0xD9	; 217
    20e2:	31 fd       	sbrc	r19, 1
    20e4:	40 52       	subi	r20, 0x20	; 32
    20e6:	41 93       	st	Z+, r20
    20e8:	02 d0       	rcall	.+4      	; 0x20ee <__ultoa_invert+0x84>
    20ea:	a9 f7       	brne	.-22     	; 0x20d6 <__ultoa_invert+0x6c>
    20ec:	ea cf       	rjmp	.-44     	; 0x20c2 <__ultoa_invert+0x58>
    20ee:	b4 e0       	ldi	r27, 0x04	; 4
    20f0:	a6 95       	lsr	r26
    20f2:	97 95       	ror	r25
    20f4:	87 95       	ror	r24
    20f6:	77 95       	ror	r23
    20f8:	67 95       	ror	r22
    20fa:	ba 95       	dec	r27
    20fc:	c9 f7       	brne	.-14     	; 0x20f0 <__ultoa_invert+0x86>
    20fe:	00 97       	sbiw	r24, 0x00	; 0
    2100:	61 05       	cpc	r22, r1
    2102:	71 05       	cpc	r23, r1
    2104:	08 95       	ret
    2106:	9b 01       	movw	r18, r22
    2108:	ac 01       	movw	r20, r24
    210a:	0a 2e       	mov	r0, r26
    210c:	06 94       	lsr	r0
    210e:	57 95       	ror	r21
    2110:	47 95       	ror	r20
    2112:	37 95       	ror	r19
    2114:	27 95       	ror	r18
    2116:	ba 95       	dec	r27
    2118:	c9 f7       	brne	.-14     	; 0x210c <__ultoa_invert+0xa2>
    211a:	62 0f       	add	r22, r18
    211c:	73 1f       	adc	r23, r19
    211e:	84 1f       	adc	r24, r20
    2120:	95 1f       	adc	r25, r21
    2122:	a0 1d       	adc	r26, r0
    2124:	08 95       	ret

00002126 <_exit>:
    2126:	f8 94       	cli

00002128 <__stop_program>:
    2128:	ff cf       	rjmp	.-2      	; 0x2128 <__stop_program>
